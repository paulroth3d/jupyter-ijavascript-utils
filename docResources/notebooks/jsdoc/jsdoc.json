[
  {
    "comment": "",
    "meta": {
      "range": [
        53,
        87
      ],
      "filename": "aggregate.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000003",
        "name": "Percentile",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "Percentile",
    "longname": "Percentile",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        96,
        127
      ],
      "filename": "aggregate.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000009",
        "name": "ArrayUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ArrayUtils",
    "longname": "ArrayUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        135,
        168
      ],
      "filename": "aggregate.js",
      "lineno": 6,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000015",
        "name": "ObjectUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ObjectUtils",
    "longname": "ObjectUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        176,
        209
      ],
      "filename": "aggregate.js",
      "lineno": 7,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000021",
        "name": "FormatUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "FormatUtils",
    "longname": "FormatUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Utilities that provide a reduced value from a collection.\n * \n * (Note that this can also map the collection down first)\n * \n * This can be very helpful with {@link SourceMap#reduce|SourceMap.reduce()}\n * or {@link module:group.by|group.by()} in aggregating a series.\n * \n * Types of methods:\n * \n * * Select a single property\n *   * {@link module:aggregate.property|property()} - maps to a single property (often used with other libraries)\n * * Ranges of values\n *   * {@link module:aggregate.extent|extent()} - returns the min and max of range\n *   * {@link module:aggregate.min|min()} - returns the minimum value of the range\n *   * {@link module:aggregate.max|max()} - returns the maximum value of the range\n *   * {@link module:aggregate.difference|difference()} - returns the difference between max and min values\n * * Average values\n *   * {@link module:aggregate.avgMedian|avgMedian()} - finds the median (halfway number in a sorted series)\n *   * {@link module:aggregate.avgMean|avgMean()} - Finds the mean value (sum of all values / # of values)\n * * Unique / Duplicate values\n *   * {@link module:aggregate.duplicates|duplicates()} - returns values found more than once\n *   * {@link module:aggregate.count|count()} - returns count of values in ways easily convertable to string\n *   * {@link module:aggregate.countMap|countMap()} - return count of values in a map\n *   * {@link module:aggregate.unique|unique()} - returns values found only once\n *   * {@link module:aggregate.distinct|distinct()} - returns the number of unique values found (unique.length)\n *   * {@link module:aggregate.notIn|notIn()} - returns which values are not in a superset\n *   * {@link module:aggregate.isUnique|isUnique()} - returns whether the values in the list are unique\n * * Meta / Coalesce\n *   * {@link module:aggregate.length|length()} - Number of records found in the collection\n *   * {@link module:aggregate.first|first()} - returns first non-null/undefined in list\n *   * {@link module:aggregate.sum|sum()} - sum of a collection\n * * Functional\n *   * {@link module:aggregate.deferCollection|deferCollection(function, bindArg, bindArg, ...)} - bind a function with arguments\n * * Percentile\n *   * {@link module:aggregate.percentile|percentile()} - determines the Nth percentile of a field or value\n *   * {@link module:aggregate.percentile_01|percentile_01()} - 1th percentile\n *   * {@link module:aggregate.percentile_05|percentile_05()} - 5th percentile\n *   * {@link module:aggregate.percentile_10|percentile_10()} - 10th percentile\n *   * {@link module:aggregate.percentile_25|percentile_25()} - 25th percentile\n *   * {@link module:aggregate.percentile_50|percentile_50()} - 50th percentile\n *   * {@link module:aggregate.percentile_75|percentile_75()} - 75th percentile\n *   * {@link module:aggregate.percentile_90|percentile_90()} - 90th percentile\n *   * {@link module:aggregate.percentile_95|percentile_95()} - 95th percentile\n *   * {@link module:aggregate.percentile_99|percentile_99()} - 99th percentile\n * * Top Values\n *   * {@link module:aggregate.topValues|topValues} - top (or bottom) values from a list of objects or literals\n * \n * Please note, there is nothing special for these functions, such as working with {@link SourceMap#reduce|SourceMap.reduce()}\n * \n * They simply accept a collection and provide a result,\n * often using the {@link module:aggregate.evaluateFunctionOrProperty|aggregate.evaluateFunctionOrProperty()}\n * with the second argument.\n * \n * ## Overall Example\n * \n * Assume we have two tyeps of values:\n * \n * ```\n * collection = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n * ];\n * ```\n * \n * ```\n * // collection.map(r => r.precip);\n * series = [0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56, 3.98];\n * ```\n * \n * ## Working with Groups\n * \n * The expected way this will be used most is with the {@link module:group|group.by(collection, field, ...)} call.\n * \n * (See also {@link https://observablehq.com/@d3/d3-group|d3-group functionality})\n * \n * ```\n * utils.group.by(collection, 'city')\n *   .reduce((collection) => ({\n *     monthsReporting: utils.aggregate.unique(collection, 'month'),\n *     avgPrecipitation: utils.aggregate.sum(collection, 'precip'),\n *     numReports: utils.aggregate.length(collection),\n *     minPrecip: utils.aggregate.min(collection, 'precip'),\n *     maxPrecip: utils.aggregate.min(collection, 'precip'),\n *     variancePrecip: utils.aggregate.difference(collection, 'precip'),\n *   }))\n * \n * providing\n * [\n *   {\n *     city: 'Seattle',\n *     monthsReporting: [ 'Aug', 'Apr', 'Dec' ],\n *     avgPrecipitation: 8.86,\n *     numReports: 3,\n *     minPrecip: 0.87,\n *     maxPrecip: 0.87,\n *     variancePrecip: 4.43999\n *   },\n *   {\n *     city: 'New York',\n *     monthsReporting: [ 'Apr', 'Aug', 'Dec' ],\n *     avgPrecipitation: 11.65,\n *     numReports: 3,\n *     minPrecip: 3.58,\n *     maxPrecip: 3.58,\n *     variancePrecip: 0.54999\n *   },\n *   ...\n * ]\n * ```\n * \n * ## Using in Tables\n * \n * ({@link TableGenerator|see TableGenerator})\n * \n * ```\n * new utils.TableGenerator()\n *     .data(\n *       utils.group.by(collection, 'city')\n *        .reduce((collection) => ({\n *          monthsReporting: utils.aggregate.unique(collection, 'month'),\n *          avgPrecipitation: utils.aggregate.sum(collection, 'precip'),\n *          numReports: utils.aggregate.length(collection),\n *          minPrecip: utils.aggregate.min(collection, 'precip'),\n *          maxPrecip: utils.aggregate.min(collection, 'precip'),\n *          variancePrecip: utils.aggregate.difference(collection, 'precip'),\n *        }))\n *     )\n *     .labels({ monthsReporting: 'Months',\n *              avgPrecipitation: 'Avg. Precip.',\n *              numReports: '# Reports'\n *     })\n *     .render()\n * ```\n * \n * ![Screenshot](img/PrecipitationAvgTable.png)\n * \n * ## Using in Vega Charts\n * \n * ({@link module:vega|see vega module})\n * \n * ```\n * utils.vega.svg((vl) => vl.markLine()\n *    .data(\n *       utils.group.by(collection, 'city')\n *        .reduceSeparate((collection) => ({\n *          minPrecip: utils.aggregate.min(collection, 'precip'),\n *          maxPrecip: utils.aggregate.max(collection, 'precip'),\n *          avgPrecip: utils.aggregate.avgMean(collection, 'precip'),\n *        }))\n *    )\n *    .title('Precipitation by City')\n *    .width(400)\n *    .encode(\n *         vl.x().fieldN('city'),\n *         vl.y().fieldQ('_aggregateValue').title('Precipitation'),\n *         vl.color().fieldN('_aggregateKey').title('Calculation')\n *    )\n * );\n * ```\n * \n * ![Screenshot](img/PrecipitationAvgChart.png)\n * \n * ## Working with Simple Arrays\n * \n * Simple arrays do not need a mapping function or property,\n * we can simply pass null (or no second argument at all).\n * \n * ```\n * series = [0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56, 3.98];\n * utils.aggregate.min(series, null);\n * // provides 0.87\n * ```\n * \n * This is the same as `series.sort(utils.array.SORT_ASCENDING)[0]`\n * \n * ## Working with Mapping Functions\n * \n * If we want a specific value, we can pass a mapping function first.\n * \n * ```\n * collection = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   ...\n * ];\n * \n * utils.aggregate.min(collection, (r) => r.precip);\n * // provides 0.87\n * ```\n * \n * This is the same as:\n * \n * ```\n * collection.map(r => r precip)\n *    .sort(utils.array.SORT_ASCENDING)[0]\n * ```\n * \n * ## Working with Object Properties\n * \n * If we have a specific property (or key) in our 2d collection,\n * then we can just pass that instead.\n * \n * ```\n * collection = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   ...\n * ];\n * \n * utils.aggregate.min(collection, 'precip');\n * // provides 0.87\n * ```\n * \n * This is the same as:\n * \n * ```\n * collection.map(r => r precip)\n *    .sort(utils.array.SORT_ASCENDING)[0]\n * ```\n * \n * @namespace aggregate\n * @module aggregate\n * @exports aggregate\n */",
    "meta": {
      "filename": "aggregate.js",
      "lineno": 9,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utilities that provide a reduced value from a collection.\n\n(Note that this can also map the collection down first)\n\nThis can be very helpful with {@link SourceMap#reduce|SourceMap.reduce()}\nor {@link module:group.by|group.by()} in aggregating a series.\n\nTypes of methods:\n\n* Select a single property\n  * {@link module:aggregate.property|property()} - maps to a single property (often used with other libraries)\n* Ranges of values\n  * {@link module:aggregate.extent|extent()} - returns the min and max of range\n  * {@link module:aggregate.min|min()} - returns the minimum value of the range\n  * {@link module:aggregate.max|max()} - returns the maximum value of the range\n  * {@link module:aggregate.difference|difference()} - returns the difference between max and min values\n* Average values\n  * {@link module:aggregate.avgMedian|avgMedian()} - finds the median (halfway number in a sorted series)\n  * {@link module:aggregate.avgMean|avgMean()} - Finds the mean value (sum of all values / # of values)\n* Unique / Duplicate values\n  * {@link module:aggregate.duplicates|duplicates()} - returns values found more than once\n  * {@link module:aggregate.count|count()} - returns count of values in ways easily convertable to string\n  * {@link module:aggregate.countMap|countMap()} - return count of values in a map\n  * {@link module:aggregate.unique|unique()} - returns values found only once\n  * {@link module:aggregate.distinct|distinct()} - returns the number of unique values found (unique.length)\n  * {@link module:aggregate.notIn|notIn()} - returns which values are not in a superset\n  * {@link module:aggregate.isUnique|isUnique()} - returns whether the values in the list are unique\n* Meta / Coalesce\n  * {@link module:aggregate.length|length()} - Number of records found in the collection\n  * {@link module:aggregate.first|first()} - returns first non-null/undefined in list\n  * {@link module:aggregate.sum|sum()} - sum of a collection\n* Functional\n  * {@link module:aggregate.deferCollection|deferCollection(function, bindArg, bindArg, ...)} - bind a function with arguments\n* Percentile\n  * {@link module:aggregate.percentile|percentile()} - determines the Nth percentile of a field or value\n  * {@link module:aggregate.percentile_01|percentile_01()} - 1th percentile\n  * {@link module:aggregate.percentile_05|percentile_05()} - 5th percentile\n  * {@link module:aggregate.percentile_10|percentile_10()} - 10th percentile\n  * {@link module:aggregate.percentile_25|percentile_25()} - 25th percentile\n  * {@link module:aggregate.percentile_50|percentile_50()} - 50th percentile\n  * {@link module:aggregate.percentile_75|percentile_75()} - 75th percentile\n  * {@link module:aggregate.percentile_90|percentile_90()} - 90th percentile\n  * {@link module:aggregate.percentile_95|percentile_95()} - 95th percentile\n  * {@link module:aggregate.percentile_99|percentile_99()} - 99th percentile\n* Top Values\n  * {@link module:aggregate.topValues|topValues} - top (or bottom) values from a list of objects or literals\n\nPlease note, there is nothing special for these functions, such as working with {@link SourceMap#reduce|SourceMap.reduce()}\n\nThey simply accept a collection and provide a result,\noften using the {@link module:aggregate.evaluateFunctionOrProperty|aggregate.evaluateFunctionOrProperty()}\nwith the second argument.\n\n## Overall Example\n\nAssume we have two tyeps of values:\n\n```\ncollection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\n```\n\n```\n// collection.map(r => r.precip);\nseries = [0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56, 3.98];\n```\n\n## Working with Groups\n\nThe expected way this will be used most is with the {@link module:group|group.by(collection, field, ...)} call.\n\n(See also {@link https://observablehq.com/@d3/d3-group|d3-group functionality})\n\n```\nutils.group.by(collection, 'city')\n  .reduce((collection) => ({\n    monthsReporting: utils.aggregate.unique(collection, 'month'),\n    avgPrecipitation: utils.aggregate.sum(collection, 'precip'),\n    numReports: utils.aggregate.length(collection),\n    minPrecip: utils.aggregate.min(collection, 'precip'),\n    maxPrecip: utils.aggregate.min(collection, 'precip'),\n    variancePrecip: utils.aggregate.difference(collection, 'precip'),\n  }))\n\nproviding\n[\n  {\n    city: 'Seattle',\n    monthsReporting: [ 'Aug', 'Apr', 'Dec' ],\n    avgPrecipitation: 8.86,\n    numReports: 3,\n    minPrecip: 0.87,\n    maxPrecip: 0.87,\n    variancePrecip: 4.43999\n  },\n  {\n    city: 'New York',\n    monthsReporting: [ 'Apr', 'Aug', 'Dec' ],\n    avgPrecipitation: 11.65,\n    numReports: 3,\n    minPrecip: 3.58,\n    maxPrecip: 3.58,\n    variancePrecip: 0.54999\n  },\n  ...\n]\n```\n\n## Using in Tables\n\n({@link TableGenerator|see TableGenerator})\n\n```\nnew utils.TableGenerator()\n    .data(\n      utils.group.by(collection, 'city')\n       .reduce((collection) => ({\n         monthsReporting: utils.aggregate.unique(collection, 'month'),\n         avgPrecipitation: utils.aggregate.sum(collection, 'precip'),\n         numReports: utils.aggregate.length(collection),\n         minPrecip: utils.aggregate.min(collection, 'precip'),\n         maxPrecip: utils.aggregate.min(collection, 'precip'),\n         variancePrecip: utils.aggregate.difference(collection, 'precip'),\n       }))\n    )\n    .labels({ monthsReporting: 'Months',\n             avgPrecipitation: 'Avg. Precip.',\n             numReports: '# Reports'\n    })\n    .render()\n```\n\n![Screenshot](img/PrecipitationAvgTable.png)\n\n## Using in Vega Charts\n\n({@link module:vega|see vega module})\n\n```\nutils.vega.svg((vl) => vl.markLine()\n   .data(\n      utils.group.by(collection, 'city')\n       .reduceSeparate((collection) => ({\n         minPrecip: utils.aggregate.min(collection, 'precip'),\n         maxPrecip: utils.aggregate.max(collection, 'precip'),\n         avgPrecip: utils.aggregate.avgMean(collection, 'precip'),\n       }))\n   )\n   .title('Precipitation by City')\n   .width(400)\n   .encode(\n        vl.x().fieldN('city'),\n        vl.y().fieldQ('_aggregateValue').title('Precipitation'),\n        vl.color().fieldN('_aggregateKey').title('Calculation')\n   )\n);\n```\n\n![Screenshot](img/PrecipitationAvgChart.png)\n\n## Working with Simple Arrays\n\nSimple arrays do not need a mapping function or property,\nwe can simply pass null (or no second argument at all).\n\n```\nseries = [0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56, 3.98];\nutils.aggregate.min(series, null);\n// provides 0.87\n```\n\nThis is the same as `series.sort(utils.array.SORT_ASCENDING)[0]`\n\n## Working with Mapping Functions\n\nIf we want a specific value, we can pass a mapping function first.\n\n```\ncollection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  ...\n];\n\nutils.aggregate.min(collection, (r) => r.precip);\n// provides 0.87\n```\n\nThis is the same as:\n\n```\ncollection.map(r => r precip)\n   .sort(utils.array.SORT_ASCENDING)[0]\n```\n\n## Working with Object Properties\n\nIf we have a specific property (or key) in our 2d collection,\nthen we can just pass that instead.\n\n```\ncollection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  ...\n];\n\nutils.aggregate.min(collection, 'precip');\n// provides 0.87\n```\n\nThis is the same as:\n\n```\ncollection.map(r => r precip)\n   .sort(utils.array.SORT_ASCENDING)[0]\n```",
    "kind": "module",
    "name": "aggregate",
    "alias": "aggregate",
    "longname": "module:aggregate"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8781,
        8800
      ],
      "filename": "aggregate.js",
      "lineno": 241,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000027",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:aggregate",
    "longname": "module:aggregate",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8852,
        8883
      ],
      "filename": "aggregate.js",
      "lineno": 244,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000033",
        "name": "AggregateUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "AggregateUtils",
    "longname": "module:aggregate~AggregateUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:aggregate",
    "params": []
  },
  {
    "comment": "/**\n * Maps an array of values to a single property.\n * \n * For example:\n * \n * ```\n * const data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n *  { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n *  { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n *  { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n *  { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n * ];\n * \n * utils.object.propertyFromList(data, 'val')\n * //-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * \n * utils.object.propertyFromList(data, (r) => r.val);\n * //-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * ```\n * \n * @param {Object[]} objectArray - Array of Objects to be mapped to a single property / value\n * @param {Function | String} propertyOrFn - Name of the property or Function to return a value\n * @returns {Array} - Array of values\n */",
    "meta": {
      "range": [
        9722,
        9870
      ],
      "filename": "aggregate.js",
      "lineno": 270,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000039",
        "name": "module.exports.property",
        "type": "FunctionExpression",
        "value": "propertyFromList",
        "paramnames": [
          "objectArray",
          "propertyOrFn"
        ]
      }
    },
    "description": "Maps an array of values to a single property.\n\nFor example:\n\n```\nconst data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n];\n\nutils.object.propertyFromList(data, 'val')\n//-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nutils.object.propertyFromList(data, (r) => r.val);\n//-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "Array of Objects to be mapped to a single property / value",
        "name": "objectArray"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "Name of the property or Function to return a value",
        "name": "propertyOrFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of values"
      }
    ],
    "name": "property",
    "longname": "module:aggregate.property",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Converts an aggregate function to two functions -\n * one that takes all arguments except the collection\n * and one that takes only the collection.\n * \n * For example:\n * \n * ```\n * utils.aggregate.unique(collection, (r) => r.city))\n * //-- all unique city values in the collection\n * // ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n * ```\n * \n * but what if we know we want the city properties,\n * but don't have the collection yet?\n * \n * ```\n * const uniqueCity = utils.aggregate.deferCollection(utils.aggregate.unique, (r) => r.city);\n * ...\n * uniqueCity(collection)\n * //-- all the unique city values in the collection\n * // ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n * ```\n * \n * note that this is also available under an alias `defer`\n * \n * ```\n * const uniqueCity = utils.agg.defer(utils.agg.unique, 'city');\n * ...\n * uniqueCity(collection)\n * //-- all the unique city values in the collection\n * // ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n * ```\n * \n * @param {Function} aggregateFn\n * @param {...any} [rest] - any arguments past the collection argument\n * @returns {Function} - (collection) => aggregateFn.apply(this, [collection, ...rest])\n */",
    "meta": {
      "range": [
        11054,
        11311
      ],
      "filename": "aggregate.js",
      "lineno": 312,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000058",
        "name": "module.exports.deferCollection",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "aggregateFn",
          "rest"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Converts an aggregate function to two functions -\none that takes all arguments except the collection\nand one that takes only the collection.\n\nFor example:\n\n```\nutils.aggregate.unique(collection, (r) => r.city))\n//-- all unique city values in the collection\n// ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n```\n\nbut what if we know we want the city properties,\nbut don't have the collection yet?\n\n```\nconst uniqueCity = utils.aggregate.deferCollection(utils.aggregate.unique, (r) => r.city);\n...\nuniqueCity(collection)\n//-- all the unique city values in the collection\n// ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n```\n\nnote that this is also available under an alias `defer`\n\n```\nconst uniqueCity = utils.agg.defer(utils.agg.unique, 'city');\n...\nuniqueCity(collection)\n//-- all the unique city values in the collection\n// ['Chicago', 'New York', 'Seattle', 'Amsterdam']\n```",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "name": "aggregateFn"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "variable": true,
        "description": "any arguments past the collection argument",
        "name": "rest"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "- (collection) => aggregateFn.apply(this, [collection, ...rest])"
      }
    ],
    "name": "deferCollection",
    "longname": "module:aggregate.deferCollection",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11314,
        11367
      ],
      "filename": "aggregate.js",
      "lineno": 320,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000092",
        "name": "module.exports.defer",
        "type": "MemberExpression",
        "value": "module.exports.deferCollection",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "defer",
    "longname": "module:aggregate.defer",
    "kind": "member",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Identifies the min and max of values of a collection\n * @param {Array} collection - \n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {Object}- structure of ({ min, max })\n * @example \n * utils.aggregate.extent([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // { min: 0.87, max: 5.31 }\n */",
    "meta": {
      "range": [
        11740,
        11922
      ],
      "filename": "aggregate.js",
      "lineno": 331,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000104",
        "name": "module.exports.extent",
        "type": "FunctionExpression",
        "value": "extent",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Identifies the min and max of values of a collection",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- structure of ({ min, max })"
      }
    ],
    "examples": [
      "utils.aggregate.extent([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// { min: 0.87, max: 5.31 }"
    ],
    "name": "extent",
    "longname": "module:aggregate.extent",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11819,
        11864
      ],
      "filename": "aggregate.js",
      "lineno": 333,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000117",
        "name": "min",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "min",
    "longname": "module:aggregate~min",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11870,
        11915
      ],
      "filename": "aggregate.js",
      "lineno": 334,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000124",
        "name": "max",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "max",
    "longname": "module:aggregate~max",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "/**\n * Identifies the smallest value in a collection of values.\n * \n * (Note that this works with anything comparable with <)\n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {any} - smallest value where result < any other value in collection\n * @example \n * utils.aggregate.min([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 0.87\n */",
    "meta": {
      "range": [
        12367,
        12667
      ],
      "filename": "aggregate.js",
      "lineno": 349,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000132",
        "name": "module.exports.min",
        "type": "FunctionExpression",
        "value": "min",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.min~cleanedFunc",
        "": null
      }
    },
    "description": "Identifies the smallest value in a collection of values.\n\n(Note that this works with anything comparable with <)",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- smallest value where result < any other value in collection"
      }
    ],
    "examples": [
      "utils.aggregate.min([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 0.87"
    ],
    "name": "min",
    "longname": "module:aggregate.min",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12433,
        12495
      ],
      "filename": "aggregate.js",
      "lineno": 350,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000144",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.min~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.min",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12554,
        12580
      ],
      "filename": "aggregate.js",
      "lineno": 352,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000161",
        "name": "valEval",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "valEval",
    "longname": "<anonymous>~valEval",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Identifies the largest value in a collection of values.\n * \n * (Note that this works with anything comparable with > )\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {any} - largest value where result > any other value in collection\n * @example \n * utils.aggregate.max([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 5.31\n */",
    "meta": {
      "range": [
        13115,
        13415
      ],
      "filename": "aggregate.js",
      "lineno": 369,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000179",
        "name": "module.exports.max",
        "type": "FunctionExpression",
        "value": "max",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.max~cleanedFunc",
        "": null
      }
    },
    "description": "Identifies the largest value in a collection of values.\n\n(Note that this works with anything comparable with > )",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- largest value where result > any other value in collection"
      }
    ],
    "examples": [
      "utils.aggregate.max([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 5.31"
    ],
    "name": "max",
    "longname": "module:aggregate.max",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13181,
        13243
      ],
      "filename": "aggregate.js",
      "lineno": 370,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000191",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.max~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.max",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13302,
        13328
      ],
      "filename": "aggregate.js",
      "lineno": 372,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000208",
        "name": "valEval",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "valEval",
    "longname": "<anonymous>~valEval",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Sum of the values.\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {any} - largest value where result > any other value in collection\n * @example \n * utils.aggregate.sum([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 26.69\n */",
    "meta": {
      "range": [
        13764,
        13972
      ],
      "filename": "aggregate.js",
      "lineno": 387,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000226",
        "name": "module.exports.sum",
        "type": "FunctionExpression",
        "value": "sum",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.sum~cleanedFunc",
        "": null
      }
    },
    "description": "Sum of the values.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- largest value where result > any other value in collection"
      }
    ],
    "examples": [
      "utils.aggregate.sum([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 26.69"
    ],
    "name": "sum",
    "longname": "module:aggregate.sum",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13830,
        13892
      ],
      "filename": "aggregate.js",
      "lineno": 388,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000238",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.sum~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.sum",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * The difference between the lowest and the highest values in the collection\n * \n * @param {Array} collection \n * @param {*} accessor \n * @returns {Number} -\n * @example\n * utils.aggregate.difference([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 4.44  (max: 5.31 - min: 0.87 = 4.4)\n */",
    "meta": {
      "range": [
        14277,
        14443
      ],
      "filename": "aggregate.js",
      "lineno": 402,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000260",
        "name": "module.exports.difference",
        "type": "FunctionExpression",
        "value": "difference",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "range": "module:aggregate.difference~range"
      }
    },
    "description": "The difference between the lowest and the highest values in the collection",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-"
      }
    ],
    "examples": [
      "utils.aggregate.difference([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 4.44  (max: 5.31 - min: 0.87 = 4.4)"
    ],
    "name": "difference",
    "longname": "module:aggregate.difference",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14357,
        14408
      ],
      "filename": "aggregate.js",
      "lineno": 403,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000272",
        "name": "range",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "range",
    "longname": "module:aggregate.difference~range",
    "kind": "constant",
    "memberof": "module:aggregate.difference",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Finds the mean value (sum of all values / # of values)\n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {Number} - mean average\n * @example \n * utils.aggregate.avgMean([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 3.41\n */",
    "meta": {
      "range": [
        14784,
        15024
      ],
      "filename": "aggregate.js",
      "lineno": 416,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000289",
        "name": "module.exports.avgMean",
        "type": "FunctionExpression",
        "value": "avgMean",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.avgMean~cleanedFunc",
        "": null
      }
    },
    "description": "Finds the mean value (sum of all values / # of values)",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- mean average"
      }
    ],
    "examples": [
      "utils.aggregate.avgMean([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 3.41"
    ],
    "name": "avgMean",
    "longname": "module:aggregate.avgMean",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14858,
        14920
      ],
      "filename": "aggregate.js",
      "lineno": 417,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000301",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.avgMean~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.avgMean",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Finds the median (halfway number in a sorted series)\n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {Number} - median number from the series\n * @example\n * utils.aggregate.avgMedian([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // [0.87,2.56,2.68,3.58,3.62,3.94,3.98,4.13,5.31]\n * //                      3.62\n */",
    "meta": {
      "range": [
        15455,
        15829
      ],
      "filename": "aggregate.js",
      "lineno": 432,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000327",
        "name": "module.exports.avgMedian",
        "type": "FunctionExpression",
        "value": "avgMedian",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.avgMedian~cleanedFunc",
        "results": "module:aggregate.avgMedian~results",
        "": null,
        "middle": "module:aggregate.avgMedian~middle"
      }
    },
    "description": "Finds the median (halfway number in a sorted series)",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- median number from the series"
      }
    ],
    "examples": [
      "utils.aggregate.avgMedian([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// [0.87,2.56,2.68,3.58,3.62,3.94,3.98,4.13,5.31]\n//                      3.62"
    ],
    "name": "avgMedian",
    "longname": "module:aggregate.avgMedian",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15533,
        15595
      ],
      "filename": "aggregate.js",
      "lineno": 433,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000339",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.avgMedian~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.avgMedian",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15605,
        15664
      ],
      "filename": "aggregate.js",
      "lineno": 434,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000347",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:aggregate.avgMedian~results",
    "kind": "constant",
    "memberof": "module:aggregate.avgMedian",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15674,
        15716
      ],
      "filename": "aggregate.js",
      "lineno": 435,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000364",
        "name": "middle",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "middle",
    "longname": "module:aggregate.avgMedian~middle",
    "kind": "constant",
    "memberof": "module:aggregate.avgMedian",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Finds the first value in a list.\n * \n * `NOTE: this short circuits and can be helpful if the values are all identical`\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @returns {any} - the first non undefined || null value found\n * @example\n * utils.aggregate.first([null, undefined, 0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 0.87\n */",
    "meta": {
      "range": [
        16280,
        16625
      ],
      "filename": "aggregate.js",
      "lineno": 453,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000399",
        "name": "module.exports.first",
        "type": "FunctionExpression",
        "value": "first",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.first~cleanedFunc",
        "result": "module:aggregate~result",
        "i": "module:aggregate~i"
      }
    },
    "description": "Finds the first value in a list.\n\n`NOTE: this short circuits and can be helpful if the values are all identical`",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- the first non undefined || null value found"
      }
    ],
    "examples": [
      "utils.aggregate.first([null, undefined, 0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 0.87"
    ],
    "name": "first",
    "longname": "module:aggregate.first",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16350,
        16412
      ],
      "filename": "aggregate.js",
      "lineno": 454,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000411",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.first~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.first",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16420,
        16433
      ],
      "filename": "aggregate.js",
      "lineno": 455,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000419",
        "name": "result",
        "type": "Literal",
        "value": null
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:aggregate.first~result",
    "kind": "member",
    "memberof": "module:aggregate.first",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16446,
        16451
      ],
      "filename": "aggregate.js",
      "lineno": 456,
      "columnno": 11,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000424",
        "name": "i",
        "type": "Literal",
        "value": 0
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "module:aggregate.first~i",
    "kind": "member",
    "memberof": "module:aggregate.first",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16476,
        16482
      ],
      "filename": "aggregate.js",
      "lineno": 456,
      "columnno": 41,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000432",
        "name": "i",
        "type": "Literal",
        "funcscope": "module:aggregate.first",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "module:aggregate~i",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16490,
        16525
      ],
      "filename": "aggregate.js",
      "lineno": 457,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000437",
        "name": "result",
        "type": "CallExpression",
        "funcscope": "module:aggregate.first",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:aggregate~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "/**\n * Number of records found in the collection\n * @param {Array} collection -\n * @returns {Number}\n * @example\n * utils.aggregate.count([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n * // 8\n */",
    "meta": {
      "range": [
        16829,
        16912
      ],
      "filename": "aggregate.js",
      "lineno": 473,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000458",
        "name": "module.exports.length",
        "type": "FunctionExpression",
        "value": "length",
        "paramnames": [
          "collection"
        ]
      }
    },
    "description": "Number of records found in the collection",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.aggregate.count([0.87, 2.68, 5.31, 3.94, 4.13, 3.58, 3.62, 2.56]);\n// 8"
    ],
    "name": "length",
    "longname": "module:aggregate.length",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Identifies the unique values from the collection.\n * \n * Note that this includes an additional bucketing function - useful for objects.\n * (As String('A') !== String('A)' - because\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\n * because checking equality of Objects is only true if the operands reference the same Object.})\n * \n * See {@link module:aggregate.count} for more\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @param {Function} [uniquifierFn] - optional function to make values unique\n * @returns {Array} - unique values\n * @example\n * utils.aggregate.unique(['apple', 'orange', 'apple', 'banana']);\n * // [ 'apple', 'orange', 'banana' ]\n */",
    "meta": {
      "range": [
        17712,
        18054
      ],
      "filename": "aggregate.js",
      "lineno": 495,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000473",
        "name": "module.exports.unique",
        "type": "FunctionExpression",
        "value": "unique",
        "paramnames": [
          "collection",
          "accessor",
          "uniquifierFn"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.unique~cleanedFunc",
        "": null
      }
    },
    "description": "Identifies the unique values from the collection.\n\nNote that this includes an additional bucketing function - useful for objects.\n(As String('A') !== String('A)' - because\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\nbecause checking equality of Objects is only true if the operands reference the same Object.})\n\nSee {@link module:aggregate.count} for more",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "optional function to make values unique",
        "name": "uniquifierFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- unique values"
      }
    ],
    "examples": [
      "utils.aggregate.unique(['apple', 'orange', 'apple', 'banana']);\n// [ 'apple', 'orange', 'banana' ]"
    ],
    "name": "unique",
    "longname": "module:aggregate.unique",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17798,
        17860
      ],
      "filename": "aggregate.js",
      "lineno": 496,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000486",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.unique~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.unique",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Counts the unique values.\n * \n * Note that this includes an additional bucketing function - useful for objects.\n * (As String('A') !== String('A)' - because\n * \n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\n * because checking equality of Objects is only true if the operands reference the same Object.})\n * \n * See {@link module:aggregate.count} for more\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @param {Function} [uniquifierFn] - optional function to make values unique\n * @returns {Number} - unique values\n * @example\n * utils.aggregate.unique(['apple', 'orange', 'apple', 'banana']);\n * // 3 - e.g [ 'apple', 'orange', 'banana' ].length\n */",
    "meta": {
      "range": [
        18850,
        19008
      ],
      "filename": "aggregate.js",
      "lineno": 527,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000527",
        "name": "module.exports.distinct",
        "type": "FunctionExpression",
        "value": "distinct",
        "paramnames": [
          "collection",
          "accessor",
          "uniquifierFn"
        ]
      }
    },
    "description": "Counts the unique values.\n\nNote that this includes an additional bucketing function - useful for objects.\n(As String('A') !== String('A)' - because\n\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\nbecause checking equality of Objects is only true if the operands reference the same Object.})\n\nSee {@link module:aggregate.count} for more",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "optional function to make values unique",
        "name": "uniquifierFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- unique values"
      }
    ],
    "examples": [
      "utils.aggregate.unique(['apple', 'orange', 'apple', 'banana']);\n// 3 - e.g [ 'apple', 'orange', 'banana' ].length"
    ],
    "name": "distinct",
    "longname": "module:aggregate.distinct",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Identifies how frequently something has occurred as a value.\n * \n * Note that this also includes a function to make the value unique,\n * so Objects can be compared,\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\n * because checking equality of Objects is only true if the operands reference the same Object.})\n * \n * See {@link module:aggregate.count} for more\n * \n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @param {Function} [uniquifierFn] - optional function to make values unique\n * @returns {Map} - unique values -> count of how often it was identified\n * @see .count - for an object that convert to string easier\n * @example\n * const source = [\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n * ];\n * utils.aggregate.count(source, 'city');\n * // Map([['Chicago', 2], ['Seattle', 2], ['New York', 1], ['Amsterdam'], 1])\n * utils.aggregate.countMap(source, 'city').get('Chicago')\n * // 2\n */",
    "meta": {
      "range": [
        20138,
        20656
      ],
      "filename": "aggregate.js",
      "lineno": 556,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000550",
        "name": "module.exports.countMap",
        "type": "FunctionExpression",
        "value": "countMap",
        "paramnames": [
          "collection",
          "accessor",
          "uniquifierFn"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.countMap~cleanedFunc",
        "resultMap": "module:aggregate.countMap~resultMap",
        "": null
      }
    },
    "description": "Identifies how frequently something has occurred as a value.\n\nNote that this also includes a function to make the value unique,\nso Objects can be compared,\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\nbecause checking equality of Objects is only true if the operands reference the same Object.})\n\nSee {@link module:aggregate.count} for more",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "optional function to make values unique",
        "name": "uniquifierFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "description": "- unique values -> count of how often it was identified"
      }
    ],
    "see": [
      ".count - for an object that convert to string easier"
    ],
    "examples": [
      "const source = [\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n];\nutils.aggregate.count(source, 'city');\n// Map([['Chicago', 2], ['Seattle', 2], ['New York', 1], ['Amsterdam'], 1])\nutils.aggregate.countMap(source, 'city').get('Chicago')\n// 2"
    ],
    "name": "countMap",
    "longname": "module:aggregate.countMap",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20228,
        20290
      ],
      "filename": "aggregate.js",
      "lineno": 557,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000563",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.countMap~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.countMap",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20300,
        20321
      ],
      "filename": "aggregate.js",
      "lineno": 558,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000571",
        "name": "resultMap",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resultMap",
    "longname": "module:aggregate.countMap~resultMap",
    "kind": "constant",
    "memberof": "module:aggregate.countMap",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20363,
        20388
      ],
      "filename": "aggregate.js",
      "lineno": 560,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000584",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20412,
        20441
      ],
      "filename": "aggregate.js",
      "lineno": 561,
      "columnno": 22,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000592",
        "name": "result",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:aggregate~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20473,
        20486
      ],
      "filename": "aggregate.js",
      "lineno": 562,
      "columnno": 30,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000602",
        "name": "result",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:aggregate~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "/**\n * Identifies how frequently something has occurred as a value.\n * \n * Note that this also includes a function to make the value unique,\n * so Objects can be compared,\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\n * because checking equality of Objects is only true if the operands reference the same Object.})\n * \n * See {@link module:aggregate.unique} for more\n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @param {Function} [uniquifierFn] - optional function to make values unique\n * @returns {Object} - with unique values as props, and counts as values\n * @see .countMap - for a map of results that are not converted to string\n * @example\n * const source = [\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n * ];\n * utils.aggregate.count(source, 'city');\n * // { Chicago: 2, Seattle: 2, 'New York': 1, Amsterdam: 1 };\n * utils.aggregate.count(source, 'city').Chicago\n * // 2\n * \n * series = [\n *   { station: 'A', timestamp: new Date(2022, 0, 1, 9) },\n *   { station: 'B', timestamp: new Date(2022, 0, 1, 9, 30) },\n *   { station: 'A', timestamp: new Date(2022, 0, 1, 10, 0) },\n *   { station: 'B', timestamp: new Date(2022, 0, 2, 9) },\n *   { station: 'A', timestamp: new Date(2022, 0, 2, 9, 30) },\n *   { station: 'B', timestamp: new Date(2022, 0, 2, 10, 0) },\n *   { station: 'A', timestamp: new Date(2022, 0, 3, 10, 0) },\n *   { station: 'B', timestamp: new Date(2022, 0, 3, 10, 0 }\n * ]\n * utils.aggregate.count(series, 'timestamp', (d) => d.toISOString().slice(0, 10))\n * // { '2022-01-01': 3, '2022-01-02': 2, '2022-01-03': 2 }\n */",
    "meta": {
      "range": [
        22429,
        22756
      ],
      "filename": "aggregate.js",
      "lineno": 609,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000637",
        "name": "module.exports.count",
        "type": "FunctionExpression",
        "value": "distribution",
        "paramnames": [
          "collection",
          "accessor",
          "uniquifierFn"
        ]
      },
      "vars": {
        "countResults": "module:aggregate.count~countResults",
        "entries": "module:aggregate.count~entries",
        "": null
      }
    },
    "description": "Identifies how frequently something has occurred as a value.\n\nNote that this also includes a function to make the value unique,\nso Objects can be compared,\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\nbecause checking equality of Objects is only true if the operands reference the same Object.})\n\nSee {@link module:aggregate.unique} for more",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "optional function to make values unique",
        "name": "uniquifierFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- with unique values as props, and counts as values"
      }
    ],
    "see": [
      ".countMap - for a map of results that are not converted to string"
    ],
    "examples": [
      "const source = [\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n];\nutils.aggregate.count(source, 'city');\n// { Chicago: 2, Seattle: 2, 'New York': 1, Amsterdam: 1 };\nutils.aggregate.count(source, 'city').Chicago\n// 2\n\nseries = [\n  { station: 'A', timestamp: new Date(2022, 0, 1, 9) },\n  { station: 'B', timestamp: new Date(2022, 0, 1, 9, 30) },\n  { station: 'A', timestamp: new Date(2022, 0, 1, 10, 0) },\n  { station: 'B', timestamp: new Date(2022, 0, 2, 9) },\n  { station: 'A', timestamp: new Date(2022, 0, 2, 9, 30) },\n  { station: 'B', timestamp: new Date(2022, 0, 2, 10, 0) },\n  { station: 'A', timestamp: new Date(2022, 0, 3, 10, 0) },\n  { station: 'B', timestamp: new Date(2022, 0, 3, 10, 0 }\n]\nutils.aggregate.count(series, 'timestamp', (d) => d.toISOString().slice(0, 10))\n// { '2022-01-01': 3, '2022-01-02': 2, '2022-01-03': 2 }"
    ],
    "name": "count",
    "longname": "module:aggregate.count",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22520,
        22594
      ],
      "filename": "aggregate.js",
      "lineno": 610,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000650",
        "name": "countResults",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "countResults",
    "longname": "module:aggregate.count~countResults",
    "kind": "constant",
    "memberof": "module:aggregate.count",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22604,
        22715
      ],
      "filename": "aggregate.js",
      "lineno": 611,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000660",
        "name": "entries",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "entries",
    "longname": "module:aggregate.count~entries",
    "kind": "constant",
    "memberof": "module:aggregate.count",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Determines the values that were duplicated\n * \n * Note that this also includes a function to make the value unique,\n * so even Dates, Objects, etc can be compared,\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\n * because checking equality of Objects is only true if the operands reference the same Object.})\n * \n * See {@link module:aggregate.count} for more\n * @param {Array} collection -\n * @param {Function|String} accessor - function to identify the property, string property name or null\n * @param {Function} [uniquifierFn] - optional function to make values unique\n * @returns {Array} - array of the duplicate values\n * @see {@link module:aggregate.count} for the number of times they were duplicated\n * @example\n * const source = [\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n *   { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n * ];\n * utils.aggregate.duplicates(source, 'city');\n * // ['Chicago', 'Seattle']\n */",
    "meta": {
      "range": [
        23770,
        24117
      ],
      "filename": "aggregate.js",
      "lineno": 638,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000689",
        "name": "module.exports.duplicates",
        "type": "FunctionExpression",
        "value": "duplicates",
        "paramnames": [
          "collection",
          "accessor",
          "uniquifierFn"
        ]
      },
      "vars": {
        "countResults": "module:aggregate.duplicates~countResults",
        "results": "module:aggregate.duplicates~results",
        "": null
      }
    },
    "description": "Determines the values that were duplicated\n\nNote that this also includes a function to make the value unique,\nso even Dates, Objects, etc can be compared,\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators|\nbecause checking equality of Objects is only true if the operands reference the same Object.})\n\nSee {@link module:aggregate.count} for more",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the property, string property name or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "optional function to make values unique",
        "name": "uniquifierFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- array of the duplicate values"
      }
    ],
    "see": [
      "{@link module:aggregate.count} for the number of times they were duplicated"
    ],
    "examples": [
      "const source = [\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'New York' },\n  { city: 'Chicago' }, { city: 'Seattle' }, { city: 'AmsterDam' }\n];\nutils.aggregate.duplicates(source, 'city');\n// ['Chicago', 'Seattle']"
    ],
    "name": "duplicates",
    "longname": "module:aggregate.duplicates",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23864,
        23938
      ],
      "filename": "aggregate.js",
      "lineno": 639,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000702",
        "name": "countResults",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "countResults",
    "longname": "module:aggregate.duplicates~countResults",
    "kind": "constant",
    "memberof": "module:aggregate.duplicates",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23948,
        23960
      ],
      "filename": "aggregate.js",
      "lineno": 640,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000712",
        "name": "results",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:aggregate.duplicates~results",
    "kind": "constant",
    "memberof": "module:aggregate.duplicates",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Determines the values in collection that are not in he possibleSuperSet.\n * \n * This can be helpful in validating a superSet does indeed include all the values.\n * \n * @param {Array} collection - \n * @param {Function | String} accessor - function to identify the value or string property name or null if array of values\n * @param {Iteratable} possibleSuperSet - Array or Set that we want to identify which values are not in\n * @returns {Set} - set of values from collection not in the possibleSuperSet\n * \n * @example\n * const superSet = new Set(['a', 'b', 'c']);\n * const data = [{ val: 'a' }, { val: 'b' }, { val: 'c' }, { val: 'd' }];\n * \n * aggregate.notIn(data, 'val', superSet);\n * // Set('d')\n */",
    "meta": {
      "range": [
        24831,
        25237
      ],
      "filename": "aggregate.js",
      "lineno": 667,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000744",
        "name": "module.exports.notIn",
        "type": "FunctionExpression",
        "value": "notIn",
        "paramnames": [
          "collection",
          "accessor",
          "targetIterator"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.notIn~cleanedFunc",
        "targetSet": "module:aggregate.notIn~targetSet",
        "results": "module:aggregate.notIn~results",
        "": null
      }
    },
    "description": "Determines the values in collection that are not in he possibleSuperSet.\n\nThis can be helpful in validating a superSet does indeed include all the values.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to identify the value or string property name or null if array of values",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "Iteratable"
          ]
        },
        "description": "Array or Set that we want to identify which values are not in",
        "name": "possibleSuperSet"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Set"
          ]
        },
        "description": "- set of values from collection not in the possibleSuperSet"
      }
    ],
    "examples": [
      "const superSet = new Set(['a', 'b', 'c']);\nconst data = [{ val: 'a' }, { val: 'b' }, { val: 'c' }, { val: 'd' }];\n\naggregate.notIn(data, 'val', superSet);\n// Set('d')"
    ],
    "name": "notIn",
    "longname": "module:aggregate.notIn",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24917,
        24979
      ],
      "filename": "aggregate.js",
      "lineno": 668,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000757",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.notIn~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.notIn",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24989,
        25024
      ],
      "filename": "aggregate.js",
      "lineno": 669,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000765",
        "name": "targetSet",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetSet",
    "longname": "module:aggregate.notIn~targetSet",
    "kind": "constant",
    "memberof": "module:aggregate.notIn",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25034,
        25053
      ],
      "filename": "aggregate.js",
      "lineno": 670,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000771",
        "name": "results",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:aggregate.notIn~results",
    "kind": "constant",
    "memberof": "module:aggregate.notIn",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25100,
        25133
      ],
      "filename": "aggregate.js",
      "lineno": 672,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000784",
        "name": "recordValue",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "recordValue",
    "longname": "<anonymous>~recordValue",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Determines whether the values in the collection are unique.\n * \n * @param {Array} collection -\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Boolean} - whether the values in the array are truly unique\n * @example\n * let data = [{ val: 1 }, { val: 2 }, { val: 3 }, { val: 1 }];\n * aggregate.isUnique(data, 'val'); // false\n * \n * let data = [{ val: 1 }, { val: 2 }, { val: 3 }];\n * aggregate.isUnique(data, 'val'); // true\n * \n * data = ['a', 'b', 'c', 'd'];\n * aggregate.isUnique(data); // true\n */",
    "meta": {
      "range": [
        25808,
        26315
      ],
      "filename": "aggregate.js",
      "lineno": 696,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000806",
        "name": "module.exports.isUnique",
        "type": "FunctionExpression",
        "value": "isUnique",
        "paramnames": [
          "collection",
          "accessor"
        ]
      },
      "vars": {
        "cleanedFunc": "module:aggregate.isUnique~cleanedFunc",
        "uniqueValues": "module:aggregate.isUnique~uniqueValues",
        "duplicateValue": "module:aggregate.isUnique~duplicateValue",
        "": null
      }
    },
    "description": "Determines whether the values in the collection are unique.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "- whether the values in the array are truly unique"
      }
    ],
    "examples": [
      "let data = [{ val: 1 }, { val: 2 }, { val: 3 }, { val: 1 }];\naggregate.isUnique(data, 'val'); // false\n\nlet data = [{ val: 1 }, { val: 2 }, { val: 3 }];\naggregate.isUnique(data, 'val'); // true\n\ndata = ['a', 'b', 'c', 'd'];\naggregate.isUnique(data); // true"
    ],
    "name": "isUnique",
    "longname": "module:aggregate.isUnique",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25884,
        25946
      ],
      "filename": "aggregate.js",
      "lineno": 697,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000818",
        "name": "cleanedFunc",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFunc",
    "longname": "module:aggregate.isUnique~cleanedFunc",
    "kind": "constant",
    "memberof": "module:aggregate.isUnique",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25956,
        25980
      ],
      "filename": "aggregate.js",
      "lineno": 698,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000826",
        "name": "uniqueValues",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "uniqueValues",
    "longname": "module:aggregate.isUnique~uniqueValues",
    "kind": "constant",
    "memberof": "module:aggregate.isUnique",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25990,
        26273
      ],
      "filename": "aggregate.js",
      "lineno": 699,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000831",
        "name": "duplicateValue",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "duplicateValue",
    "longname": "module:aggregate.isUnique~duplicateValue",
    "kind": "constant",
    "memberof": "module:aggregate.isUnique",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26047,
        26075
      ],
      "filename": "aggregate.js",
      "lineno": 700,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000841",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Returns a given percentile from a list of objects.\n * \n * **Note: this simply aggregates the values and passes to the [Percentile NPM Package](https://www.npmjs.com/package/percentile)**\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @param {Number} pct - Percentile (either .5 or 50)\n * @returns {Number} - the pct percentile of a property within the collection\n * @example\n * const data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n *  { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n *  { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n *  { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n *  { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n * ];\n * \n * utils.aggregate.percentile(data, 'val', 50) //-- returns 5\n * utils.aggregate.percentile(data, (r) => r.val, 70) //-- returns 7\n */",
    "meta": {
      "range": [
        27269,
        27534
      ],
      "filename": "aggregate.js",
      "lineno": 732,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000878",
        "name": "module.exports.percentile",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor",
          "pct"
        ]
      },
      "vars": {
        "values": "module:aggregate.percentile~values",
        "cleanPercentile": "module:aggregate.percentile~cleanPercentile"
      }
    },
    "description": "Returns a given percentile from a list of objects.\n\n**Note: this simply aggregates the values and passes to the [Percentile NPM Package](https://www.npmjs.com/package/percentile)**",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Percentile (either .5 or 50)",
        "name": "pct"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the pct percentile of a property within the collection"
      }
    ],
    "examples": [
      "const data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n];\n\nutils.aggregate.percentile(data, 'val', 50) //-- returns 5\nutils.aggregate.percentile(data, (r) => r.val, 70) //-- returns 7"
    ],
    "name": "percentile",
    "longname": "module:aggregate.percentile",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27354,
        27413
      ],
      "filename": "aggregate.js",
      "lineno": 733,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000891",
        "name": "values",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "values",
    "longname": "module:aggregate.percentile~values",
    "kind": "constant",
    "memberof": "module:aggregate.percentile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27423,
        27485
      ],
      "filename": "aggregate.js",
      "lineno": 734,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000900",
        "name": "cleanPercentile",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanPercentile",
    "longname": "module:aggregate.percentile~cleanPercentile",
    "kind": "constant",
    "memberof": "module:aggregate.percentile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        27981,
        28118
      ],
      "filename": "aggregate.js",
      "lineno": 750,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000920",
        "name": "module.exports.percentile_01",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_01",
    "longname": "module:aggregate.percentile_01",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        28565,
        28702
      ],
      "filename": "aggregate.js",
      "lineno": 764,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000940",
        "name": "module.exports.percentile_05",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_05",
    "longname": "module:aggregate.percentile_05",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        29149,
        29287
      ],
      "filename": "aggregate.js",
      "lineno": 778,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000960",
        "name": "module.exports.percentile_10",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_10",
    "longname": "module:aggregate.percentile_10",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        29734,
        29872
      ],
      "filename": "aggregate.js",
      "lineno": 792,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100000980",
        "name": "module.exports.percentile_25",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_25",
    "longname": "module:aggregate.percentile_25",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        30319,
        30457
      ],
      "filename": "aggregate.js",
      "lineno": 806,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001000",
        "name": "module.exports.percentile_50",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_50",
    "longname": "module:aggregate.percentile_50",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        30904,
        31042
      ],
      "filename": "aggregate.js",
      "lineno": 820,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001020",
        "name": "module.exports.percentile_75",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_75",
    "longname": "module:aggregate.percentile_75",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        31489,
        31627
      ],
      "filename": "aggregate.js",
      "lineno": 834,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001040",
        "name": "module.exports.percentile_90",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_90",
    "longname": "module:aggregate.percentile_90",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        32074,
        32212
      ],
      "filename": "aggregate.js",
      "lineno": 848,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001060",
        "name": "module.exports.percentile_95",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_95",
    "longname": "module:aggregate.percentile_95",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns a hard coded percentage\n * \n * {@link module:aggregate.percentage|See Percentage for more detail}\n * \n * @param {Object[]} collection - collection of objects\n * @param {Function | String} accessor - function to access the value, string property or null\n * @returns {Number} - the percentile of a property within the collection\n * @see {@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage\n */",
    "meta": {
      "range": [
        32659,
        32797
      ],
      "filename": "aggregate.js",
      "lineno": 862,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001080",
        "name": "module.exports.percentile_99",
        "type": "FunctionExpression",
        "value": "percentile",
        "paramnames": [
          "collection",
          "accessor"
        ]
      }
    },
    "description": "Returns a hard coded percentage\n\n{@link module:aggregate.percentage|See Percentage for more detail}",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "function to access the value, string property or null",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- the percentile of a property within the collection"
      }
    ],
    "see": [
      "{@link module:aggregate.percentile|percentile} - as this simply hard codes the percentage"
    ],
    "name": "percentile_99",
    "longname": "module:aggregate.percentile_99",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "/**\n * Returns the Top N values from within a collection.\n * \n * For example, if we have a list of weather records,\n * we can get the month with the greatest rain.\n * \n * **Note: this can also return the Bottom N values, if sorting in ascending order.\n * ({@link module:array.createSort|see array.createSort() for more.})**\n * \n * ```\n * collection = [\n *   { id: 0, month: '2021-Sep', precip: 2.68 },\n *   { id: 1, month: '2021-Aug', precip: 0.87 },\n *   { id: 2, month: '2021-Oct', precip: 5.31 },\n *   { id: 3, month: '2021-Nov', precip: 3.94 },\n *   { id: 4, month: '2021-Dec', precip: 4.13 },\n *   { id: 5, month: '2022-Jan', precip: 3.58 },\n *   { id: 6, month: '2022-Feb', precip: 3.62 },\n *   { id: 7, month: '2022-Mar', precip: 3.98 },\n *   { id: 8, month: '2022-Apr', precip: 2.56 }\n * ];\n * \n * //-- We can get the top 3 months with the highest rainfall\n * utils.aggregate.topValues(collection, 3, 'month', '-precip');\n * // '2021-Oct', '2021-Dec', '2022-Mar'\n * \n * //-- Or the 3 most recent precipitation values:\n * utils.aggregate.topValues(collection, 3, 'precip', '-id');\n * // 2.56, 3.98, 3.62\n * \n * //-- Lowest Rainfall is simply sorting in ascending order\n * utils.aggregate.topValues(collection, 5, 'month', 'precip');\n * // 0.87, 2.56, 2.68, 3.58, 3.62\n * \n * //-- you can also combine values to make the values clearer, by passing a function\n * const monthPrecip = function (record) => `${record.month} (${record.precip})`;\n * utils.aggregate.topValues(collection, 3, monthPrecip, '-precip');\n * // '2021-Oct (5.31)', '2021-Dec (4.13)', '2022-Mar (3.98)'\n * ```\n * \n * Literal values are also supported\n * \n * ```\n * collection = [ 2.68, 0.87, 5.31, 3.94, 4.13, 3.58, 3.62, 3.98, 2.56 ];\n * \n * //-- top 5 values\n * utils.aggregate.topValues(collection, 5);\n * utils.aggregate.topValues(collection, 5, null, '-')\n * // [5.31, 4.13, 3.98, 3.94, 3.62]\n * \n * //-- bottom 5 values\n * utils.aggregate.topValues(collection, 5, null, '');\n * // \n * ```\n * \n * @param {Array} collection - Collection of values we want to get the top values from\n * @param {Number} [numValues=5] - the number of values to return\n * @param {string | Function} [fieldOrFn = null] - field of the object to use as the value, <br />\n *    Or the Function to generate the value, <br />\n *    Or null if the value is an array of Comparables (like Number)\n * @param  {...String} sortFields - field in the object to sort by,<br />\n *    Prefixed by '-' if it should be sorted in Descending order\n *    (ex: '-Year', 'Manufacturer')\n * @returns {Array} - array of values\n */",
    "meta": {
      "range": [
        35363,
        35841
      ],
      "filename": "aggregate.js",
      "lineno": 931,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001100",
        "name": "module.exports.topValues",
        "type": "FunctionExpression",
        "value": "topValues",
        "paramnames": [
          "collection",
          "numValues",
          "fieldOrFn",
          "sortFields"
        ]
      },
      "vars": {
        "cleanCollection": "module:aggregate~cleanCollection",
        "cleanSortFields": "module:aggregate.topValues~cleanSortFields"
      }
    },
    "description": "Returns the Top N values from within a collection.\n\nFor example, if we have a list of weather records,\nwe can get the month with the greatest rain.\n\n**Note: this can also return the Bottom N values, if sorting in ascending order.\n({@link module:array.createSort|see array.createSort() for more.})**\n\n```\ncollection = [\n  { id: 0, month: '2021-Sep', precip: 2.68 },\n  { id: 1, month: '2021-Aug', precip: 0.87 },\n  { id: 2, month: '2021-Oct', precip: 5.31 },\n  { id: 3, month: '2021-Nov', precip: 3.94 },\n  { id: 4, month: '2021-Dec', precip: 4.13 },\n  { id: 5, month: '2022-Jan', precip: 3.58 },\n  { id: 6, month: '2022-Feb', precip: 3.62 },\n  { id: 7, month: '2022-Mar', precip: 3.98 },\n  { id: 8, month: '2022-Apr', precip: 2.56 }\n];\n\n//-- We can get the top 3 months with the highest rainfall\nutils.aggregate.topValues(collection, 3, 'month', '-precip');\n// '2021-Oct', '2021-Dec', '2022-Mar'\n\n//-- Or the 3 most recent precipitation values:\nutils.aggregate.topValues(collection, 3, 'precip', '-id');\n// 2.56, 3.98, 3.62\n\n//-- Lowest Rainfall is simply sorting in ascending order\nutils.aggregate.topValues(collection, 5, 'month', 'precip');\n// 0.87, 2.56, 2.68, 3.58, 3.62\n\n//-- you can also combine values to make the values clearer, by passing a function\nconst monthPrecip = function (record) => `${record.month} (${record.precip})`;\nutils.aggregate.topValues(collection, 3, monthPrecip, '-precip');\n// '2021-Oct (5.31)', '2021-Dec (4.13)', '2022-Mar (3.98)'\n```\n\nLiteral values are also supported\n\n```\ncollection = [ 2.68, 0.87, 5.31, 3.94, 4.13, 3.58, 3.62, 3.98, 2.56 ];\n\n//-- top 5 values\nutils.aggregate.topValues(collection, 5);\nutils.aggregate.topValues(collection, 5, null, '-')\n// [5.31, 4.13, 3.98, 3.94, 3.62]\n\n//-- bottom 5 values\nutils.aggregate.topValues(collection, 5, null, '');\n// \n```",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Collection of values we want to get the top values from",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 5,
        "description": "the number of values to return",
        "name": "numValues"
      },
      {
        "type": {
          "names": [
            "string",
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "field of the object to use as the value, <br />\n   Or the Function to generate the value, <br />\n   Or null if the value is an array of Comparables (like Number)",
        "name": "fieldOrFn"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "field in the object to sort by,<br />\n   Prefixed by '-' if it should be sorted in Descending order\n   (ex: '-Year', 'Manufacturer')",
        "name": "sortFields"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- array of values"
      }
    ],
    "name": "topValues",
    "longname": "module:aggregate.topValues",
    "kind": "function",
    "memberof": "module:aggregate",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        35470,
        35504
      ],
      "filename": "aggregate.js",
      "lineno": 932,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001117",
        "name": "cleanCollection",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "module:aggregate.topValues~cleanCollection",
    "kind": "member",
    "memberof": "module:aggregate.topValues",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        35579,
        35649
      ],
      "filename": "aggregate.js",
      "lineno": 935,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001123",
        "name": "cleanSortFields",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanSortFields",
    "longname": "module:aggregate.topValues~cleanSortFields",
    "kind": "constant",
    "memberof": "module:aggregate.topValues",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        35654,
        35743
      ],
      "filename": "aggregate.js",
      "lineno": 939,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001135",
        "name": "cleanCollection",
        "type": "CallExpression",
        "funcscope": "module:aggregate.topValues",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "module:aggregate~cleanCollection",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:aggregate"
  },
  {
    "comment": "/**\n * Utility Methods for working with Arrays / Lists\n * \n * similar to {@link module:group}, this is not meant to be exhaustive,\n * only the ones commonly used.\n * \n * * Generate Array\n *   * {@link module:array.size|array.size(size, default)} - generate array of a specific size and CONSISTENT default value\n *   * {@link module:array.arrange|array.arrange(size, start, step)} - generate array of a size, and INCREASING default value\n * * Sorting\n *   * {@link module:array.createSort|array.createSort(sortIndex, sortIndex, ...)} - generates a sorting function\n *   * {@link module:array.SORT_ASCENDING|array.SORT_ASCENDING} - common ascending sorting function for array.sort()\n *   * {@link module:array.SORT_DESCENDING|array.SORT_DESCENDING} - common descending sorting function for array.sort()\n * * Rearrange Array\n *   * {@link module:array.reshape|array.reshape} - reshapes an array to a size of rows and columns\n *   * {@link module:array.transpose|array.transpose} - transposes (flips - the array along the diagonal)\n * * Picking Values\n *   * {@link module:array.peekFirst|array.peekFirst} - peeks at the first value in the list\n *   * {@link module:array.peekLast|array.peekLast} - peeks at the last value in the list\n *   * {@link module:array.pickRows|array.pickRows} - picks a row from a 2d array\n *   * {@link module:array.pickColumns|array.pickColumns} - picks a column from a 2d array\n *   * {@link module:array.pick|array.pick} - picks either/or rows and columns\n * \n * @module array\n * @exports array\n */",
    "meta": {
      "filename": "array.js",
      "lineno": 5,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utility Methods for working with Arrays / Lists\n\nsimilar to {@link module:group}, this is not meant to be exhaustive,\nonly the ones commonly used.\n\n* Generate Array\n  * {@link module:array.size|array.size(size, default)} - generate array of a specific size and CONSISTENT default value\n  * {@link module:array.arrange|array.arrange(size, start, step)} - generate array of a size, and INCREASING default value\n* Sorting\n  * {@link module:array.createSort|array.createSort(sortIndex, sortIndex, ...)} - generates a sorting function\n  * {@link module:array.SORT_ASCENDING|array.SORT_ASCENDING} - common ascending sorting function for array.sort()\n  * {@link module:array.SORT_DESCENDING|array.SORT_DESCENDING} - common descending sorting function for array.sort()\n* Rearrange Array\n  * {@link module:array.reshape|array.reshape} - reshapes an array to a size of rows and columns\n  * {@link module:array.transpose|array.transpose} - transposes (flips - the array along the diagonal)\n* Picking Values\n  * {@link module:array.peekFirst|array.peekFirst} - peeks at the first value in the list\n  * {@link module:array.peekLast|array.peekLast} - peeks at the last value in the list\n  * {@link module:array.pickRows|array.pickRows} - picks a row from a 2d array\n  * {@link module:array.pickColumns|array.pickColumns} - picks a column from a 2d array\n  * {@link module:array.pick|array.pick} - picks either/or rows and columns",
    "kind": "module",
    "name": "array",
    "alias": "array",
    "longname": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1643,
        1662
      ],
      "filename": "array.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001166",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:array",
    "longname": "module:array",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1670,
        1697
      ],
      "filename": "array.js",
      "lineno": 32,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001172",
        "name": "ArrayUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "ArrayUtils",
    "longname": "module:array~ArrayUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:array",
    "params": []
  },
  {
    "comment": "/**\n * Simple ascending sort function\n * @type {Function}\n * @example\n * \n * [3,5,1,2,4].sort(utils.sort.SIMPLE_ASCENDING))\n * //\n * [1,2,3,4,5]\n */",
    "meta": {
      "range": [
        1849,
        1919
      ],
      "filename": "array.js",
      "lineno": 43,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001178",
        "name": "module.exports.SORT_ASCENDING",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "a",
          "b"
        ]
      }
    },
    "description": "Simple ascending sort function",
    "type": {
      "names": [
        "function"
      ]
    },
    "examples": [
      "[3,5,1,2,4].sort(utils.sort.SIMPLE_ASCENDING))\n//\n[1,2,3,4,5]"
    ],
    "name": "SORT_ASCENDING",
    "longname": "module:array.SORT_ASCENDING",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Simple descending sort function\n * @example\n * [3,5,1,2,4].sort(utils.sort.SIMPLE_ASCENDING))\n * //\n * [5,4,3,2,1]\n * @type {Function}\n */",
    "meta": {
      "range": [
        2068,
        2139
      ],
      "filename": "array.js",
      "lineno": 53,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001200",
        "name": "module.exports.SORT_DESCENDING",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "a",
          "b"
        ]
      }
    },
    "description": "Simple descending sort function",
    "examples": [
      "[3,5,1,2,4].sort(utils.sort.SIMPLE_ASCENDING))\n//\n[5,4,3,2,1]"
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "SORT_DESCENDING",
    "longname": "module:array.SORT_DESCENDING",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Creates a sort function based on fields of an object.\n * \n * ```\n * sampleData = [{score: 200, name: 'jane'}, {score: 200, name: 'john'}]\n * // sort by score descending, and then by name ascending\n * sampleData.sort(utils.array.createSort('-score','name'))\n * ```\n * \n * @example\n * \n * sampleData = [{i:4}, {v:2}, {v:1}, {v:3}];\n * sortedData = sampleData.sort(\n *    utils.createSort('-v')\n * );\n * // [{v:4}, {v:3}, {v:2}, {v:1}]\n * \n * @param {String} fieldName - name of property to sort by with - for descending\n * @returns {Function}\n **/",
    "meta": {
      "range": [
        2695,
        3738
      ],
      "filename": "array.js",
      "lineno": 75,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001222",
        "name": "module.exports.createSort",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "fields"
        ]
      },
      "vars": {
        "sortFunctions": "module:array.createSort~sortFunctions",
        "": null
      }
    },
    "description": "Creates a sort function based on fields of an object.\n\n```\nsampleData = [{score: 200, name: 'jane'}, {score: 200, name: 'john'}]\n// sort by score descending, and then by name ascending\nsampleData.sort(utils.array.createSort('-score','name'))\n```",
    "examples": [
      "sampleData = [{i:4}, {v:2}, {v:1}, {v:3}];\nsortedData = sampleData.sort(\n   utils.createSort('-v')\n);\n// [{v:4}, {v:3}, {v:2}, {v:1}]"
    ],
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "name of property to sort by with - for descending",
        "name": "fieldName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "name": "createSort",
    "longname": "module:array.createSort",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3201,
        3546
      ],
      "filename": "array.js",
      "lineno": 90,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001272",
        "name": "sortFunctions",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "sortFunctions",
    "longname": "module:array.createSort~sortFunctions",
    "kind": "constant",
    "memberof": "module:array.createSort",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3322,
        3347
      ],
      "filename": "array.js",
      "lineno": 93,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001298",
        "name": "newField",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "newField",
    "longname": "<anonymous>~newField",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3588,
        3600
      ],
      "filename": "array.js",
      "lineno": 102,
      "columnno": 15,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001345",
        "name": "sortFunction"
      }
    },
    "undocumented": true,
    "name": "sortFunction",
    "longname": "<anonymous>~sortFunction",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3633,
        3664
      ],
      "filename": "array.js",
      "lineno": 103,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001350",
        "name": "sortResult",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "sortResult",
    "longname": "<anonymous>~sortResult",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Peek in an array and return the first value in the array.\n * \n * Or return the default value (`defaultVal`) - if the array is empty\n * \n * @param {Array} targetArray - array to be peeked within\n * @param {any} defaultVal - the value to return if the array is empty\n * @returns {any}\n */",
    "meta": {
      "range": [
        4035,
        4219
      ],
      "filename": "array.js",
      "lineno": 119,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001361",
        "name": "module.exports.peekFirst",
        "type": "FunctionExpression",
        "value": "peekFirst",
        "paramnames": [
          "targetArray",
          "defaultVal"
        ]
      }
    },
    "description": "Peek in an array and return the first value in the array.\n\nOr return the default value (`defaultVal`) - if the array is empty",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array to be peeked within",
        "name": "targetArray"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to return if the array is empty",
        "name": "defaultVal"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "name": "peekFirst",
    "longname": "module:array.peekFirst",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Peek in an array and return the last value in the array.\n * \n * Or return the default value (`defaultVal`) - if the array is empty\n * \n * @param {Array} targetArray - array to be peeked within\n * @param {any} defaultVal - the value to return if the array is empty\n * @returns {any}\n */",
    "meta": {
      "range": [
        4515,
        4718
      ],
      "filename": "array.js",
      "lineno": 134,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001392",
        "name": "module.exports.peekLast",
        "type": "FunctionExpression",
        "value": "peekLast",
        "paramnames": [
          "targetArray",
          "defaultVal"
        ]
      }
    },
    "description": "Peek in an array and return the last value in the array.\n\nOr return the default value (`defaultVal`) - if the array is empty",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array to be peeked within",
        "name": "targetArray"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to return if the array is empty",
        "name": "defaultVal"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        }
      }
    ],
    "name": "peekLast",
    "longname": "module:array.peekLast",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Picks a row (or multiple rows) from a 2d array.\n * \n * Please also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.\n * \n * @param {Array} array2d - 2d array to pick from [row][column]\n * @param {...Number} rowIndices - Indexes of the row to return, [0...length-1]\n * @returns - Array with only those rows\n * @example\n * data = [\n *  ['john', 23, 'purple'],\n *  ['jane', 32, 'red'],\n *  ['ringo', 27, 'green']\n * ];\n * \n * utils.array.pickRows(data, 0);\n * //-- [['john', 23, 'purple']];\n * \n * utils.array.pickRows(data, 0, 1);\n * //-- [['john', 23, 'purple'], ['jane', 32, 'red']];\n */",
    "meta": {
      "range": [
        5337,
        5631
      ],
      "filename": "array.js",
      "lineno": 161,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001427",
        "name": "module.exports.pickRows",
        "type": "FunctionExpression",
        "value": "pickRows",
        "paramnames": [
          "array2d",
          "rowIndices"
        ]
      },
      "vars": {
        "cleanRowIndices": "module:array.pickRows~cleanRowIndices",
        "": null
      }
    },
    "description": "Picks a row (or multiple rows) from a 2d array.\n\nPlease also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "2d array to pick from [row][column]",
        "name": "array2d"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "variable": true,
        "description": "Indexes of the row to return, [0...length-1]",
        "name": "rowIndices"
      }
    ],
    "returns": [
      {
        "description": "- Array with only those rows"
      }
    ],
    "examples": [
      "data = [\n ['john', 23, 'purple'],\n ['jane', 32, 'red'],\n ['ringo', 27, 'green']\n];\n\nutils.array.pickRows(data, 0);\n//-- [['john', 23, 'purple']];\n\nutils.array.pickRows(data, 0, 1);\n//-- [['john', 23, 'purple'], ['jane', 32, 'red']];"
    ],
    "name": "pickRows",
    "longname": "module:array.pickRows",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5463,
        5571
      ],
      "filename": "array.js",
      "lineno": 163,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001440",
        "name": "cleanRowIndices",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanRowIndices",
    "longname": "module:array.pickRows~cleanRowIndices",
    "kind": "constant",
    "memberof": "module:array.pickRows",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Picks a column (or multiple columns) from a 2d array\n * \n * Please also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.\n * \n * @param {Array} array2d - 2d array to pick from [row][column]\n * @param  {...any} columns - Indexes of the columns to pick the values from: [0...row.length-1]\n * @returns - Array with all rows, and only those columns\n * @example\n * data = [\n *  ['john', 23, 'purple'],\n *  ['jane', 32, 'red'],\n *  ['ringo', 27, 'green']\n * ];\n * \n * utils.array.pickColumns(data, 0);\n * //-- [['john'], ['jane'], ['ringo']];\n * \n * utils.array.pickColumns(data, 0, 2);\n * //-- [['john', 'purple'], ['jane', 'red'], ['ringo', 'green']];\n */",
    "meta": {
      "range": [
        6314,
        6623
      ],
      "filename": "array.js",
      "lineno": 190,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001471",
        "name": "module.exports.pickColumns",
        "type": "FunctionExpression",
        "value": "pickColumns",
        "paramnames": [
          "array2d",
          "columns"
        ]
      },
      "vars": {
        "cleanColumns": "module:array.pickColumns~cleanColumns",
        "": null
      }
    },
    "description": "Picks a column (or multiple columns) from a 2d array\n\nPlease also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "2d array to pick from [row][column]",
        "name": "array2d"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "variable": true,
        "description": "Indexes of the columns to pick the values from: [0...row.length-1]",
        "name": "columns"
      }
    ],
    "returns": [
      {
        "description": "- Array with all rows, and only those columns"
      }
    ],
    "examples": [
      "data = [\n ['john', 23, 'purple'],\n ['jane', 32, 'red'],\n ['ringo', 27, 'green']\n];\n\nutils.array.pickColumns(data, 0);\n//-- [['john'], ['jane'], ['ringo']];\n\nutils.array.pickColumns(data, 0, 2);\n//-- [['john', 'purple'], ['jane', 'red'], ['ringo', 'green']];"
    ],
    "name": "pickColumns",
    "longname": "module:array.pickColumns",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6443,
        6536
      ],
      "filename": "array.js",
      "lineno": 192,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001484",
        "name": "cleanColumns",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanColumns",
    "longname": "module:array.pickColumns~cleanColumns",
    "kind": "constant",
    "memberof": "module:array.pickColumns",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Convenience function for picking specific rows and columns from a 2d array.\n * \n * Please also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.\n * \n * @param {Array} array2d - 2d array to pick from [row][column]\n * @param {Object} options - options on which to pick\n * @param {Number[]} [options.rows = null] - indices of the rows to pick\n * @param {Number[]} [options.columns = null] - indices of the columns to pick.\n * @returns {Array} - 2d array of only the rows and columns chosen.\n * @see {@link module:Array.pickRows} - picking rows\n * @see {@link module:Array.pickColumns} - picking columns\n * @returns - 2dArray of the columns and rows requested\n * @example\n * data = [\n *  ['john', 23, 'purple'],\n *  ['jane', 32, 'red'],\n *  ['ringo', 27, 'green']\n * ];\n * \n * utils.array.pick(data, {rows: [0, 1]});\n * //-- [['john', 23, 'purple'], ['jane', 32, 'red']];\n * \n * utils.array.pick(data, {columns: [0, 2]});\n * //-- [['john', 'purple'], ['jane', 'red'], ['ringo', 'green']];\n * \n * utils.array.pick(data, {rows:[0, 1], columns:[0, 2]});\n * //-- [['john', 'purple'], ['jane', 'red']];\n */",
    "meta": {
      "range": [
        7752,
        8106
      ],
      "filename": "array.js",
      "lineno": 227,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001521",
        "name": "module.exports.pick",
        "type": "FunctionExpression",
        "value": "pick",
        "paramnames": [
          "array2d",
          "options"
        ]
      },
      "vars": {
        "cleanOptions": "module:array.pick~cleanOptions",
        "undefined": null,
        "results": "module:array~results"
      }
    },
    "description": "Convenience function for picking specific rows and columns from a 2d array.\n\nPlease also see [Danfo.js](https://danfo.jsdata.org/) for working with DataFrames.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "2d array to pick from [row][column]",
        "name": "array2d"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options on which to pick",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Array.<Number>"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "indices of the rows to pick",
        "name": "options.rows"
      },
      {
        "type": {
          "names": [
            "Array.<Number>"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "indices of the columns to pick.",
        "name": "options.columns"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- 2d array of only the rows and columns chosen."
      },
      {
        "description": "- 2dArray of the columns and rows requested"
      }
    ],
    "see": [
      "{@link module:Array.pickRows} - picking rows",
      "{@link module:Array.pickColumns} - picking columns"
    ],
    "examples": [
      "data = [\n ['john', 23, 'purple'],\n ['jane', 32, 'red'],\n ['ringo', 27, 'green']\n];\n\nutils.array.pick(data, {rows: [0, 1]});\n//-- [['john', 23, 'purple'], ['jane', 32, 'red']];\n\nutils.array.pick(data, {columns: [0, 2]});\n//-- [['john', 'purple'], ['jane', 'red'], ['ringo', 'green']];\n\nutils.array.pick(data, {rows:[0, 1], columns:[0, 2]});\n//-- [['john', 'purple'], ['jane', 'red']];"
    ],
    "name": "pick",
    "longname": "module:array.pick",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7816,
        7844
      ],
      "filename": "array.js",
      "lineno": 228,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001533",
        "name": "cleanOptions",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:array.pick~cleanOptions",
    "kind": "constant",
    "memberof": "module:array.pick",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7861,
        7872
      ],
      "filename": "array.js",
      "lineno": 231,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001541",
        "name": "rows",
        "type": "AssignmentPattern",
        "value": "rows"
      }
    },
    "undocumented": true,
    "name": "rows",
    "longname": "module:array~rows",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7878,
        7892
      ],
      "filename": "array.js",
      "lineno": 232,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001545",
        "name": "columns",
        "type": "AssignmentPattern",
        "value": "columns"
      }
    },
    "undocumented": true,
    "name": "columns",
    "longname": "module:array~columns",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7920,
        7937
      ],
      "filename": "array.js",
      "lineno": 235,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001551",
        "name": "results",
        "type": "Identifier",
        "value": "array2d"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:array.pick~results",
    "kind": "member",
    "memberof": "module:array.pick",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7958,
        8002
      ],
      "filename": "array.js",
      "lineno": 238,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001558",
        "name": "results",
        "type": "CallExpression",
        "funcscope": "module:array.pick",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:array~results",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8030,
        8080
      ],
      "filename": "array.js",
      "lineno": 242,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001570",
        "name": "results",
        "type": "CallExpression",
        "funcscope": "module:array.pick",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:array~results",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "/**\n * Creates an array of a specific size and default value\n * \n * Especially useful for forLoops, map or reduce\n * \n * @example\n * \n * utils.array.size(3, null)\n *  .map((v, index) => `item ${index}`)\n * \n * @param {Number} length - the length of the new array\n * @param {any} defaultValue - the new value to put in each cell\n * @see {@link module:array.arrange} for values based on the index\n * @returns {Array} - an array of length size with default values\n */",
    "meta": {
      "range": [
        8574,
        8811
      ],
      "filename": "array.js",
      "lineno": 263,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001581",
        "name": "module.exports.size",
        "type": "FunctionExpression",
        "value": "size",
        "paramnames": [
          "length",
          "defaultValue"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an array of a specific size and default value\n\nEspecially useful for forLoops, map or reduce",
    "examples": [
      "utils.array.size(3, null)\n .map((v, index) => `item ${index}`)"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the length of the new array",
        "name": "length"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the new value to put in each cell",
        "name": "defaultValue"
      }
    ],
    "see": [
      "{@link module:array.arrange} for values based on the index"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- an array of length size with default values"
      }
    ],
    "name": "size",
    "longname": "module:array.size",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Creates an array of values to replace for loops\n * \n * @example\n * \n * utils.array.arange(10, 1)\n *  .map((val) => `item ${val}`);\n * //\n * [\n *   'item 1', 'item 2',\n *   'item 3', 'item 4',\n *   'item 5', 'item 6',\n *   'item 7', 'item 8',\n *   'item 9', 'item 10'\n * ]\n * @param {Number} length - the number of items toreturn\n * @param {Number} [start=0] - the starting number\n * @param {Number} [step=1] - the number to increment for each step\n  * @see {@link module:array.size} for consistent values in the array\n * @return {Number[]} - collection of numbers\n */",
    "meta": {
      "range": [
        9389,
        9528
      ],
      "filename": "array.js",
      "lineno": 291,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001624",
        "name": "module.exports.arrange",
        "type": "FunctionExpression",
        "value": "arange",
        "paramnames": [
          "len",
          "start",
          "step"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an array of values to replace for loops",
    "examples": [
      "utils.array.arange(10, 1)\n .map((val) => `item ${val}`);\n//\n[\n  'item 1', 'item 2',\n  'item 3', 'item 4',\n  'item 5', 'item 6',\n  'item 7', 'item 8',\n  'item 9', 'item 10'\n]"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the number of items toreturn",
        "name": "length"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "the starting number",
        "name": "start"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 1,
        "description": "the number to increment for each step",
        "name": "step"
      }
    ],
    "see": [
      "{@link module:array.size} for consistent values in the array"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Number>"
          ]
        },
        "description": "- collection of numbers"
      }
    ],
    "name": "arrange",
    "longname": "module:array.arrange",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * @see {@link module:array.arange} synonym\n * @private\n */",
    "meta": {
      "range": [
        9595,
        9641
      ],
      "filename": "array.js",
      "lineno": 299,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001660",
        "name": "module.exports.arange",
        "type": "MemberExpression",
        "value": "module.exports.arrange",
        "paramnames": []
      }
    },
    "see": [
      "{@link module:array.arange} synonym"
    ],
    "access": "private",
    "name": "arange",
    "longname": "module:array.arange",
    "kind": "member",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "/**\n * Transposes a two dimensional array, so an NxM becomes MxN\n * @param {any[]} matrix - MxN array\n * @returns {any[]} - NxM array\n * \n * @example\n * \n * baseArray = [ 0, 1, 2, 3, 4 ];\n * utils.array.transpose(utils.array.arrange(5))\n * //\n * [ [ 0 ],\n *   [ 1 ],\n *   [ 2 ],\n *   [ 3 ],\n *   [ 4 ] ]\n */",
    "meta": {
      "range": [
        9952,
        10570
      ],
      "filename": "array.js",
      "lineno": 317,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001672",
        "name": "module.exports.transpose",
        "type": "FunctionExpression",
        "value": "transpose",
        "paramnames": [
          "matrix"
        ]
      },
      "vars": {
        "": null,
        "rows": "module:array.transpose~rows",
        "cols": "module:array.transpose~cols",
        "colI": "module:array~colI",
        "rowI": "module:array~rowI",
        "result": "module:array.transpose~result",
        "result[undefined][undefined]": "module:array.transpose~result.undefined][undefined]"
      }
    },
    "description": "Transposes a two dimensional array, so an NxM becomes MxN",
    "params": [
      {
        "type": {
          "names": [
            "Array.<any>"
          ]
        },
        "description": "MxN array",
        "name": "matrix"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<any>"
          ]
        },
        "description": "- NxM array"
      }
    ],
    "examples": [
      "baseArray = [ 0, 1, 2, 3, 4 ];\nutils.array.transpose(utils.array.arrange(5))\n//\n[ [ 0 ],\n  [ 1 ],\n  [ 2 ],\n  [ 3 ],\n  [ 4 ] ]"
    ],
    "name": "transpose",
    "longname": "module:array.transpose",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10234,
        10254
      ],
      "filename": "array.js",
      "lineno": 329,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001715",
        "name": "rows",
        "type": "MemberExpression",
        "value": "matrix.length"
      }
    },
    "undocumented": true,
    "name": "rows",
    "longname": "module:array.transpose~rows",
    "kind": "constant",
    "memberof": "module:array.transpose",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10264,
        10287
      ],
      "filename": "array.js",
      "lineno": 330,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001721",
        "name": "cols",
        "type": "MemberExpression",
        "value": "matrix[0].length"
      }
    },
    "undocumented": true,
    "name": "cols",
    "longname": "module:array.transpose~cols",
    "kind": "constant",
    "memberof": "module:array.transpose",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10295,
        10299
      ],
      "filename": "array.js",
      "lineno": 331,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001729",
        "name": "colI"
      }
    },
    "undocumented": true,
    "name": "colI",
    "longname": "module:array.transpose~colI",
    "kind": "member",
    "memberof": "module:array.transpose",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10307,
        10311
      ],
      "filename": "array.js",
      "lineno": 332,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001732",
        "name": "rowI"
      }
    },
    "undocumented": true,
    "name": "rowI",
    "longname": "module:array.transpose~rowI",
    "kind": "member",
    "memberof": "module:array.transpose",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10322,
        10403
      ],
      "filename": "array.js",
      "lineno": 334,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001735",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:array.transpose~result",
    "kind": "constant",
    "memberof": "module:array.transpose",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10413,
        10421
      ],
      "filename": "array.js",
      "lineno": 337,
      "columnno": 7,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001757",
        "name": "colI",
        "type": "Literal",
        "funcscope": "module:array.transpose",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "colI",
    "longname": "module:array~colI",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10436,
        10445
      ],
      "filename": "array.js",
      "lineno": 337,
      "columnno": 30,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001763",
        "name": "colI",
        "type": "Literal",
        "funcscope": "module:array.transpose",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "colI",
    "longname": "module:array~colI",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10458,
        10466
      ],
      "filename": "array.js",
      "lineno": 338,
      "columnno": 9,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001768",
        "name": "rowI",
        "type": "Literal",
        "funcscope": "module:array.transpose",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "rowI",
    "longname": "module:array~rowI",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10481,
        10490
      ],
      "filename": "array.js",
      "lineno": 338,
      "columnno": 32,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001774",
        "name": "rowI",
        "type": "Literal",
        "funcscope": "module:array.transpose",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "rowI",
    "longname": "module:array~rowI",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10500,
        10539
      ],
      "filename": "array.js",
      "lineno": 339,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001779",
        "name": "result[undefined][undefined]",
        "type": "MemberExpression",
        "funcscope": "module:array.transpose",
        "value": "matrix[undefined][undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined][undefined]",
    "longname": "module:array.transpose~result.undefined][undefined]",
    "kind": "member",
    "memberof": "module:array.transpose~result",
    "scope": "static"
  },
  {
    "comment": "/**\n * Resizes an NxM dimensional array by number of columns\n * @param {any[]} sourceArray - an array to resize\n * @param {Number} numColumns - number of columns\n * @returns {any[][]} - 2 dimensinal array\n * @example\n * \n * baseArray = utils.array.arrange(12);\n * [\n *    0,  1, 2, 3, 4, 5,  6, 7, 8, 9, 10, 11\n * ]\n * \n * //-- resize the 1d array based on 3 columns\n * newArray = utils.array.reshape(baseArray, 3)\n * [ [ 0, 1, 2 ],\n *   [ 3, 4, 5 ],\n *   [ 6, 7, 8 ],\n *   [ 9, 10, 11 ] ];\n * \n * //-- now resize the 4x3 array to 3x4\n * utils.array.reshape(newArray, 4);\n * [ [ 0, 1, 2, 3 ],\n *   [ 4, 5, 6, 7 ],\n *   [ 8, 9, 10, 11 ] ]\n */",
    "meta": {
      "range": [
        11215,
        11695
      ],
      "filename": "array.js",
      "lineno": 371,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001793",
        "name": "module.exports.reshape",
        "type": "FunctionExpression",
        "value": "reshape",
        "paramnames": [
          "sourceArray",
          "numColumns"
        ]
      },
      "vars": {
        "results": "module:array.reshape~results",
        "resultGroup": "module:array.reshape~resultGroup",
        "column": "module:array.reshape~column",
        "array1d": "module:array.reshape~array1d",
        "": null
      }
    },
    "description": "Resizes an NxM dimensional array by number of columns",
    "params": [
      {
        "type": {
          "names": [
            "Array.<any>"
          ]
        },
        "description": "an array to resize",
        "name": "sourceArray"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "number of columns",
        "name": "numColumns"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Array.<any>>"
          ]
        },
        "description": "- 2 dimensinal array"
      }
    ],
    "examples": [
      "baseArray = utils.array.arrange(12);\n[\n   0,  1, 2, 3, 4, 5,  6, 7, 8, 9, 10, 11\n]\n\n//-- resize the 1d array based on 3 columns\nnewArray = utils.array.reshape(baseArray, 3)\n[ [ 0, 1, 2 ],\n  [ 3, 4, 5 ],\n  [ 6, 7, 8 ],\n  [ 9, 10, 11 ] ];\n\n//-- now resize the 4x3 array to 3x4\nutils.array.reshape(newArray, 4);\n[ [ 0, 1, 2, 3 ],\n  [ 4, 5, 6, 7 ],\n  [ 8, 9, 10, 11 ] ]"
    ],
    "name": "reshape",
    "longname": "module:array.reshape",
    "kind": "function",
    "memberof": "module:array",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11292,
        11304
      ],
      "filename": "array.js",
      "lineno": 372,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001805",
        "name": "results",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:array.reshape~results",
    "kind": "constant",
    "memberof": "module:array.reshape",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11312,
        11328
      ],
      "filename": "array.js",
      "lineno": 373,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001809",
        "name": "resultGroup",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "resultGroup",
    "longname": "module:array.reshape~resultGroup",
    "kind": "member",
    "memberof": "module:array.reshape",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11336,
        11342
      ],
      "filename": "array.js",
      "lineno": 374,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001813",
        "name": "column"
      }
    },
    "undocumented": true,
    "name": "column",
    "longname": "module:array.reshape~column",
    "kind": "member",
    "memberof": "module:array.reshape",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11352,
        11385
      ],
      "filename": "array.js",
      "lineno": 375,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001816",
        "name": "array1d",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "array1d",
    "longname": "module:array.reshape~array1d",
    "kind": "constant",
    "memberof": "module:array.reshape",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11436,
        11463
      ],
      "filename": "array.js",
      "lineno": 379,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001832",
        "name": "column",
        "type": "BinaryExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "column",
    "longname": "module:array~column",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11547,
        11563
      ],
      "filename": "array.js",
      "lineno": 382,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001853",
        "name": "resultGroup",
        "type": "ArrayExpression",
        "funcscope": "<anonymous>",
        "value": "[]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "resultGroup",
    "longname": "module:array~resultGroup",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:array"
  },
  {
    "comment": "/**\n * Simple library for working with base64 strings\n * \n * * {@link module:base64.toBase64|toBase64(str)} - convert a string to base64\n * * {@link module:base64.fromBase64|fromBase64(str)} - parse a base64 encoded string\n * \n * @module base64\n * @exports base64\n * @example\n * const str = 'Hello';\n * utils.base64.toBase64(str); // 'SGVsbG8=';\n * \n * const b64Str = 'SGVsbG8=';\n * utils.base64.fromBase64(b64Str); // 'Hello';\n */",
    "meta": {
      "filename": "base64.js",
      "lineno": 1,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Simple library for working with base64 strings\n\n* {@link module:base64.toBase64|toBase64(str)} - convert a string to base64\n* {@link module:base64.fromBase64|fromBase64(str)} - parse a base64 encoded string",
    "kind": "module",
    "name": "base64",
    "alias": "base64",
    "examples": [
      "const str = 'Hello';\nutils.base64.toBase64(str); // 'SGVsbG8=';\n\nconst b64Str = 'SGVsbG8=';\nutils.base64.fromBase64(b64Str); // 'Hello';"
    ],
    "longname": "module:base64"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        432,
        451
      ],
      "filename": "base64.js",
      "lineno": 16,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001873",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:base64",
    "longname": "module:base64",
    "kind": "member"
  },
  {
    "comment": "/**\n * Convert a string to base64\n * @param {String} str - string to be converted\n * @returns {String} - base64 encoding of the string\n * @example\n * const str = 'Hello';\n * utils.base64.toBase64(str); // 'SGVsbG8=';\n */",
    "meta": {
      "range": [
        715,
        813
      ],
      "filename": "base64.js",
      "lineno": 28,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001879",
        "name": "module.exports.toBase64",
        "type": "FunctionExpression",
        "value": "toBase64",
        "paramnames": [
          "str"
        ]
      }
    },
    "description": "Convert a string to base64",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "string to be converted",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "- base64 encoding of the string"
      }
    ],
    "examples": [
      "const str = 'Hello';\nutils.base64.toBase64(str); // 'SGVsbG8=';"
    ],
    "name": "toBase64",
    "longname": "module:base64.toBase64",
    "kind": "function",
    "memberof": "module:base64",
    "scope": "static"
  },
  {
    "comment": "/**\n * Transfers a base64 string back.\n * @param {String} str - base64 encoded string\n * @returns {String} - decoded string\n * @example\n * const b64Str = 'SGVsbG8=';\n * utils.base64.fromBase64(b64Str); // 'Hello';\n */",
    "meta": {
      "range": [
        1034,
        1138
      ],
      "filename": "base64.js",
      "lineno": 40,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001900",
        "name": "module.exports.fromBase64",
        "type": "FunctionExpression",
        "value": "fromBase64",
        "paramnames": [
          "str"
        ]
      }
    },
    "description": "Transfers a base64 string back.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "base64 encoded string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "- decoded string"
      }
    ],
    "examples": [
      "const b64Str = 'SGVsbG8=';\nutils.base64.fromBase64(b64Str); // 'Hello';"
    ],
    "name": "fromBase64",
    "longname": "module:base64.fromBase64",
    "kind": "function",
    "memberof": "module:base64",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6,
        45
      ],
      "filename": "datasets.js",
      "lineno": 1,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001923",
        "name": "vegaDatasets",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "vegaDatasets",
    "longname": "vegaDatasets",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        53,
        82
      ],
      "filename": "datasets.js",
      "lineno": 2,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001929",
        "name": "fetch",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "fetch",
    "longname": "fetch",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Utilities to facilitate working with [vega/vega-datasets](https://github.com/vega/vega-datasets)\n * \n * Vega datasets are a collection of datasets used in Vega and in Vega-Lite examples.\n * \n * The data lives at [https://github.com/vega/vega-datasets](https://github.com/vega/vega-datasets)\n * and [https://cdn.jsdelivr.net/npm/vega-datasets](https://cdn.jsdelivr.net/npm/vega-datasets)\n * \n * **For those of you familiar with Pandas, please consider looking at [danfo.js](https://danfo.jsdata.org/)\n * and [DataFrame.js](https://gmousse.gitbooks.io/dataframe-js/content/#dataframe-js)**\n * \n * * {@link module:datasets.list|list()} - retrieves the list of the datasets available\n * * {@link module:datasets.fetch|fetch(datasetName)} - returns a promise and fetches the dataset\n * \n * @module datasets\n * @exports datasets\n * \n * @example\n * \n * datasets.list(); //-- prints the list of the datasets supported\n * myDataset = datasets.fetch('cars.json');\n * \n */",
    "meta": {
      "filename": "datasets.js",
      "lineno": 4,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utilities to facilitate working with [vega/vega-datasets](https://github.com/vega/vega-datasets)\n\nVega datasets are a collection of datasets used in Vega and in Vega-Lite examples.\n\nThe data lives at [https://github.com/vega/vega-datasets](https://github.com/vega/vega-datasets)\nand [https://cdn.jsdelivr.net/npm/vega-datasets](https://cdn.jsdelivr.net/npm/vega-datasets)\n\n**For those of you familiar with Pandas, please consider looking at [danfo.js](https://danfo.jsdata.org/)\nand [DataFrame.js](https://gmousse.gitbooks.io/dataframe-js/content/#dataframe-js)**\n\n* {@link module:datasets.list|list()} - retrieves the list of the datasets available\n* {@link module:datasets.fetch|fetch(datasetName)} - returns a promise and fetches the dataset",
    "kind": "module",
    "name": "datasets",
    "alias": "datasets",
    "examples": [
      "datasets.list(); //-- prints the list of the datasets supported\nmyDataset = datasets.fetch('cars.json');"
    ],
    "longname": "module:datasets"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1054,
        1073
      ],
      "filename": "datasets.js",
      "lineno": 27,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001935",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:datasets",
    "longname": "module:datasets",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1081,
        1110
      ],
      "filename": "datasets.js",
      "lineno": 28,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001941",
        "name": "DatasetUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "DatasetUtils",
    "longname": "module:datasets~DatasetUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:datasets",
    "params": []
  },
  {
    "comment": "/**\n * Polyfill for 'global.fetch' if your nodejs instance does not have an implementation\n * (and will only polyfill if so);\n * \n * Once executed, global.fetch will have an implementation.\n * \n * {@link https://www.npmjs.com/package/node-fetch|See the `node-fetch` library for more details}\n */",
    "meta": {
      "range": [
        1429,
        1565
      ],
      "filename": "datasets.js",
      "lineno": 39,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001947",
        "name": "module.exports.polyfillFetch",
        "type": "FunctionExpression",
        "value": "polyfillFetch",
        "paramnames": []
      },
      "vars": {
        "global.fetch": "module:datasets~global.fetch"
      }
    },
    "description": "Polyfill for 'global.fetch' if your nodejs instance does not have an implementation\n(and will only polyfill if so);\n\nOnce executed, global.fetch will have an implementation.\n\n{@link https://www.npmjs.com/package/node-fetch|See the `node-fetch` library for more details}",
    "name": "polyfillFetch",
    "longname": "module:datasets.polyfillFetch",
    "kind": "function",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1538,
        1558
      ],
      "filename": "datasets.js",
      "lineno": 41,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001965",
        "name": "global.fetch",
        "type": "Identifier",
        "value": "fetch",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "fetch",
    "longname": "module:datasets~global.fetch",
    "kind": "member",
    "scope": "static",
    "memberof": "module:datasets~global"
  },
  {
    "comment": "/**\n * Prints the lists of datasets available\n * @returns {String[]} - list of dataset ids that can be fetched.\n * \n * @example\n * \n * datasets.list();\n * \n * // [\n * // 'annual-precip.json',\n * // 'anscombe.json',\n * // 'barley.json',\n * // 'budget.json',\n * // 'budgets.json',\n * // 'burtin.json',\n * // 'cars.json',\n * // 'countries.json',\n * // 'crimea.json',\n * // 'driving.json',\n * // ... ];\n */",
    "meta": {
      "range": [
        1971,
        2059
      ],
      "filename": "datasets.js",
      "lineno": 66,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001971",
        "name": "module.exports.list",
        "type": "ArrowFunctionExpression",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Prints the lists of datasets available",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "- list of dataset ids that can be fetched."
      }
    ],
    "examples": [
      "datasets.list();\n\n// [\n// 'annual-precip.json',\n// 'anscombe.json',\n// 'barley.json',\n// 'budget.json',\n// 'budgets.json',\n// 'burtin.json',\n// 'cars.json',\n// 'countries.json',\n// 'crimea.json',\n// 'driving.json',\n// ... ];"
    ],
    "name": "list",
    "longname": "module:datasets.list",
    "kind": "function",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "/**\n * Shim for fetching things through the node-fetch library\n * @private\n */",
    "meta": {
      "range": [
        2141,
        2173
      ],
      "filename": "datasets.js",
      "lineno": 72,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100001994",
        "name": "module.exports.nodeFetch",
        "type": "Identifier",
        "value": "fetch",
        "paramnames": []
      }
    },
    "description": "Shim for fetching things through the node-fetch library",
    "access": "private",
    "name": "nodeFetch",
    "longname": "module:datasets.nodeFetch",
    "kind": "member",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "/**\n * Fetches a specific dataset from within the list available from [vega-datasets](https://github.com/vega/vega-datasets)\n * \n * Example:\n * \n * Using `utils.datasets.list()` we can see the list of datasets\n * ```\n * ['barley.json', 'cars.json', ...]\n * ```\n * \n * We can then fetch the dataset using that key, and accepting the promise.\n * (Note that this option does not pause execution before running the next cell)\n * \n * ```\n * datasets.fetch('cars.json').then(results => cars = results);\n * [\n *   {\n *     Name: 'chevrolet chevelle malibu',\n *     Miles_per_Gallon: 18,\n *     Cylinders: 8,\n *     Displacement: 307,\n *     Horsepower: 130,\n *     Weight_in_lbs: 3504,\n *     Acceleration: 12,\n *     Year: '1970-01-01',\n *     Origin: 'USA'\n *   },\n *   ...\n * ];\n * ```\n * \n * **Note** - the {@link module:ijs.await|utils.ijs.await method} can simplify this call, to support await.\n * \n * ```\n * utils.ijs.await(async ($$, console) => {\n *   gapMinder = await utils.datasets.load('gapminder.json');\n * });\n * ```\n * \n * @param {string} library - one of the names of the libraries available from list\n * @returns {Promise<any>} - results from the dataset\n * @see #~list\n */",
    "meta": {
      "range": [
        3361,
        3623
      ],
      "filename": "datasets.js",
      "lineno": 117,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002002",
        "name": "module.exports.fetch",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "library"
        ]
      },
      "vars": {
        "listSet": "module:datasets.fetch~listSet"
      }
    },
    "description": "Fetches a specific dataset from within the list available from [vega-datasets](https://github.com/vega/vega-datasets)\n\nExample:\n\nUsing `utils.datasets.list()` we can see the list of datasets\n```\n['barley.json', 'cars.json', ...]\n```\n\nWe can then fetch the dataset using that key, and accepting the promise.\n(Note that this option does not pause execution before running the next cell)\n\n```\ndatasets.fetch('cars.json').then(results => cars = results);\n[\n  {\n    Name: 'chevrolet chevelle malibu',\n    Miles_per_Gallon: 18,\n    Cylinders: 8,\n    Displacement: 307,\n    Horsepower: 130,\n    Weight_in_lbs: 3504,\n    Acceleration: 12,\n    Year: '1970-01-01',\n    Origin: 'USA'\n  },\n  ...\n];\n```\n\n**Note** - the {@link module:ijs.await|utils.ijs.await method} can simplify this call, to support await.\n\n```\nutils.ijs.await(async ($$, console) => {\n  gapMinder = await utils.datasets.load('gapminder.json');\n});\n```",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "one of the names of the libraries available from list",
        "name": "library"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<any>"
          ]
        },
        "description": "- results from the dataset"
      }
    ],
    "see": [
      "#~list"
    ],
    "name": "fetch",
    "longname": "module:datasets.fetch",
    "kind": "function",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3407,
        3445
      ],
      "filename": "datasets.js",
      "lineno": 118,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002012",
        "name": "listSet",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "listSet",
    "longname": "module:datasets.fetch~listSet",
    "kind": "constant",
    "memberof": "module:datasets.fetch",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Simple `fetch` call for JSON handling simple cases.\n * \n * ```\n * const response = await fetch(targetAddress, options);\n * if (!response.ok) throw new Error(`unexpected response ${response.statusText}`);\n * return response.json();\n * ```\n * \n * @param {String} targetAddress - Address of the file to load\n * @param {Object} options - options to pass to fetch\n * @returns {Object} - parsed JSON of the response\n * \n * @example\n * utils.ijs.await(async ($$, console) => {\n *  worldJSON = await utils.datasets.fetchJSON('https://unpkg.com/world-atlas@1/world/110m.json');\n *  console.log(worldJSON.type); // Topology\n * });\n * \n * // use worldJSON as global variable\n */",
    "meta": {
      "range": [
        4301,
        4551
      ],
      "filename": "datasets.js",
      "lineno": 148,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002048",
        "name": "module.exports.fetchJSON",
        "type": "FunctionExpression",
        "value": "fetchJSON",
        "paramnames": [
          "targetAddress",
          "options"
        ]
      },
      "vars": {
        "response": "module:datasets.fetchJSON~response"
      }
    },
    "description": "Simple `fetch` call for JSON handling simple cases.\n\n```\nconst response = await fetch(targetAddress, options);\nif (!response.ok) throw new Error(`unexpected response ${response.statusText}`);\nreturn response.json();\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Address of the file to load",
        "name": "targetAddress"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to pass to fetch",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- parsed JSON of the response"
      }
    ],
    "examples": [
      "utils.ijs.await(async ($$, console) => {\n worldJSON = await utils.datasets.fetchJSON('https://unpkg.com/world-atlas@1/world/110m.json');\n console.log(worldJSON.type); // Topology\n});\n\n// use worldJSON as global variable"
    ],
    "name": "fetchJSON",
    "longname": "module:datasets.fetchJSON",
    "kind": "function",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4387,
        4439
      ],
      "filename": "datasets.js",
      "lineno": 149,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002060",
        "name": "response",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "response",
    "longname": "module:datasets.fetchJSON~response",
    "kind": "constant",
    "memberof": "module:datasets.fetchJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Simple `fetch` call for Text handling simple cases.\n * \n * ```\n * const response = await fetch(targetAddress, options);\n * if (!response.ok) throw new Error(`unexpected response ${response.statusText}`);\n * return response.text();\n * ```\n * \n * @param {String} targetAddress - Address of the file to load\n * @param {Object} options - options to pass to fetch\n * @returns {Object} - parsed JSON of the response\n * \n * @example\n * utils.ijs.await(async ($$, console) => {\n *     myText = await utils.datasets.fetchText('https://unpkg.com/qr-image@3.2.0/LICENSE');\n *     return myText;\n * });\n * \n * // use myText as global variable\n */",
    "meta": {
      "range": [
        5196,
        5445
      ],
      "filename": "datasets.js",
      "lineno": 175,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002089",
        "name": "module.exports.fetchText",
        "type": "FunctionExpression",
        "value": "fetchText",
        "paramnames": [
          "targetAddress",
          "options"
        ]
      },
      "vars": {
        "response": "module:datasets.fetchText~response"
      }
    },
    "description": "Simple `fetch` call for Text handling simple cases.\n\n```\nconst response = await fetch(targetAddress, options);\nif (!response.ok) throw new Error(`unexpected response ${response.statusText}`);\nreturn response.text();\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Address of the file to load",
        "name": "targetAddress"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to pass to fetch",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- parsed JSON of the response"
      }
    ],
    "examples": [
      "utils.ijs.await(async ($$, console) => {\n    myText = await utils.datasets.fetchText('https://unpkg.com/qr-image@3.2.0/LICENSE');\n    return myText;\n});\n\n// use myText as global variable"
    ],
    "name": "fetchText",
    "longname": "module:datasets.fetchText",
    "kind": "function",
    "memberof": "module:datasets",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5287,
        5333
      ],
      "filename": "datasets.js",
      "lineno": 176,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002103",
        "name": "response",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "response",
    "longname": "module:datasets.fetchText~response",
    "kind": "constant",
    "memberof": "module:datasets.fetchText",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/** process to read / write files. */",
    "meta": {
      "range": [
        135,
        159
      ],
      "filename": "file.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002132",
        "name": "fs",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "process to read / write files.",
    "name": "fs",
    "longname": "fs",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        167,
        188
      ],
      "filename": "file.js",
      "lineno": 6,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002138",
        "name": "fsStd",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "fsStd",
    "longname": "fsStd",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/** library to resolve paths */",
    "meta": {
      "range": [
        229,
        251
      ],
      "filename": "file.js",
      "lineno": 9,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002144",
        "name": "path",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "library to resolve paths",
    "name": "path",
    "longname": "path",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        370,
        398
      ],
      "filename": "file.js",
      "lineno": 14,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002150",
        "name": "logger",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "logger",
    "longname": "logger",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Simple file for working with files,\n * (or storing and loading json data)\n * \n * * Writing files\n *   * {@link module:file.writeFile|writeFile(path, string)} - write a file as plain text\n *   * {@link module:file.writeJSON|writeJSON(path, any)} - write data as JSON\n * * reading files\n *   * {@link module:file.readFile|readFile(path, string)} - read a file as plain text\n *   * {@link module:file.readJSON|readJSON(path, any)} - read data as JSON\n * * listing directory\n *   * {@link module:file.pwd|pwd()} - list the current path\n *   * {@link module:file.listFiles|listFiles(path)} - list files in a diven path\n * * checking files exist\n *   * {@link module:file.checkFile|checkFile(...paths)} - check if a file at a path exists\n * \n * ---\n * \n * For example, we just generated a dataset we want to come back to.\n * \n * ```\n * const weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n * ];\n * utils.file.writeJSON('./data/weather.json', weather);\n * ```\n * \n * ... Later on\n * \n * I forgot which directory that the notebook is running in:\n * \n * ```\n * utils.file.pwd();\n * // /Users/path/to/notebook/\n * ```\n * \n * Now, I'd like to look at the files I currently have saved:\n * \n * ```\n * utils.file.listFiles('.');\n * // [ 'data', 'package.json', ... ]\n * \n * utils.file.listFiles('./data');\n * // ['weather.json', 'barley.json', 'cars.json']\n * ```\n * \n * Great! we can load in the data\n * \n * ```\n * data = utils.file.loadJSON('./data/weather.json');\n * // -- data already deserialized\n * data.length\n * // 9\n * \n * ... continue massaging the data as we wanted.\n * ```\n * \n * @module file\n * @exports file\n */",
    "meta": {
      "filename": "file.js",
      "lineno": 16,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Simple file for working with files,\n(or storing and loading json data)\n\n* Writing files\n  * {@link module:file.writeFile|writeFile(path, string)} - write a file as plain text\n  * {@link module:file.writeJSON|writeJSON(path, any)} - write data as JSON\n* reading files\n  * {@link module:file.readFile|readFile(path, string)} - read a file as plain text\n  * {@link module:file.readJSON|readJSON(path, any)} - read data as JSON\n* listing directory\n  * {@link module:file.pwd|pwd()} - list the current path\n  * {@link module:file.listFiles|listFiles(path)} - list files in a diven path\n* checking files exist\n  * {@link module:file.checkFile|checkFile(...paths)} - check if a file at a path exists\n\n---\n\nFor example, we just generated a dataset we want to come back to.\n\n```\nconst weather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.file.writeJSON('./data/weather.json', weather);\n```\n\n... Later on\n\nI forgot which directory that the notebook is running in:\n\n```\nutils.file.pwd();\n// /Users/path/to/notebook/\n```\n\nNow, I'd like to look at the files I currently have saved:\n\n```\nutils.file.listFiles('.');\n// [ 'data', 'package.json', ... ]\n\nutils.file.listFiles('./data');\n// ['weather.json', 'barley.json', 'cars.json']\n```\n\nGreat! we can load in the data\n\n```\ndata = utils.file.loadJSON('./data/weather.json');\n// -- data already deserialized\ndata.length\n// 9\n\n... continue massaging the data as we wanted.\n```",
    "kind": "module",
    "name": "file",
    "alias": "file",
    "longname": "module:file"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2542,
        2561
      ],
      "filename": "file.js",
      "lineno": 84,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002156",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:file",
    "longname": "module:file",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2613,
        2638
      ],
      "filename": "file.js",
      "lineno": 87,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002162",
        "name": "FileUtil",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "FileUtil",
    "longname": "module:file~FileUtil",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:file",
    "params": []
  },
  {
    "comment": "/**\n * Read JSON file.\n * \n * Note that this uses 'utf-8' encoding by default\n * \n * @param {string} filePath - path of the file to load\n * @param {Object} fsOptions - options to pass for fsRead (ex: { encoding: 'utf-8' })\n * @example\n * const weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n * ];\n * utils.file.writeJSON('./data/weather.json', weather);\n * \n * const myWeather = utils.file.readJSON('./data/weather.json');\n * myWeather.length; // 9\n * @see {@link module:file:writeJSON|writeJSON(path, data, fsOptions)} - to write the data\n */",
    "meta": {
      "range": [
        3758,
        4310
      ],
      "filename": "file.js",
      "lineno": 116,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002168",
        "name": "module.exports.readJSON",
        "type": "FunctionExpression",
        "value": "readJSON",
        "paramnames": [
          "filePath",
          "fsOptions"
        ]
      },
      "vars": {
        "resolvedPath": "module:file.readJSON~resolvedPath",
        "optionsDefaults": "module:file.readJSON~optionsDefaults",
        "cleanedOptions": "module:file.readJSON~cleanedOptions",
        "result": "module:file~result"
      }
    },
    "description": "Read JSON file.\n\nNote that this uses 'utf-8' encoding by default",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path of the file to load",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to pass for fsRead (ex: { encoding: 'utf-8' })",
        "name": "fsOptions"
      }
    ],
    "examples": [
      "const weather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.file.writeJSON('./data/weather.json', weather);\n\nconst myWeather = utils.file.readJSON('./data/weather.json');\nmyWeather.length; // 9"
    ],
    "see": [
      "{@link module:file:writeJSON|writeJSON(path, data, fsOptions)} - to write the data"
    ],
    "name": "readJSON",
    "longname": "module:file.readJSON",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3838,
        3875
      ],
      "filename": "file.js",
      "lineno": 117,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002182",
        "name": "resolvedPath",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedPath",
    "longname": "module:file.readJSON~resolvedPath",
    "kind": "constant",
    "memberof": "module:file.readJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3885,
        3924
      ],
      "filename": "file.js",
      "lineno": 118,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002190",
        "name": "optionsDefaults",
        "type": "ObjectExpression",
        "value": "{\"encoding\":\"utf-8\"}"
      }
    },
    "undocumented": true,
    "name": "optionsDefaults",
    "longname": "module:file.readJSON~optionsDefaults",
    "kind": "constant",
    "memberof": "module:file.readJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3905,
        3922
      ],
      "filename": "file.js",
      "lineno": 118,
      "columnno": 28,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002193",
        "name": "encoding",
        "type": "Literal",
        "value": "utf-8"
      }
    },
    "undocumented": true,
    "name": "encoding",
    "longname": "module:file.readJSON~optionsDefaults.encoding",
    "kind": "member",
    "memberof": "module:file.readJSON~optionsDefaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3934,
        3987
      ],
      "filename": "file.js",
      "lineno": 119,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002196",
        "name": "cleanedOptions",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "cleanedOptions",
    "longname": "module:file.readJSON~cleanedOptions",
    "kind": "constant",
    "memberof": "module:file.readJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/** @type {string} */",
    "meta": {
      "range": [
        4020,
        4026
      ],
      "filename": "file.js",
      "lineno": 122,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002204",
        "name": "result"
      }
    },
    "type": {
      "names": [
        "string"
      ]
    },
    "name": "result",
    "longname": "module:file.readJSON~result",
    "kind": "member",
    "memberof": "module:file.readJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4154,
        4208
      ],
      "filename": "file.js",
      "lineno": 129,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002225",
        "name": "result",
        "type": "CallExpression",
        "funcscope": "module:file.readJSON",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:file~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:file"
  },
  {
    "comment": "/**\n * Reads a file in as text.\n * \n * This can be handy for tinkering / cleaning of small sets of data.\n * \n * Note that this uses `utf-8` by default for the encoding\n * \n * @param {String} filePath - path of the file to load\n * @param {Object} fsOptions - options to pass for fsRead (ex: { encoding: 'utf-8' })\n * @returns {String} -\n * @see {@link module:file.writeFile|writeFile(filePath, contents, fsOptions)} - for writing\n * @example\n * sillySong = utils.file.load('../data/pirates.txt');\n * \n * sillySong.split(/\\n[ \\t]*\\n/)        // split on multiple line breaks\n *   .map(stanza => stanza.split(/\\n/)  // split lines by newline\n *     .map(line => line.trim())        // trim each line\n *   );\n * sillySong[0][0]; // I am the very model of a modern Major-General,\n */",
    "meta": {
      "range": [
        5092,
        5644
      ],
      "filename": "file.js",
      "lineno": 156,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002246",
        "name": "module.exports.readFile",
        "type": "FunctionExpression",
        "value": "readFile",
        "paramnames": [
          "filePath",
          "fsOptions"
        ]
      },
      "vars": {
        "resolvedPath": "module:file.readFile~resolvedPath",
        "optionsDefaults": "module:file.readFile~optionsDefaults",
        "cleanedOptions": "module:file.readFile~cleanedOptions",
        "result": "module:file~result"
      }
    },
    "description": "Reads a file in as text.\n\nThis can be handy for tinkering / cleaning of small sets of data.\n\nNote that this uses `utf-8` by default for the encoding",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "path of the file to load",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to pass for fsRead (ex: { encoding: 'utf-8' })",
        "name": "fsOptions"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "-"
      }
    ],
    "see": [
      "{@link module:file.writeFile|writeFile(filePath, contents, fsOptions)} - for writing"
    ],
    "examples": [
      "sillySong = utils.file.load('../data/pirates.txt');\n\nsillySong.split(/\\n[ \\t]*\\n/)        // split on multiple line breaks\n  .map(stanza => stanza.split(/\\n/)  // split lines by newline\n    .map(line => line.trim())        // trim each line\n  );\nsillySong[0][0]; // I am the very model of a modern Major-General,"
    ],
    "name": "readFile",
    "longname": "module:file.readFile",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5172,
        5209
      ],
      "filename": "file.js",
      "lineno": 157,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002260",
        "name": "resolvedPath",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedPath",
    "longname": "module:file.readFile~resolvedPath",
    "kind": "constant",
    "memberof": "module:file.readFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5219,
        5258
      ],
      "filename": "file.js",
      "lineno": 158,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002268",
        "name": "optionsDefaults",
        "type": "ObjectExpression",
        "value": "{\"encoding\":\"utf-8\"}"
      }
    },
    "undocumented": true,
    "name": "optionsDefaults",
    "longname": "module:file.readFile~optionsDefaults",
    "kind": "constant",
    "memberof": "module:file.readFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5239,
        5256
      ],
      "filename": "file.js",
      "lineno": 158,
      "columnno": 28,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002271",
        "name": "encoding",
        "type": "Literal",
        "value": "utf-8"
      }
    },
    "undocumented": true,
    "name": "encoding",
    "longname": "module:file.readFile~optionsDefaults.encoding",
    "kind": "member",
    "memberof": "module:file.readFile~optionsDefaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5268,
        5321
      ],
      "filename": "file.js",
      "lineno": 159,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002274",
        "name": "cleanedOptions",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "cleanedOptions",
    "longname": "module:file.readFile~cleanedOptions",
    "kind": "constant",
    "memberof": "module:file.readFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/** @type {string} */",
    "meta": {
      "range": [
        5353,
        5359
      ],
      "filename": "file.js",
      "lineno": 161,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002282",
        "name": "result"
      }
    },
    "type": {
      "names": [
        "string"
      ]
    },
    "name": "result",
    "longname": "module:file.readFile~result",
    "kind": "member",
    "memberof": "module:file.readFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5488,
        5542
      ],
      "filename": "file.js",
      "lineno": 169,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002303",
        "name": "result",
        "type": "CallExpression",
        "funcscope": "module:file.readFile",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:file~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:file"
  },
  {
    "comment": "/**\n * Writes to a file\n * \n * NOTE that this uses `utf-8` as the default encoding\n * \n * @param {string} filePath - path of the file to write\n * @param {Object} fsOptions - options to pass for fsRead (ex: { encoding: 'utf-8' })\n * @param {string} contents - contents of the file\n * @see {@link module:file.readJSON|readJSON(filePath, fsOptions)} - for reading\n * @example\n * const weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n * ];\n * utils.file.writeJSON('./data/weather.json', weather);\n * \n * const myWeather = utils.file.readJSON('./data/weather.json');\n * myWeather.length; // 9\n */",
    "meta": {
      "range": [
        6760,
        7269
      ],
      "filename": "file.js",
      "lineno": 202,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002324",
        "name": "module.exports.writeJSON",
        "type": "FunctionExpression",
        "value": "writeJSON",
        "paramnames": [
          "filePath",
          "contents",
          "fsOptions"
        ]
      },
      "vars": {
        "jsonContents": "module:file.writeJSON~jsonContents",
        "optionsDefaults": "module:file.writeJSON~optionsDefaults",
        "cleanedOptions": "module:file.writeJSON~cleanedOptions"
      }
    },
    "description": "Writes to a file\n\nNOTE that this uses `utf-8` as the default encoding",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path of the file to write",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to pass for fsRead (ex: { encoding: 'utf-8' })",
        "name": "fsOptions"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "contents of the file",
        "name": "contents"
      }
    ],
    "see": [
      "{@link module:file.readJSON|readJSON(filePath, fsOptions)} - for reading"
    ],
    "examples": [
      "const weather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.file.writeJSON('./data/weather.json', weather);\n\nconst myWeather = utils.file.readJSON('./data/weather.json');\nmyWeather.length; // 9"
    ],
    "name": "writeJSON",
    "longname": "module:file.writeJSON",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6905,
        6953
      ],
      "filename": "file.js",
      "lineno": 204,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002339",
        "name": "jsonContents",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "jsonContents",
    "longname": "module:file.writeJSON~jsonContents",
    "kind": "constant",
    "memberof": "module:file.writeJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6963,
        7002
      ],
      "filename": "file.js",
      "lineno": 205,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002349",
        "name": "optionsDefaults",
        "type": "ObjectExpression",
        "value": "{\"encoding\":\"utf-8\"}"
      }
    },
    "undocumented": true,
    "name": "optionsDefaults",
    "longname": "module:file.writeJSON~optionsDefaults",
    "kind": "constant",
    "memberof": "module:file.writeJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6983,
        7000
      ],
      "filename": "file.js",
      "lineno": 205,
      "columnno": 28,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002352",
        "name": "encoding",
        "type": "Literal",
        "value": "utf-8"
      }
    },
    "undocumented": true,
    "name": "encoding",
    "longname": "module:file.writeJSON~optionsDefaults.encoding",
    "kind": "member",
    "memberof": "module:file.writeJSON~optionsDefaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7012,
        7065
      ],
      "filename": "file.js",
      "lineno": 206,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002355",
        "name": "cleanedOptions",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "cleanedOptions",
    "longname": "module:file.writeJSON~cleanedOptions",
    "kind": "constant",
    "memberof": "module:file.writeJSON",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Writes to a file\n * \n * Note that this uses `utf-8` as the encoding by default\n * \n * @param {string} filePath - path of the file to write\n * @param {string} contents - contents of the file\n * @see {@link module:file.readFile|readFile(filePath, fsOptions)} - for reading\n * @example\n * const myString = `hello`;\n * utils.file.writeFile('./tmp', myString);\n * const newString = utils.file.readFile('./tmp');\n * newString; // 'hello';\n */",
    "meta": {
      "range": [
        7716,
        8261
      ],
      "filename": "file.js",
      "lineno": 230,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002383",
        "name": "module.exports.writeFile",
        "type": "FunctionExpression",
        "value": "writeFile",
        "paramnames": [
          "filePath",
          "contents",
          "fsOptions"
        ]
      },
      "vars": {
        "resolvedPath": "module:file.writeFile~resolvedPath",
        "optionsDefaults": "module:file.writeFile~optionsDefaults",
        "cleanedOptions": "module:file.writeFile~cleanedOptions"
      }
    },
    "description": "Writes to a file\n\nNote that this uses `utf-8` as the encoding by default",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path of the file to write",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "contents of the file",
        "name": "contents"
      }
    ],
    "see": [
      "{@link module:file.readFile|readFile(filePath, fsOptions)} - for reading"
    ],
    "examples": [
      "const myString = `hello`;\nutils.file.writeFile('./tmp', myString);\nconst newString = utils.file.readFile('./tmp');\nnewString; // 'hello';"
    ],
    "name": "writeFile",
    "longname": "module:file.writeFile",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7808,
        7845
      ],
      "filename": "file.js",
      "lineno": 231,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002398",
        "name": "resolvedPath",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedPath",
    "longname": "module:file.writeFile~resolvedPath",
    "kind": "constant",
    "memberof": "module:file.writeFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7855,
        7894
      ],
      "filename": "file.js",
      "lineno": 232,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002406",
        "name": "optionsDefaults",
        "type": "ObjectExpression",
        "value": "{\"encoding\":\"utf-8\"}"
      }
    },
    "undocumented": true,
    "name": "optionsDefaults",
    "longname": "module:file.writeFile~optionsDefaults",
    "kind": "constant",
    "memberof": "module:file.writeFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7875,
        7892
      ],
      "filename": "file.js",
      "lineno": 232,
      "columnno": 28,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002409",
        "name": "encoding",
        "type": "Literal",
        "value": "utf-8"
      }
    },
    "undocumented": true,
    "name": "encoding",
    "longname": "module:file.writeFile~optionsDefaults.encoding",
    "kind": "member",
    "memberof": "module:file.writeFile~optionsDefaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7904,
        7957
      ],
      "filename": "file.js",
      "lineno": 233,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002412",
        "name": "cleanedOptions",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "cleanedOptions",
    "longname": "module:file.writeFile~cleanedOptions",
    "kind": "constant",
    "memberof": "module:file.writeFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Useful when checking values for tests\n * @deprecated\n * @private\n */",
    "meta": {
      "range": [
        8340,
        8964
      ],
      "filename": "file.js",
      "lineno": 250,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002457",
        "name": "module.exports.writeFileStd",
        "type": "FunctionExpression",
        "value": "writeFileStd",
        "paramnames": [
          "filePath",
          "contents"
        ]
      },
      "vars": {
        "resolvedPath": "module:file.writeFileStd~resolvedPath"
      }
    },
    "description": "Useful when checking values for tests",
    "deprecated": true,
    "access": "private",
    "name": "writeFileStd",
    "longname": "module:file.writeFileStd",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8617,
        8654
      ],
      "filename": "file.js",
      "lineno": 255,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002483",
        "name": "resolvedPath",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedPath",
    "longname": "module:file.writeFileStd~resolvedPath",
    "kind": "constant",
    "memberof": "module:file.writeFileStd",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8714,
        8731
      ],
      "filename": "file.js",
      "lineno": 257,
      "columnno": 50,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002500",
        "name": "encoding",
        "type": "Literal",
        "value": "utf-8"
      }
    },
    "undocumented": true,
    "name": "encoding",
    "longname": "module:file~encoding",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:file"
  },
  {
    "comment": "/**\n * List the current path (working directory)\n * \n * @returns {string}\n * @see {@link module:file.listFiles|listFiles(path)} - to list the files of a directory\n * @example\n * utils.file.pwd(); // /user/path/to/notebook\n */",
    "meta": {
      "range": [
        9193,
        9260
      ],
      "filename": "file.js",
      "lineno": 274,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002530",
        "name": "module.exports.pwd",
        "type": "FunctionExpression",
        "value": "pwd",
        "paramnames": []
      }
    },
    "description": "List the current path (working directory)",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "see": [
      "{@link module:file.listFiles|listFiles(path)} - to list the files of a directory"
    ],
    "examples": [
      "utils.file.pwd(); // /user/path/to/notebook"
    ],
    "name": "pwd",
    "longname": "module:file.pwd",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "/**\n * List files in a directory\n * \n * @param {String} directoryPath - path of the directory to list\n * @see {@link module:file.pwd|pwd()} - to get the current working directory\n * @example\n * utils.file.listFiles('./');\n * // ['.gitignore', 'data', ... ];\n */",
    "meta": {
      "range": [
        9525,
        10076
      ],
      "filename": "file.js",
      "lineno": 287,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002546",
        "name": "module.exports.listFiles",
        "type": "FunctionExpression",
        "value": "listFiles",
        "paramnames": [
          "directoryPath"
        ]
      },
      "vars": {
        "resolvedPath": "module:file.listFiles~resolvedPath",
        "results": "module:file.listFiles~results"
      }
    },
    "description": "List files in a directory",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "path of the directory to list",
        "name": "directoryPath"
      }
    ],
    "see": [
      "{@link module:file.pwd|pwd()} - to get the current working directory"
    ],
    "examples": [
      "utils.file.listFiles('./');\n// ['.gitignore', 'data', ... ];"
    ],
    "name": "listFiles",
    "longname": "module:file.listFiles",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9596,
        9638
      ],
      "filename": "file.js",
      "lineno": 288,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002557",
        "name": "resolvedPath",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedPath",
    "longname": "module:file.listFiles~resolvedPath",
    "kind": "constant",
    "memberof": "module:file.listFiles",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9930,
        9968
      ],
      "filename": "file.js",
      "lineno": 298,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002600",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:file.listFiles~results",
    "kind": "constant",
    "memberof": "module:file.listFiles",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Synchronously checks if any of the files provided do not exist.\n * \n * For example:\n * \n * ```\n * //-- these exist\n * // ./data/credentials.env\n * // ./data/results.json\n * \n * if (!utils.file.checkFile('./data/results.json')) {\n *    //-- retrieve the results\n *    utils.ijs.await(async($$, console) => {\n *      results = await connection.query('SELECT XYZ from Contacts');\n *      utils.file.write('./data/results.json', results);\n *    });\n * } else {\n *    results = utils.file.readJSON('./data/results.json');\n * }\n * ```\n * \n * Note, you can also ask for multiple files at once\n * \n * ```\n * utils.file.checkFile(\n *    './data/credentials.env',\n *    './data/results.json',\n *    './data/results.csv'\n * );\n * // false\n * ```\n * \n * or as an array:\n * \n * ```\n * utils.file.checkFile(['./data/credentails.env']);\n * // true\n * ```\n * \n * @param  {...String} files - List of file paths to check (can use relative paths, like './') <br />\n *    see {@link file:listFiles|listFiles()} or {@link file:pwd|pwd()} to help you)\n * @returns {String[]} - null if all files are found, or array of string paths of files not found\n */",
    "meta": {
      "range": [
        11218,
        11793
      ],
      "filename": "file.js",
      "lineno": 348,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002620",
        "name": "module.exports.checkFile",
        "type": "FunctionExpression",
        "value": "checkFile",
        "paramnames": [
          "files"
        ]
      },
      "vars": {
        "cleanFiles": "module:file.checkFile~cleanFiles",
        "resolvedFiles": "module:file.checkFile~resolvedFiles",
        "": null,
        "notFoundFiles": "module:file.checkFile~notFoundFiles"
      }
    },
    "description": "Synchronously checks if any of the files provided do not exist.\n\nFor example:\n\n```\n//-- these exist\n// ./data/credentials.env\n// ./data/results.json\n\nif (!utils.file.checkFile('./data/results.json')) {\n   //-- retrieve the results\n   utils.ijs.await(async($$, console) => {\n     results = await connection.query('SELECT XYZ from Contacts');\n     utils.file.write('./data/results.json', results);\n   });\n} else {\n   results = utils.file.readJSON('./data/results.json');\n}\n```\n\nNote, you can also ask for multiple files at once\n\n```\nutils.file.checkFile(\n   './data/credentials.env',\n   './data/results.json',\n   './data/results.csv'\n);\n// false\n```\n\nor as an array:\n\n```\nutils.file.checkFile(['./data/credentails.env']);\n// true\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "List of file paths to check (can use relative paths, like './') <br />\n   see {@link file:listFiles|listFiles()} or {@link file:pwd|pwd()} to help you)",
        "name": "files"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "- null if all files are found, or array of string paths of files not found"
      }
    ],
    "name": "checkFile",
    "longname": "module:file.checkFile",
    "kind": "function",
    "memberof": "module:file",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11323,
        11408
      ],
      "filename": "file.js",
      "lineno": 350,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002632",
        "name": "cleanFiles",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanFiles",
    "longname": "module:file.checkFile~cleanFiles",
    "kind": "constant",
    "memberof": "module:file.checkFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11421,
        11501
      ],
      "filename": "file.js",
      "lineno": 354,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002653",
        "name": "resolvedFiles",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resolvedFiles",
    "longname": "module:file.checkFile~resolvedFiles",
    "kind": "constant",
    "memberof": "module:file.checkFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11512,
        11622
      ],
      "filename": "file.js",
      "lineno": 356,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002667",
        "name": "notFoundFiles",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "notFoundFiles",
    "longname": "module:file.checkFile~notFoundFiles",
    "kind": "constant",
    "memberof": "module:file.checkFile",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Utility methods for printing and formatting values\n * \n * * Printing Values to String\n *   * {@link module:format.printValue|format.printValue} - Prints any type of value to string\n *   * {@link module:format#.DATE_FORMAT|format.DATE_FORMAT} - Options for printValue Date Formats (see {@link module:array.printValue|array.printValue(value, options)})\n * * formatting Numbers\n *   * {@link module:format.zeroFill|format.zeroFill} - Pads a number to a specific length\n *   * {@link module:format.divideR|format.divideR}   - Divides a number to provide { integer, remainder } - ex: 5/3 as ( 1, remainder 2 )\n *   * {@link module:format.compactNumber|format.compactNumber} - Converts a number to a compact format, ex: 100K, 2M\n *   * {@link module:format.compactParse|format.compactParse} - Parses a compact number to a true number (very useful for sorting)\n * * Formatting Strings\n *   * {@link module:format.capitalize|format.capitalize} - Capitalizes only the first character in the string (ex: 'John paul');\n *   * {@link module:format.capitalizeAll|format.capitalizeAll} - Capitalizes all the words in a string (ex: 'John Paul')\n *   * {@link module:format.ellipsify|format.ellipsify} - Truncates a string if the length is 'too long'\n * * Formatting Time\n *   * {@link module:format.millisecondDuration|format.millisecondDuration}\n * * Mapping Values\n *   * {@link module:format.mapDomain|format.mapDomain} - projects a value from a domain of expected values to a range of output values, ex: 10% of 2 Pi\n * * Identifying Time Periods\n *   * {@link module:format.timePeriod|format.timePeriod} - Converts a time to a time period, very helpful for animations\n *   * {@link module:format.timePeriodPercent|format.timePeriodPercent} - Determines the percent complete of the current time period\n * * Converting values safely\n *   * {@link module:format.safeConvertString|format.safeConvertString} - converts a value to string, or uses a default for any error\n *   * {@link module:format.safeConvertFloat|format.safeConvertFloat} - converts a value to a Number (123.4), or uses a default for any error or NaN\n *   * {@link module:format.safeConvertInteger|format.safeConvertInteger} - converts a value to a Number (123), or uses a default for any error or NaN\n *   * {@link module:format.safeConvertBoolean|format.safeConvertBoolean} - converts a value to a boolean\n * \n * @module format\n * @exports format\n */",
    "meta": {
      "filename": "format.js",
      "lineno": 3,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utility methods for printing and formatting values\n\n* Printing Values to String\n  * {@link module:format.printValue|format.printValue} - Prints any type of value to string\n  * {@link module:format#.DATE_FORMAT|format.DATE_FORMAT} - Options for printValue Date Formats (see {@link module:array.printValue|array.printValue(value, options)})\n* formatting Numbers\n  * {@link module:format.zeroFill|format.zeroFill} - Pads a number to a specific length\n  * {@link module:format.divideR|format.divideR}   - Divides a number to provide { integer, remainder } - ex: 5/3 as ( 1, remainder 2 )\n  * {@link module:format.compactNumber|format.compactNumber} - Converts a number to a compact format, ex: 100K, 2M\n  * {@link module:format.compactParse|format.compactParse} - Parses a compact number to a true number (very useful for sorting)\n* Formatting Strings\n  * {@link module:format.capitalize|format.capitalize} - Capitalizes only the first character in the string (ex: 'John paul');\n  * {@link module:format.capitalizeAll|format.capitalizeAll} - Capitalizes all the words in a string (ex: 'John Paul')\n  * {@link module:format.ellipsify|format.ellipsify} - Truncates a string if the length is 'too long'\n* Formatting Time\n  * {@link module:format.millisecondDuration|format.millisecondDuration}\n* Mapping Values\n  * {@link module:format.mapDomain|format.mapDomain} - projects a value from a domain of expected values to a range of output values, ex: 10% of 2 Pi\n* Identifying Time Periods\n  * {@link module:format.timePeriod|format.timePeriod} - Converts a time to a time period, very helpful for animations\n  * {@link module:format.timePeriodPercent|format.timePeriodPercent} - Determines the percent complete of the current time period\n* Converting values safely\n  * {@link module:format.safeConvertString|format.safeConvertString} - converts a value to string, or uses a default for any error\n  * {@link module:format.safeConvertFloat|format.safeConvertFloat} - converts a value to a Number (123.4), or uses a default for any error or NaN\n  * {@link module:format.safeConvertInteger|format.safeConvertInteger} - converts a value to a Number (123), or uses a default for any error or NaN\n  * {@link module:format.safeConvertBoolean|format.safeConvertBoolean} - converts a value to a boolean",
    "kind": "module",
    "name": "format",
    "alias": "format",
    "longname": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2442,
        2461
      ],
      "filename": "format.js",
      "lineno": 34,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002703",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:format",
    "longname": "module:format",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2469,
        2497
      ],
      "filename": "format.js",
      "lineno": 35,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002709",
        "name": "FormatUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "FormatUtils",
    "longname": "module:format~FormatUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:format",
    "params": []
  },
  {
    "comment": "/**\n * The number of milliseconds of various time durations\n * @private\n */",
    "meta": {
      "range": [
        2643,
        2778
      ],
      "filename": "format.js",
      "lineno": 43,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002719",
        "name": "module.exports.DURATION",
        "type": "ObjectExpression",
        "value": "{\"MILLISECOND\":1,\"SECOND\":1000,\"MINUTE\":\"\",\"HOUR\":\"\",\"DAY\":\"\"}",
        "paramnames": []
      }
    },
    "description": "The number of milliseconds of various time durations",
    "access": "private",
    "name": "DURATION",
    "longname": "module:format.DURATION",
    "kind": "member",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2673,
        2687
      ],
      "filename": "format.js",
      "lineno": 44,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002726",
        "name": "MILLISECOND",
        "type": "Literal",
        "value": 1
      }
    },
    "undocumented": true,
    "name": "MILLISECOND",
    "longname": "module:format.DURATION.MILLISECOND",
    "kind": "member",
    "memberof": "module:format.DURATION",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2691,
        2703
      ],
      "filename": "format.js",
      "lineno": 45,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002728",
        "name": "SECOND",
        "type": "Literal",
        "value": 1000
      }
    },
    "undocumented": true,
    "name": "SECOND",
    "longname": "module:format.DURATION.SECOND",
    "kind": "member",
    "memberof": "module:format.DURATION",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2707,
        2724
      ],
      "filename": "format.js",
      "lineno": 46,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002730",
        "name": "MINUTE",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "MINUTE",
    "longname": "module:format.DURATION.MINUTE",
    "kind": "member",
    "memberof": "module:format.DURATION",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2728,
        2748
      ],
      "filename": "format.js",
      "lineno": 47,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002734",
        "name": "HOUR",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "HOUR",
    "longname": "module:format.DURATION.HOUR",
    "kind": "member",
    "memberof": "module:format.DURATION",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2752,
        2776
      ],
      "filename": "format.js",
      "lineno": 48,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002740",
        "name": "DAY",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "DAY",
    "longname": "module:format.DURATION.DAY",
    "kind": "member",
    "memberof": "module:format.DURATION",
    "scope": "static"
  },
  {
    "comment": "/**\n * Date Formats\n * @type {DateFormat}\n * @see {@link module:format.printValue|printValue()} -\n * @see {@link TableGenerator} - \n * @example\n * d = new Date();\n * format = { dateFormat: utils.format.DATE_FORMAT.LOCAL }; // .LOCAL = 'toLocaleString'\n * utils.format.printValue( new Date(), format)\n * //3/8/2022, 4:22:38 PM\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.LOCAL_DATE }; // .LOCAL_DATE = 'toLocaleDateString'\n * utils.format.printValue( new Date(), format)\n * //3/8/2022\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.LOCAL_TIME }; // .LOCAL_TIME = 'toLocaleTimeString'\n * utils.format.printValue( new Date(), format)\n * //4:22:38 PM\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.GMT }; // .GMT = 'toGMTString'\n * utils.format.printValue( new Date(), format)\n * //Tue, 08 Mar 2022 22:22:38 GMT\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.ISO }; // .ISO = 'toISOString'\n * utils.format.printValue( new Date(), format)\n * //2022-03-08T22:22:38.163Z\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.UTC }; // .UTC = 'toUTCString'\n * utils.format.printValue( new Date(), format)\n * //Tue, 08 Mar 2022 22:22:38 GMT\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.NONE };\n * utils.format.printValue( new Date(), format)\n * //Tue Mar 08 2022 16:22:38 GMT-0600 (Central Standard Time)\n */",
    "meta": {
      "range": [
        4127,
        4339
      ],
      "filename": "format.js",
      "lineno": 86,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002749",
        "name": "module.exports.DATE_FORMAT",
        "type": "ObjectExpression",
        "value": "{\"LOCAL\":\"toLocaleString\",\"LOCAL_DATE\":\"toLocaleDateString\",\"LOCAL_TIME\":\"toLocaleTimeString\",\"GMT\":\"toGMTString\",\"ISO\":\"toISOString\",\"UTC\":\"toUTCString\",\"NONE\":\"NONE\"}",
        "paramnames": []
      }
    },
    "description": "Date Formats",
    "type": {
      "names": [
        "DateFormat"
      ]
    },
    "see": [
      "{@link module:format.printValue|printValue()} -",
      "{@link TableGenerator} -"
    ],
    "examples": [
      "d = new Date();\nformat = { dateFormat: utils.format.DATE_FORMAT.LOCAL }; // .LOCAL = 'toLocaleString'\nutils.format.printValue( new Date(), format)\n//3/8/2022, 4:22:38 PM\n\nformat = { dateFormat: utils.format.DATE_FORMAT.LOCAL_DATE }; // .LOCAL_DATE = 'toLocaleDateString'\nutils.format.printValue( new Date(), format)\n//3/8/2022\n\nformat = { dateFormat: utils.format.DATE_FORMAT.LOCAL_TIME }; // .LOCAL_TIME = 'toLocaleTimeString'\nutils.format.printValue( new Date(), format)\n//4:22:38 PM\n\nformat = { dateFormat: utils.format.DATE_FORMAT.GMT }; // .GMT = 'toGMTString'\nutils.format.printValue( new Date(), format)\n//Tue, 08 Mar 2022 22:22:38 GMT\n\nformat = { dateFormat: utils.format.DATE_FORMAT.ISO }; // .ISO = 'toISOString'\nutils.format.printValue( new Date(), format)\n//2022-03-08T22:22:38.163Z\n\nformat = { dateFormat: utils.format.DATE_FORMAT.UTC }; // .UTC = 'toUTCString'\nutils.format.printValue( new Date(), format)\n//Tue, 08 Mar 2022 22:22:38 GMT\n\nformat = { dateFormat: utils.format.DATE_FORMAT.NONE };\nutils.format.printValue( new Date(), format)\n//Tue Mar 08 2022 16:22:38 GMT-0600 (Central Standard Time)"
    ],
    "name": "DATE_FORMAT",
    "longname": "module:format.DATE_FORMAT",
    "kind": "member",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4160,
        4183
      ],
      "filename": "format.js",
      "lineno": 87,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002756",
        "name": "LOCAL",
        "type": "Literal",
        "value": "toLocaleString"
      }
    },
    "undocumented": true,
    "name": "LOCAL",
    "longname": "module:format.DATE_FORMAT.LOCAL",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4187,
        4219
      ],
      "filename": "format.js",
      "lineno": 88,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002758",
        "name": "LOCAL_DATE",
        "type": "Literal",
        "value": "toLocaleDateString"
      }
    },
    "undocumented": true,
    "name": "LOCAL_DATE",
    "longname": "module:format.DATE_FORMAT.LOCAL_DATE",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4223,
        4255
      ],
      "filename": "format.js",
      "lineno": 89,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002760",
        "name": "LOCAL_TIME",
        "type": "Literal",
        "value": "toLocaleTimeString"
      }
    },
    "undocumented": true,
    "name": "LOCAL_TIME",
    "longname": "module:format.DATE_FORMAT.LOCAL_TIME",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4259,
        4277
      ],
      "filename": "format.js",
      "lineno": 90,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002762",
        "name": "GMT",
        "type": "Literal",
        "value": "toGMTString"
      }
    },
    "undocumented": true,
    "name": "GMT",
    "longname": "module:format.DATE_FORMAT.GMT",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4281,
        4299
      ],
      "filename": "format.js",
      "lineno": 91,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002764",
        "name": "ISO",
        "type": "Literal",
        "value": "toISOString"
      }
    },
    "undocumented": true,
    "name": "ISO",
    "longname": "module:format.DATE_FORMAT.ISO",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4303,
        4321
      ],
      "filename": "format.js",
      "lineno": 92,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002766",
        "name": "UTC",
        "type": "Literal",
        "value": "toUTCString"
      }
    },
    "undocumented": true,
    "name": "UTC",
    "longname": "module:format.DATE_FORMAT.UTC",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4325,
        4337
      ],
      "filename": "format.js",
      "lineno": 93,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002768",
        "name": "NONE",
        "type": "Literal",
        "value": "NONE"
      }
    },
    "undocumented": true,
    "name": "NONE",
    "longname": "module:format.DATE_FORMAT.NONE",
    "kind": "member",
    "memberof": "module:format.DATE_FORMAT",
    "scope": "static"
  },
  {
    "comment": "/**\n * Ellipsis unicode character `…`\n * @type {String}\n * @private\n * @example\n * utils.format.ellipsis('supercalifragilisticexpialidocious', 5)\n * // super…\n */",
    "meta": {
      "range": [
        4505,
        4534
      ],
      "filename": "format.js",
      "lineno": 104,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002771",
        "name": "module.exports.ELLIPSIS",
        "type": "Literal",
        "value": "…",
        "paramnames": []
      }
    },
    "description": "Ellipsis unicode character `…`",
    "type": {
      "names": [
        "String"
      ]
    },
    "access": "private",
    "examples": [
      "utils.format.ellipsis('supercalifragilisticexpialidocious', 5)\n// super…"
    ],
    "name": "ELLIPSIS",
    "longname": "module:format.ELLIPSIS",
    "kind": "member",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Print a value in legible string format\n * \n * Note: collapsing \n * \n * @param {any} value - the value to print\n * @param {Object} options - collection of options\n * @param {Boolean} options.collapseObjects - if true, typesof Object values are not expanded\n * @param {String} options.dateFormat - ('LOCAL'|'LOCAL_DATE','LOCAL_TIME','GMT','ISO','UTC','NONE')\n * @returns {string} - legible formatted value\n * @see #.DATE_FORMAT\n * @example\n * \n * format = { dateFormat: utils.format.DATE_FORMAT.ISO };\n * utils.format.printValue( new Date(), format)\n * //2022-03-08T22:22:38.163Z\n * \n * //-- but you will mostly be using this in aggregate, like with the TableGenerator\n * \n * obj = { first: 'john', last: 'doe', classes: [23, 34], professor: { name: 'jane doe' }, dateTime: new Date(), aliases: new Set(['jdoe', 'j_doe'])}\n * new utils.TableGenerator([obj])\n *   .generateMarkdown();\n * \n * //-- with many objects, this can get unweildy\n * first|last|classes|professor          |dateTime                |aliases                  \n * --   |--  |--     |--                 |--                      |--                       \n * john |doe |[23,34]|{\"name\":\"jane doe\"}|2022-03-08T22:50:03.632Z|\"Set(\\\"jdoe\\\",\\\"j_doe\\\")\"\n * \n * new utils.TableGenerator([obj])\n *   .printOptions({ collapse: true, dateFormat: 'toLocaleDateString' })\n *   .generateMarkdown();\n * \n * //-- a bit more easy to read\n * first|last|classes|professor      |dateTime|aliases     \n * --   |--  |--     |--             |--      |--          \n * john |doe |23,34  |[object Object]|3/8/2022|[object Set]\n * \n */",
    "meta": {
      "range": [
        6120,
        7087
      ],
      "filename": "format.js",
      "lineno": 144,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002779",
        "name": "module.exports.printValue",
        "type": "FunctionExpression",
        "value": "printValue",
        "paramnames": [
          "value",
          "options"
        ]
      },
      "vars": {
        "undefined": null,
        "valType": "module:format.printValue~valType"
      }
    },
    "description": "Print a value in legible string format\n\nNote: collapsing",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to print",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "collection of options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "if true, typesof Object values are not expanded",
        "name": "options.collapseObjects"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "('LOCAL'|'LOCAL_DATE','LOCAL_TIME','GMT','ISO','UTC','NONE')",
        "name": "options.dateFormat"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- legible formatted value"
      }
    ],
    "see": [
      "#.DATE_FORMAT"
    ],
    "examples": [
      "format = { dateFormat: utils.format.DATE_FORMAT.ISO };\nutils.format.printValue( new Date(), format)\n//2022-03-08T22:22:38.163Z\n\n//-- but you will mostly be using this in aggregate, like with the TableGenerator\n\nobj = { first: 'john', last: 'doe', classes: [23, 34], professor: { name: 'jane doe' }, dateTime: new Date(), aliases: new Set(['jdoe', 'j_doe'])}\nnew utils.TableGenerator([obj])\n  .generateMarkdown();\n\n//-- with many objects, this can get unweildy\nfirst|last|classes|professor          |dateTime                |aliases                  \n--   |--  |--     |--                 |--                      |--                       \njohn |doe |[23,34]|{\"name\":\"jane doe\"}|2022-03-08T22:50:03.632Z|\"Set(\\\"jdoe\\\",\\\"j_doe\\\")\"\n\nnew utils.TableGenerator([obj])\n  .printOptions({ collapse: true, dateFormat: 'toLocaleDateString' })\n  .generateMarkdown();\n\n//-- a bit more easy to read\nfirst|last|classes|professor      |dateTime|aliases     \n--   |--  |--     |--             |--      |--          \njohn |doe |23,34  |[object Object]|3/8/2022|[object Set]"
    ],
    "name": "printValue",
    "longname": "module:format.printValue",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6200,
        6240
      ],
      "filename": "format.js",
      "lineno": 146,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002793",
        "name": "dateFormat",
        "type": "AssignmentPattern",
        "value": "dateFormat"
      }
    },
    "undocumented": true,
    "name": "dateFormat",
    "longname": "module:format~dateFormat",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6246,
        6269
      ],
      "filename": "format.js",
      "lineno": 147,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002801",
        "name": "collapseObjects",
        "type": "AssignmentPattern",
        "value": "collapseObjects"
      }
    },
    "undocumented": true,
    "name": "collapseObjects",
    "longname": "module:format~collapseObjects",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6275,
        6291
      ],
      "filename": "format.js",
      "lineno": 148,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002805",
        "name": "collapse",
        "type": "AssignmentPattern",
        "value": "collapse"
      }
    },
    "undocumented": true,
    "name": "collapse",
    "longname": "module:format~collapse",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6432,
        6454
      ],
      "filename": "format.js",
      "lineno": 157,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002827",
        "name": "valType",
        "type": "UnaryExpression",
        "value": "typeofvalue"
      }
    },
    "undocumented": true,
    "name": "valType",
    "longname": "module:format.printValue~valType",
    "kind": "constant",
    "memberof": "module:format.printValue",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Print a number and zero fill it until it is len long.\n * \n * @param {Number} num - Number to be converted\n * @param {Number} [len = 3] - the length of the string\n * @param {String} [fill = '0'] - the value to pad with \n * @returns {String}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart|MDN - Pad Start} - for padding strings at the start\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd|MDN - Pad End} - for padding strings at the end\n * @example\n * utils.format.zeroFill(23)         // '023';\n * utils.format.zeroFill(23, 5)      // '00023';\n * utils.format.zeroFill(23, 5, ' ') // '   23'\n */",
    "meta": {
      "range": [
        7819,
        7934
      ],
      "filename": "format.js",
      "lineno": 193,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002923",
        "name": "module.exports.zeroFill",
        "type": "FunctionExpression",
        "value": "zeroFill",
        "paramnames": [
          "num",
          "len",
          "fill"
        ]
      }
    },
    "description": "Print a number and zero fill it until it is len long.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Number to be converted",
        "name": "num"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 3,
        "description": "the length of the string",
        "name": "len"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "'0'",
        "description": "the value to pad with",
        "name": "fill"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart|MDN - Pad Start} - for padding strings at the start",
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd|MDN - Pad End} - for padding strings at the end"
    ],
    "examples": [
      "utils.format.zeroFill(23)         // '023';\nutils.format.zeroFill(23, 5)      // '00023';\nutils.format.zeroFill(23, 5, ' ') // '   23'"
    ],
    "name": "zeroFill",
    "longname": "module:format.zeroFill",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Generate a random Integer between a maximum and a minimum number\n * \n * @param {Number} max - maximum value\n * @param {Number} min - minimum value\n * @returns {Number}\n * \n * @example\n * utils.format.randomInt(10) // 4\n * utils.format.randomInt(20, 10) // 11\n */",
    "meta": {
      "range": [
        8207,
        8326
      ],
      "filename": "format.js",
      "lineno": 208,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002949",
        "name": "module.exports.randomInt",
        "type": "FunctionExpression",
        "value": "randomInt",
        "paramnames": [
          "max",
          "min"
        ]
      }
    },
    "description": "Generate a random Integer between a maximum and a minimum number",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "maximum value",
        "name": "max"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "minimum value",
        "name": "min"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.randomInt(10) // 4\nutils.format.randomInt(20, 10) // 11"
    ],
    "name": "randomInt",
    "longname": "module:format.randomInt",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Generate a random Float between a maximum and minimum number\n * @param {Number} max - maximum value\n * @param {Number} min - minimum value\n * @returns {Number}\n * \n * @example\n * utils.format.randomFloat(10) // 7.21323\n * utils.format.randomFloat(10) // 4.2232392\n */",
    "meta": {
      "range": [
        8604,
        8718
      ],
      "filename": "format.js",
      "lineno": 222,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100002978",
        "name": "module.exports.randomFloat",
        "type": "FunctionExpression",
        "value": "randomFloat",
        "paramnames": [
          "max",
          "min"
        ]
      }
    },
    "description": "Generate a random Float between a maximum and minimum number",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "maximum value",
        "name": "max"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "minimum value",
        "name": "min"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.randomFloat(10) // 7.21323\nutils.format.randomFloat(10) // 4.2232392"
    ],
    "name": "randomFloat",
    "longname": "module:format.randomFloat",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Replaces maps with strings.\n * \n * @see SourceMap.stringifyReducer for other instances.\n * @private\n */",
    "meta": {
      "range": [
        8832,
        9066
      ],
      "filename": "format.js",
      "lineno": 232,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003003",
        "name": "module.exports.mapReplacer",
        "type": "FunctionExpression",
        "value": "replacer",
        "paramnames": [
          "key",
          "value"
        ]
      }
    },
    "description": "Replaces maps with strings.",
    "see": [
      "SourceMap.stringifyReducer for other instances."
    ],
    "access": "private",
    "name": "mapReplacer",
    "longname": "module:format.mapReplacer",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8942,
        8957
      ],
      "filename": "format.js",
      "lineno": 235,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003021",
        "name": "dataType",
        "type": "Literal",
        "value": "Map"
      }
    },
    "undocumented": true,
    "name": "dataType",
    "longname": "module:format~dataType",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8965,
        8999
      ],
      "filename": "format.js",
      "lineno": 236,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003023",
        "name": "value",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "/**\n * Divide a number and get the integer value and remainder\n * @param {Number} numerator - number to be divided\n * @param {Number} denominator - number to divide with\n * @returns {Object} - ({value, remainder}) \n * @example\n * utils.format.divideR(5, 3)\n * // ({ value: 1, remainder: 2 })\n */",
    "meta": {
      "range": [
        9365,
        9539
      ],
      "filename": "format.js",
      "lineno": 251,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003035",
        "name": "module.exports.divideR",
        "type": "FunctionExpression",
        "value": "divideR",
        "paramnames": [
          "numerator",
          "denominator"
        ]
      }
    },
    "description": "Divide a number and get the integer value and remainder",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "number to be divided",
        "name": "numerator"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "number to divide with",
        "name": "denominator"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- ({value, remainder})"
      }
    ],
    "examples": [
      "utils.format.divideR(5, 3)\n// ({ value: 1, remainder: 2 })"
    ],
    "name": "divideR",
    "longname": "module:format.divideR",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9449,
        9491
      ],
      "filename": "format.js",
      "lineno": 253,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003048",
        "name": "value",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9497,
        9531
      ],
      "filename": "format.js",
      "lineno": 254,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003056",
        "name": "remainder",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "remainder",
    "longname": "module:format~remainder",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "/**\n * @typedef {Object} Duration\n * @property {Number} days -\n * @property {Number} hours -\n * @property {Number} minutes -\n * @property {Number} seconds -\n * @property {Number} milliseconds -\n * @property {Number} epoch - the total duration in milliseconds\n */",
    "meta": {
      "filename": "format.js",
      "lineno": 258,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "kind": "typedef",
    "name": "Duration",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-",
        "name": "days"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-",
        "name": "hours"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-",
        "name": "minutes"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-",
        "name": "seconds"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "-",
        "name": "milliseconds"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the total duration in milliseconds",
        "name": "epoch"
      }
    ],
    "longname": "module:format~Duration",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "/**\n * Determines the length of time that a number of milliseconds take in duration\n * @param {Number} milliseconds - Number of millisecond duration\n * @returns {Duration}\n * @example\n * d1 = new Date();\n * // 2022-03-08T22:55:14.775Z\n * d2 = new Date(d1.getTime())\n * // 2022-03-08T23:02:18.040Z\n * \n * utils.format.millisecondDuration(d2.getTime() - d1.getTime())\n * // {\n * //   days: 0,\n * //   hours: 0,\n * //   minutes: 7,\n * //   seconds: 3,\n * //   milliseconds: 265,\n * //   epoch: 423265\n * // }\n */",
    "meta": {
      "range": [
        10316,
        10973
      ],
      "filename": "format.js",
      "lineno": 288,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003061",
        "name": "module.exports.millisecondDuration",
        "type": "FunctionExpression",
        "value": "millisecondDuration",
        "paramnames": [
          "milliseconds"
        ]
      },
      "vars": {
        "result": "module:format.millisecondDuration~result",
        "division": "module:format~division",
        "result.days": "module:format.millisecondDuration~result.days",
        "result.hours": "module:format.millisecondDuration~result.hours",
        "result.minutes": "module:format.millisecondDuration~result.minutes",
        "result.seconds": "module:format.millisecondDuration~result.seconds",
        "result.milliseconds": "module:format.millisecondDuration~result.milliseconds",
        "result.epoch": "module:format.millisecondDuration~result.epoch"
      }
    },
    "description": "Determines the length of time that a number of milliseconds take in duration",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Number of millisecond duration",
        "name": "milliseconds"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Duration"
          ]
        }
      }
    ],
    "examples": [
      "d1 = new Date();\n// 2022-03-08T22:55:14.775Z\nd2 = new Date(d1.getTime())\n// 2022-03-08T23:02:18.040Z\n\nutils.format.millisecondDuration(d2.getTime() - d1.getTime())\n// {\n//   days: 0,\n//   hours: 0,\n//   minutes: 7,\n//   seconds: 3,\n//   milliseconds: 265,\n//   epoch: 423265\n// }"
    ],
    "name": "millisecondDuration",
    "longname": "module:format.millisecondDuration",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10406,
        10417
      ],
      "filename": "format.js",
      "lineno": 289,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003072",
        "name": "result",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format.millisecondDuration~result",
    "kind": "constant",
    "memberof": "module:format.millisecondDuration",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10425,
        10495
      ],
      "filename": "format.js",
      "lineno": 290,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003076",
        "name": "division",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "division",
    "longname": "module:format.millisecondDuration~division",
    "kind": "member",
    "memberof": "module:format.millisecondDuration",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10499,
        10527
      ],
      "filename": "format.js",
      "lineno": 291,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003089",
        "name": "result.days",
        "type": "MemberExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "division.value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "days",
    "longname": "module:format.millisecondDuration~result.days",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10531,
        10608
      ],
      "filename": "format.js",
      "lineno": 292,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003097",
        "name": "division",
        "type": "CallExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "division",
    "longname": "module:format~division",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10612,
        10641
      ],
      "filename": "format.js",
      "lineno": 293,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003112",
        "name": "result.hours",
        "type": "MemberExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "division.value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "hours",
    "longname": "module:format.millisecondDuration~result.hours",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10645,
        10724
      ],
      "filename": "format.js",
      "lineno": 294,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003120",
        "name": "division",
        "type": "CallExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "division",
    "longname": "module:format~division",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10728,
        10759
      ],
      "filename": "format.js",
      "lineno": 295,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003135",
        "name": "result.minutes",
        "type": "MemberExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "division.value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "minutes",
    "longname": "module:format.millisecondDuration~result.minutes",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10763,
        10842
      ],
      "filename": "format.js",
      "lineno": 296,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003143",
        "name": "division",
        "type": "CallExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "division",
    "longname": "module:format~division",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10846,
        10877
      ],
      "filename": "format.js",
      "lineno": 297,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003158",
        "name": "result.seconds",
        "type": "MemberExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "division.value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "seconds",
    "longname": "module:format.millisecondDuration~result.seconds",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10881,
        10921
      ],
      "filename": "format.js",
      "lineno": 298,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003166",
        "name": "result.milliseconds",
        "type": "MemberExpression",
        "funcscope": "module:format.millisecondDuration",
        "value": "division.remainder",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "milliseconds",
    "longname": "module:format.millisecondDuration~result.milliseconds",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10925,
        10952
      ],
      "filename": "format.js",
      "lineno": 299,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003174",
        "name": "result.epoch",
        "type": "Identifier",
        "funcscope": "module:format.millisecondDuration",
        "value": "milliseconds",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "epoch",
    "longname": "module:format.millisecondDuration~result.epoch",
    "kind": "member",
    "memberof": "module:format.millisecondDuration~result",
    "scope": "static"
  },
  {
    "comment": "/**\n * Ellipsifies a string (but only if it is longer than maxLen)\n * \n * @param {String} str - string to be ellipsified\n * @param {Integer} [maxLen = 50] - the maximum length of str before getting ellipsified\n * @returns {String}\n * @example\n * format.ellipsify('longName') // 'longName' (as maxLen is 50)\n * format.ellipsify('longName', 8) // 'longName' (as maxLen is 8)\n * format.ellipsify('longName', 4) // 'long…' (as str is longer than maxLen)\n */",
    "meta": {
      "range": [
        11430,
        11754
      ],
      "filename": "format.js",
      "lineno": 315,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003182",
        "name": "module.exports.ellipsify",
        "type": "FunctionExpression",
        "value": "ellipsify",
        "paramnames": [
          "str",
          "maxLen"
        ]
      },
      "vars": {
        "cleanStr": "module:format.ellipsify~cleanStr",
        "cleanLen": "module:format.ellipsify~cleanLen"
      }
    },
    "description": "Ellipsifies a string (but only if it is longer than maxLen)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "string to be ellipsified",
        "name": "str"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "defaultvalue": 50,
        "description": "the maximum length of str before getting ellipsified",
        "name": "maxLen"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "examples": [
      "format.ellipsify('longName') // 'longName' (as maxLen is 50)\nformat.ellipsify('longName', 8) // 'longName' (as maxLen is 8)\nformat.ellipsify('longName', 4) // 'long…' (as str is longer than maxLen)"
    ],
    "name": "ellipsify",
    "longname": "module:format.ellipsify",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11499,
        11593
      ],
      "filename": "format.js",
      "lineno": 316,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003194",
        "name": "cleanStr",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanStr",
    "longname": "module:format.ellipsify~cleanStr",
    "kind": "constant",
    "memberof": "module:format.ellipsify",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11606,
        11641
      ],
      "filename": "format.js",
      "lineno": 322,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003212",
        "name": "cleanLen",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanLen",
    "longname": "module:format.ellipsify~cleanLen",
    "kind": "constant",
    "memberof": "module:format.ellipsify",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * projects a value from a domain of expected values to a range of output values, ex: 10% of 2 Pi.\n * \n * This is SUPER helpful in normalizing values, or converting values from one \"range\" of values to another.\n * \n * @param {Number} val - value to be mapped\n * @param {Array} domain - [min, max] - domain of possible input values\n * @param {Array} domain.domainMin - minimum input value (anything at or below maps to rangeMin)\n * @param {Array} domain.domainMax - maximum input value (anything at or above maps to rangeMax)\n * @param {Array} range - [min, max] - range of values to map to\n * @param {Array} range.rangeMin - minimum output value\n * @param {Array} range.rangeMax - maximum output value\n * @returns Number\n * @see {@link module:format.clampDomain|clampDomain(value, [min, max])}\n * @example\n * \n * format.mapDomain(-2, [0, 10], [0, 1])\n * // 0   - since it is below the minimum value\n * format.mapDomain(0, [0, 10], [0, 1])\n * // 0   - since it is the minimum value\n * format.mapDomain(5, [0, 10], [0, 1])\n * // 0.5 - since it is 5/10\n * format.mapDomain(12, [0, 10], [0, 1])\n * // 1   - since it is above the maximum value\n * \n * format.mapDomain(0.5, [0, 1], [0, 10])\n * format.mapDomain(0.5, [0, 1], [0, Math.PI + Math.PI])\n * // 5 - since it is half of 0-1, and half of 1-10\n * // 3.1415 or Math.PI - since it is half of 2 PI\n */",
    "meta": {
      "range": [
        13110,
        13760
      ],
      "filename": "format.js",
      "lineno": 360,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003240",
        "name": "module.exports.mapDomain",
        "type": "FunctionExpression",
        "value": "mapDomain",
        "paramnames": [
          "val",
          "",
          ""
        ]
      }
    },
    "description": "projects a value from a domain of expected values to a range of output values, ex: 10% of 2 Pi.\n\nThis is SUPER helpful in normalizing values, or converting values from one \"range\" of values to another.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "value to be mapped",
        "name": "val"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[min, max] - domain of possible input values",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "minimum input value (anything at or below maps to rangeMin)",
        "name": "domain.domainMin"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "maximum input value (anything at or above maps to rangeMax)",
        "name": "domain.domainMax"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "[min, max] - range of values to map to",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "minimum output value",
        "name": "range.rangeMin"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "maximum output value",
        "name": "range.rangeMax"
      }
    ],
    "returns": [
      {
        "description": "Number"
      }
    ],
    "see": [
      "{@link module:format.clampDomain|clampDomain(value, [min, max])}"
    ],
    "examples": [
      "format.mapDomain(-2, [0, 10], [0, 1])\n// 0   - since it is below the minimum value\nformat.mapDomain(0, [0, 10], [0, 1])\n// 0   - since it is the minimum value\nformat.mapDomain(5, [0, 10], [0, 1])\n// 0.5 - since it is 5/10\nformat.mapDomain(12, [0, 10], [0, 1])\n// 1   - since it is above the maximum value\n\nformat.mapDomain(0.5, [0, 1], [0, 10])\nformat.mapDomain(0.5, [0, 1], [0, Math.PI + Math.PI])\n// 5 - since it is half of 0-1, and half of 1-10\n// 3.1415 or Math.PI - since it is half of 2 PI"
    ],
    "name": "mapDomain",
    "longname": "module:format.mapDomain",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Given that a period of time is millisecondPeriod number of milliseconds long,\n * determines which period of time we are currently in (timeEpoch / millisecondPeriod)\n * \n * This is especially handy for animations or cyclical time measuring.\n * \n * **NOTE: consider sending the timeEpoch relative to a separate start time**,\n * it is rarely ever needed to know how many 10 second intervals occurred since 1970...\n * \n * Likely, we care more that the animation should have cycled 40 times since the page loaded though.\n * \n * @param {Integer} millisecondPeriod - Number of Milliseconds in a Period of time\n * @param {Integer} [timeMilli = now] - optional time to check - in epoch milliseconds\n * @param {Integer} [startMilli = null] - optional starting epoch\n * @returns {Number} - (timeEpoch - startEpoch) / millisecondPeriod - number of periods \n * \n * @example\n * const startTime = new Date().getTime();\n * \n * format.timePeriod(1000)\n * // 164955061.3 - using the current time and epoch starting point\n * \n * format.timePeriod(1000, new Date().getTime(), startTime);\n * // 0.0 - using the starting point instead\n * \n * // - wait 3 seconds\n * \n * format.timePeriod(10000, new Date().getTime(), startTime); // 0.3\n * format.timePeriod(10000, null, startTime); // 0.3\n * \n * // - wait another 14 seconds\n * \n * format.timePeriod(10000, new Date().getTime(), startTime); // 1.7\n * \n * //-- wait 8 seconds\n * \n * format.timePeriod(10000, new Date().getTime(), startTime) // 2.5\n */",
    "meta": {
      "range": [
        15248,
        15531
      ],
      "filename": "format.js",
      "lineno": 411,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003287",
        "name": "module.exports.timePeriod",
        "type": "FunctionExpression",
        "value": "mapTime",
        "paramnames": [
          "millisecondPeriod",
          "timeMilli",
          "startMilli"
        ]
      },
      "vars": {
        "updatedMilli": "module:format~updatedMilli"
      }
    },
    "description": "Given that a period of time is millisecondPeriod number of milliseconds long,\ndetermines which period of time we are currently in (timeEpoch / millisecondPeriod)\n\nThis is especially handy for animations or cyclical time measuring.\n\n**NOTE: consider sending the timeEpoch relative to a separate start time**,\nit is rarely ever needed to know how many 10 second intervals occurred since 1970...\n\nLikely, we care more that the animation should have cycled 40 times since the page loaded though.",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "Number of Milliseconds in a Period of time",
        "name": "millisecondPeriod"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "defaultvalue": "now",
        "description": "optional time to check - in epoch milliseconds",
        "name": "timeMilli"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "optional starting epoch",
        "name": "startMilli"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- (timeEpoch - startEpoch) / millisecondPeriod - number of periods"
      }
    ],
    "examples": [
      "const startTime = new Date().getTime();\n\nformat.timePeriod(1000)\n// 164955061.3 - using the current time and epoch starting point\n\nformat.timePeriod(1000, new Date().getTime(), startTime);\n// 0.0 - using the starting point instead\n\n// - wait 3 seconds\n\nformat.timePeriod(10000, new Date().getTime(), startTime); // 0.3\nformat.timePeriod(10000, null, startTime); // 0.3\n\n// - wait another 14 seconds\n\nformat.timePeriod(10000, new Date().getTime(), startTime); // 1.7\n\n//-- wait 8 seconds\n\nformat.timePeriod(10000, new Date().getTime(), startTime) // 2.5"
    ],
    "name": "timePeriod",
    "longname": "module:format.timePeriod",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15357,
        15425
      ],
      "filename": "format.js",
      "lineno": 412,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003304",
        "name": "updatedMilli",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "updatedMilli",
    "longname": "module:format.timePeriod~updatedMilli",
    "kind": "member",
    "memberof": "module:format.timePeriod",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15454,
        15480
      ],
      "filename": "format.js",
      "lineno": 417,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003319",
        "name": "updatedMilli",
        "type": "Identifier",
        "funcscope": "module:format.timePeriod",
        "value": "startMilli",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "updatedMilli",
    "longname": "module:format~updatedMilli",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "/**\n * Given that a period of time is millisecondPeriod number of milliseconds long,\n * determines how far along in the CURRENT PERIOD.\n * \n * This is especially handy for animations or cyclical time measuring.\n * \n * @param {Integer} millisecondPeriod - Number of Milliseconds in a Period of time\n * @param {Integer} [timeEpoch = now] - time to check - in epoch milliseconds\n * @returns {Number} - percentage through the current millisecond period (0 <= x < 1)\n * \n * @example\n * format.timePeriodPercent(10000, new Date().getTime()) // 0.3\n * \n * //-- wait 14 seconds\n * \n * format.timePeriodPercent(10000, new Date().getTime()) // 0.7\n * \n * //-- wait 8 seconds\n * \n * format.timePeriodPercent(10000, new Date().getTime()) // 0.5\n */",
    "meta": {
      "range": [
        16271,
        16450
      ],
      "filename": "format.js",
      "lineno": 444,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003327",
        "name": "module.exports.timePeriodPercent",
        "type": "FunctionExpression",
        "value": "mapEpochInPeriod",
        "paramnames": [
          "millisecondPeriod",
          "timeEpoch"
        ]
      }
    },
    "description": "Given that a period of time is millisecondPeriod number of milliseconds long,\ndetermines how far along in the CURRENT PERIOD.\n\nThis is especially handy for animations or cyclical time measuring.",
    "params": [
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "Number of Milliseconds in a Period of time",
        "name": "millisecondPeriod"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "defaultvalue": "now",
        "description": "time to check - in epoch milliseconds",
        "name": "timeEpoch"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- percentage through the current millisecond period (0 <= x < 1)"
      }
    ],
    "examples": [
      "format.timePeriodPercent(10000, new Date().getTime()) // 0.3\n\n//-- wait 14 seconds\n\nformat.timePeriodPercent(10000, new Date().getTime()) // 0.7\n\n//-- wait 8 seconds\n\nformat.timePeriodPercent(10000, new Date().getTime()) // 0.5"
    ],
    "name": "timePeriodPercent",
    "longname": "module:format.timePeriodPercent",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Clamps (restircts) a value to a specific domain.\n * \n * Meaning if value is less than minimum, then the minimum is returned.\n * If the value is greater than the maximum, then the maximum is returned.\n * \n * NOTE: null or undefined are not treated specially when comparing to maximum or minimum values.\n * \n * @param {Number} value - the value that will be modified if less than min or max\n * @param {Array} domain - Domain of min and max values\n * @param {Number} domain.min - the minimum value allowable\n * @param {Number} domain.max - the maximum value allowable\n * @returns {Number} - minimum if value is less than minimum, maximum if more, value otherwise.\n * \n * @see {@link module:format.mapDomain|mapDomain(value, [min, max], [newMin, newMax])}\n * @example\n * format.clampDomain( -1, [0, 1]); // 0\n * format.clampDomain( 2, [0, 1]); // 1\n * format.clampDomain( 0.5, [0, 1]); // 0.5\n **/",
    "meta": {
      "range": [
        17354,
        17551
      ],
      "filename": "format.js",
      "lineno": 468,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003351",
        "name": "module.exports.clampDomain",
        "type": "FunctionExpression",
        "value": "clampDomain",
        "paramnames": [
          "value",
          ""
        ]
      }
    },
    "description": "Clamps (restircts) a value to a specific domain.\n\nMeaning if value is less than minimum, then the minimum is returned.\nIf the value is greater than the maximum, then the maximum is returned.\n\nNOTE: null or undefined are not treated specially when comparing to maximum or minimum values.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the value that will be modified if less than min or max",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Domain of min and max values",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the minimum value allowable",
        "name": "domain.min"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the maximum value allowable",
        "name": "domain.max"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- minimum if value is less than minimum, maximum if more, value otherwise."
      }
    ],
    "see": [
      "{@link module:format.mapDomain|mapDomain(value, [min, max], [newMin, newMax])}"
    ],
    "examples": [
      "format.clampDomain( -1, [0, 1]); // 0\nformat.clampDomain( 2, [0, 1]); // 1\nformat.clampDomain( 0.5, [0, 1]); // 0.5"
    ],
    "name": "clampDomain",
    "longname": "module:format.clampDomain",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Capitalizes the first character of the string.\n * \n * @param {String} str - String to capitalize the first letter only\n * @returns {String} - ex: 'John paul'\n * @see {@link module:format.capitalizeAll|capitalizeAll} - to capitalize all words in a string\n * @example\n * utils.format.capitalize('john'); // 'John'\n * utils.format.capitalize('john doe'); // 'John doe'\n */",
    "meta": {
      "range": [
        17931,
        18165
      ],
      "filename": "format.js",
      "lineno": 487,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003379",
        "name": "module.exports.capitalize",
        "type": "FunctionExpression",
        "value": "capitalize",
        "paramnames": [
          "str"
        ]
      },
      "vars": {
        "undefined": null
      }
    },
    "description": "Capitalizes the first character of the string.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "String to capitalize the first letter only",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "- ex: 'John paul'"
      }
    ],
    "see": [
      "{@link module:format.capitalizeAll|capitalizeAll} - to capitalize all words in a string"
    ],
    "examples": [
      "utils.format.capitalize('john'); // 'John'\nutils.format.capitalize('john doe'); // 'John doe'"
    ],
    "name": "capitalize",
    "longname": "module:format.capitalize",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Capitalizes all words in a string.\n * \n * @param {String} str - String to capitalize\n * @returns {String} - ex: 'John-Paul'\n * @see {@link module:format.capitalizeAll|capitalizeAll} - to capitalize all words in a string\n * @example\n * utils.format.capitalize('john'); // 'John'\n * utils.format.capitalize('john doe'); // 'John Doe'\n * utils.format.capitalize('john-paul'); // 'John-Paul'\n */",
    "meta": {
      "range": [
        18567,
        18710
      ],
      "filename": "format.js",
      "lineno": 508,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003419",
        "name": "module.exports.capitalizeAll",
        "type": "FunctionExpression",
        "value": "capitalizeAll",
        "paramnames": [
          "str"
        ]
      }
    },
    "description": "Capitalizes all words in a string.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "String to capitalize",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "- ex: 'John-Paul'"
      }
    ],
    "see": [
      "{@link module:format.capitalizeAll|capitalizeAll} - to capitalize all words in a string"
    ],
    "examples": [
      "utils.format.capitalize('john'); // 'John'\nutils.format.capitalize('john doe'); // 'John Doe'\nutils.format.capitalize('john-paul'); // 'John-Paul'"
    ],
    "name": "capitalizeAll",
    "longname": "module:format.capitalizeAll",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18748,
        20504
      ],
      "filename": "format.js",
      "lineno": 515,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003448",
        "name": "module.exports.metricSI",
        "type": "ArrayExpression",
        "value": "[\"[\\\"Y\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"Y\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"yotta\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Septillion\\\\\\\"}\\\"]\",\"[\\\"Z\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"Z\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"zetta\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Sextillion\\\\\\\"}\\\"]\",\"[\\\"E\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"E\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"exa\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Quintillion\\\\\\\"}\\\"]\",\"[\\\"P\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"P\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"peta\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Quadrillion\\\\\\\"}\\\"]\",\"[\\\"T\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"T\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"tera\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Trillion\\\\\\\"}\\\"]\",\"[\\\"G\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"G\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"giga\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Billion\\\\\\\"}\\\"]\",\"[\\\"M\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"M\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"mega\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Million\\\\\\\"}\\\"]\",\"[\\\"K\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"K\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"kilo\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Thousand\\\\\\\"}\\\"]\",\"[\\\"\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"value\\\\\\\":1,\\\\\\\"fullName\\\\\\\":\\\\\\\"\\\\\\\"}\\\"]\",\"[\\\"c\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"c\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"centi\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Hundredth\\\\\\\"}\\\"]\",\"[\\\"m\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"m\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"milli\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Thousandth\\\\\\\"}\\\"]\",\"[\\\"μ\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"μ\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"micro\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Millionth\\\\\\\"}\\\"]\",\"[\\\"n\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"n\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"nano\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Billionth\\\\\\\"}\\\"]\",\"[\\\"p\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"p\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"pico\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Trillionth\\\\\\\"}\\\"]\",\"[\\\"f\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"f\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"femto\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Quadrillionth\\\\\\\"}\\\"]\",\"[\\\"a\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"a\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"atto\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Quintillionth\\\\\\\"}\\\"]\",\"[\\\"z\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"z\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"zepto\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Sextillionth\\\\\\\"}\\\"]\",\"[\\\"y\\\",\\\"{\\\\\\\"key\\\\\\\":\\\\\\\"y\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"yocto\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"fullName\\\\\\\":\\\\\\\"Septillionth\\\\\\\"}\\\"]\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "metricSI",
    "longname": "module:format.metricSI",
    "kind": "member",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18786,
        18794
      ],
      "filename": "format.js",
      "lineno": 516,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003458",
        "name": "key",
        "type": "Literal",
        "value": "Y"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18796,
        18809
      ],
      "filename": "format.js",
      "lineno": 516,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003460",
        "name": "name",
        "type": "Literal",
        "value": "yotta"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18811,
        18826
      ],
      "filename": "format.js",
      "lineno": 516,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003462",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18829,
        18851
      ],
      "filename": "format.js",
      "lineno": 516,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003466",
        "name": "fullName",
        "type": "Literal",
        "value": "Septillion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18869,
        18877
      ],
      "filename": "format.js",
      "lineno": 517,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003471",
        "name": "key",
        "type": "Literal",
        "value": "Z"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18879,
        18892
      ],
      "filename": "format.js",
      "lineno": 517,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003473",
        "name": "name",
        "type": "Literal",
        "value": "zetta"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18894,
        18909
      ],
      "filename": "format.js",
      "lineno": 517,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003475",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18912,
        18934
      ],
      "filename": "format.js",
      "lineno": 517,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003479",
        "name": "fullName",
        "type": "Literal",
        "value": "Sextillion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18952,
        18960
      ],
      "filename": "format.js",
      "lineno": 518,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003484",
        "name": "key",
        "type": "Literal",
        "value": "E"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18962,
        18973
      ],
      "filename": "format.js",
      "lineno": 518,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003486",
        "name": "name",
        "type": "Literal",
        "value": "exa"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18977,
        18992
      ],
      "filename": "format.js",
      "lineno": 518,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003488",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18995,
        19018
      ],
      "filename": "format.js",
      "lineno": 518,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003492",
        "name": "fullName",
        "type": "Literal",
        "value": "Quintillion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19035,
        19043
      ],
      "filename": "format.js",
      "lineno": 519,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003497",
        "name": "key",
        "type": "Literal",
        "value": "P"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19045,
        19057
      ],
      "filename": "format.js",
      "lineno": 519,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003499",
        "name": "name",
        "type": "Literal",
        "value": "peta"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19060,
        19075
      ],
      "filename": "format.js",
      "lineno": 519,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003501",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19078,
        19101
      ],
      "filename": "format.js",
      "lineno": 519,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003505",
        "name": "fullName",
        "type": "Literal",
        "value": "Quadrillion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19118,
        19126
      ],
      "filename": "format.js",
      "lineno": 520,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003510",
        "name": "key",
        "type": "Literal",
        "value": "T"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19128,
        19140
      ],
      "filename": "format.js",
      "lineno": 520,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003512",
        "name": "name",
        "type": "Literal",
        "value": "tera"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19143,
        19158
      ],
      "filename": "format.js",
      "lineno": 520,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003514",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19161,
        19181
      ],
      "filename": "format.js",
      "lineno": 520,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003518",
        "name": "fullName",
        "type": "Literal",
        "value": "Trillion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19201,
        19209
      ],
      "filename": "format.js",
      "lineno": 521,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003523",
        "name": "key",
        "type": "Literal",
        "value": "G"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19211,
        19223
      ],
      "filename": "format.js",
      "lineno": 521,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003525",
        "name": "name",
        "type": "Literal",
        "value": "giga"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19226,
        19240
      ],
      "filename": "format.js",
      "lineno": 521,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003527",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19244,
        19263
      ],
      "filename": "format.js",
      "lineno": 521,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003531",
        "name": "fullName",
        "type": "Literal",
        "value": "Billion"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19284,
        19292
      ],
      "filename": "format.js",
      "lineno": 522,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003536",
        "name": "key",
        "type": "Literal",
        "value": "M"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19294,
        19306
      ],
      "filename": "format.js",
      "lineno": 522,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003538",
        "name": "name",
        "type": "Literal",
        "value": "mega"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19309,
        19323
      ],
      "filename": "format.js",
      "lineno": 522,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003540",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19327,
        19346
      ],
      "filename": "format.js",
      "lineno": 522,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003544",
        "name": "fullName",
        "type": "Literal",
        "value": "Million"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19367,
        19375
      ],
      "filename": "format.js",
      "lineno": 523,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003549",
        "name": "key",
        "type": "Literal",
        "value": "K"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19377,
        19389
      ],
      "filename": "format.js",
      "lineno": 523,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003551",
        "name": "name",
        "type": "Literal",
        "value": "kilo"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19392,
        19406
      ],
      "filename": "format.js",
      "lineno": 523,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003553",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19410,
        19430
      ],
      "filename": "format.js",
      "lineno": 523,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003557",
        "name": "fullName",
        "type": "Literal",
        "value": "Thousand"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19707,
        19714
      ],
      "filename": "format.js",
      "lineno": 527,
      "columnno": 9,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003562",
        "name": "key",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19716,
        19724
      ],
      "filename": "format.js",
      "lineno": 527,
      "columnno": 18,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003564",
        "name": "name",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19726,
        19734
      ],
      "filename": "format.js",
      "lineno": 527,
      "columnno": 28,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003566",
        "name": "value",
        "type": "Literal",
        "value": 1
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19736,
        19748
      ],
      "filename": "format.js",
      "lineno": 527,
      "columnno": 38,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003568",
        "name": "fullName",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19767,
        19775
      ],
      "filename": "format.js",
      "lineno": 528,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003573",
        "name": "key",
        "type": "Literal",
        "value": "c"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19777,
        19790
      ],
      "filename": "format.js",
      "lineno": 528,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003575",
        "name": "name",
        "type": "Literal",
        "value": "centi"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19792,
        19807
      ],
      "filename": "format.js",
      "lineno": 528,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003577",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19810,
        19831
      ],
      "filename": "format.js",
      "lineno": 528,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003582",
        "name": "fullName",
        "type": "Literal",
        "value": "Hundredth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19850,
        19858
      ],
      "filename": "format.js",
      "lineno": 529,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003587",
        "name": "key",
        "type": "Literal",
        "value": "m"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19860,
        19873
      ],
      "filename": "format.js",
      "lineno": 529,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003589",
        "name": "name",
        "type": "Literal",
        "value": "milli"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19875,
        19890
      ],
      "filename": "format.js",
      "lineno": 529,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003591",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19893,
        19915
      ],
      "filename": "format.js",
      "lineno": 529,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003596",
        "name": "fullName",
        "type": "Literal",
        "value": "Thousandth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19933,
        19941
      ],
      "filename": "format.js",
      "lineno": 530,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003601",
        "name": "key",
        "type": "Literal",
        "value": "μ"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19943,
        19956
      ],
      "filename": "format.js",
      "lineno": 530,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003603",
        "name": "name",
        "type": "Literal",
        "value": "micro"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19958,
        19973
      ],
      "filename": "format.js",
      "lineno": 530,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003605",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19976,
        19997
      ],
      "filename": "format.js",
      "lineno": 530,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003610",
        "name": "fullName",
        "type": "Literal",
        "value": "Millionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20016,
        20024
      ],
      "filename": "format.js",
      "lineno": 531,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003615",
        "name": "key",
        "type": "Literal",
        "value": "n"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20026,
        20038
      ],
      "filename": "format.js",
      "lineno": 531,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003617",
        "name": "name",
        "type": "Literal",
        "value": "nano"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20041,
        20056
      ],
      "filename": "format.js",
      "lineno": 531,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003619",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20059,
        20080
      ],
      "filename": "format.js",
      "lineno": 531,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003624",
        "name": "fullName",
        "type": "Literal",
        "value": "Billionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20099,
        20107
      ],
      "filename": "format.js",
      "lineno": 532,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003629",
        "name": "key",
        "type": "Literal",
        "value": "p"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20109,
        20121
      ],
      "filename": "format.js",
      "lineno": 532,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003631",
        "name": "name",
        "type": "Literal",
        "value": "pico"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20124,
        20140
      ],
      "filename": "format.js",
      "lineno": 532,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003633",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20142,
        20164
      ],
      "filename": "format.js",
      "lineno": 532,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003638",
        "name": "fullName",
        "type": "Literal",
        "value": "Trillionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20182,
        20190
      ],
      "filename": "format.js",
      "lineno": 533,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003643",
        "name": "key",
        "type": "Literal",
        "value": "f"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20192,
        20205
      ],
      "filename": "format.js",
      "lineno": 533,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003645",
        "name": "name",
        "type": "Literal",
        "value": "femto"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20207,
        20223
      ],
      "filename": "format.js",
      "lineno": 533,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003647",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20225,
        20250
      ],
      "filename": "format.js",
      "lineno": 533,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003652",
        "name": "fullName",
        "type": "Literal",
        "value": "Quadrillionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20265,
        20273
      ],
      "filename": "format.js",
      "lineno": 534,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003657",
        "name": "key",
        "type": "Literal",
        "value": "a"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20275,
        20287
      ],
      "filename": "format.js",
      "lineno": 534,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003659",
        "name": "name",
        "type": "Literal",
        "value": "atto"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20290,
        20306
      ],
      "filename": "format.js",
      "lineno": 534,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003661",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20308,
        20333
      ],
      "filename": "format.js",
      "lineno": 534,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003666",
        "name": "fullName",
        "type": "Literal",
        "value": "Quintillionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20348,
        20356
      ],
      "filename": "format.js",
      "lineno": 535,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003671",
        "name": "key",
        "type": "Literal",
        "value": "z"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20358,
        20371
      ],
      "filename": "format.js",
      "lineno": 535,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003673",
        "name": "name",
        "type": "Literal",
        "value": "zepto"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20373,
        20389
      ],
      "filename": "format.js",
      "lineno": 535,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003675",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20391,
        20415
      ],
      "filename": "format.js",
      "lineno": 535,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003680",
        "name": "fullName",
        "type": "Literal",
        "value": "Sextillionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20431,
        20439
      ],
      "filename": "format.js",
      "lineno": 536,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003685",
        "name": "key",
        "type": "Literal",
        "value": "y"
      }
    },
    "undocumented": true,
    "name": "key",
    "longname": "module:format~key",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20441,
        20454
      ],
      "filename": "format.js",
      "lineno": 536,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003687",
        "name": "name",
        "type": "Literal",
        "value": "yocto"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:format~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20456,
        20472
      ],
      "filename": "format.js",
      "lineno": 536,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003689",
        "name": "value",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20474,
        20498
      ],
      "filename": "format.js",
      "lineno": 536,
      "columnno": 53,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003694",
        "name": "fullName",
        "type": "Literal",
        "value": "Septillionth"
      }
    },
    "undocumented": true,
    "name": "fullName",
    "longname": "module:format~fullName",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20507,
        20565
      ],
      "filename": "format.js",
      "lineno": 539,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003697",
        "name": "module.exports.metricSIMap",
        "type": "NewExpression",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "metricSIMap",
    "longname": "module:format.metricSIMap",
    "kind": "member",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * This parses compact numbers, like 100K, 2M, etc.\n * \n * key|name |fullName     |value2  \n * -- |--   |--           |--      \n * Y  |yotta|Septillion   |10^24   \n * Z  |zetta|Sextillion   |10^21   \n * E  |exa  |Quintillion  |10^18   \n * P  |peta |Quadrillion  |10^15   \n * T  |tera |Trillion     |10^12   \n * G  |giga |Billion      |10^9    \n * M  |mega |Million      |10^6    \n * K  |kilo |Thousand     |10^3    \n * m  |milli|Thousandth   |0.001   \n * μ  |micro|Millionth    |0.000001\n * n  |nano |Billionth    |10^-9   \n * p  |pico |Trillionth   |10^-12  \n * f  |femto|Quadrillionth|10^-15  \n * a  |atto |Quintillionth|10^-18  \n * z  |zepto|Sextillionth |10^-21  \n * y  |yocto|Septillionth |10^-24\n * \n * @param {String} compactStr - Compact Number String, like 100K, 2M, etc.\n * @returns {Number}\n * @example\n * utils.compactParse('1.2K'); // 1200\n * utils.compactParse('12');   // 12\n * utils.compactParse('299.8M')// 299800000\n */",
    "meta": {
      "range": [
        21544,
        21984
      ],
      "filename": "format.js",
      "lineno": 571,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003709",
        "name": "module.exports.compactParse",
        "type": "FunctionExpression",
        "value": "compactParse",
        "paramnames": [
          "compactStr"
        ]
      },
      "vars": {
        "match": "module:format.compactParse~match",
        "parsedNumber": "module:format.compactParse~parsedNumber",
        "char": "module:format.compactParse~char",
        "value": "module:format~value"
      }
    },
    "description": "This parses compact numbers, like 100K, 2M, etc.\n\nkey|name |fullName     |value2  \n-- |--   |--           |--      \nY  |yotta|Septillion   |10^24   \nZ  |zetta|Sextillion   |10^21   \nE  |exa  |Quintillion  |10^18   \nP  |peta |Quadrillion  |10^15   \nT  |tera |Trillion     |10^12   \nG  |giga |Billion      |10^9    \nM  |mega |Million      |10^6    \nK  |kilo |Thousand     |10^3    \nm  |milli|Thousandth   |0.001   \nμ  |micro|Millionth    |0.000001\nn  |nano |Billionth    |10^-9   \np  |pico |Trillionth   |10^-12  \nf  |femto|Quadrillionth|10^-15  \na  |atto |Quintillionth|10^-18  \nz  |zepto|Sextillionth |10^-21  \ny  |yocto|Septillionth |10^-24",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Compact Number String, like 100K, 2M, etc.",
        "name": "compactStr"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.compactParse('1.2K'); // 1200\nutils.compactParse('12');   // 12\nutils.compactParse('299.8M')// 299800000"
    ],
    "name": "compactParse",
    "longname": "module:format.compactParse",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21618,
        21674
      ],
      "filename": "format.js",
      "lineno": 572,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003720",
        "name": "match",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "match",
    "longname": "module:format.compactParse~match",
    "kind": "constant",
    "memberof": "module:format.compactParse",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21770,
        21805
      ],
      "filename": "format.js",
      "lineno": 577,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003741",
        "name": "parsedNumber",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "parsedNumber",
    "longname": "module:format.compactParse~parsedNumber",
    "kind": "constant",
    "memberof": "module:format.compactParse",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21815,
        21830
      ],
      "filename": "format.js",
      "lineno": 578,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003749",
        "name": "char",
        "type": "MemberExpression",
        "value": "match[2]"
      }
    },
    "undocumented": true,
    "name": "char",
    "longname": "module:format.compactParse~char",
    "kind": "constant",
    "memberof": "module:format.compactParse",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21838,
        21858
      ],
      "filename": "format.js",
      "lineno": 579,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003755",
        "name": "value",
        "type": "Identifier",
        "value": "parsedNumber"
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format.compactParse~value",
    "kind": "member",
    "memberof": "module:format.compactParse",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21910,
        21958
      ],
      "filename": "format.js",
      "lineno": 582,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003768",
        "name": "value",
        "type": "MemberExpression",
        "funcscope": "module:format.compactParse",
        "value": ".value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "module:format~value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "/**\n * Converts a number to a compact version.\n * \n * key|name |fullName     |value2  \n * -- |--   |--           |--      \n * Y  |yotta|Septillion   |10^24   \n * Z  |zetta|Sextillion   |10^21   \n * E  |exa  |Quintillion  |10^18   \n * P  |peta |Quadrillion  |10^15   \n * T  |tera |Trillion     |10^12   \n * G  |giga |Billion      |10^9    \n * M  |mega |Million      |10^6    \n * K  |kilo |Thousand     |10^3    \n * m  |milli|Thousandth   |0.001   \n * μ  |micro|Millionth    |0.000001\n * n  |nano |Billionth    |10^-9   \n * p  |pico |Trillionth   |10^-12  \n * f  |femto|Quadrillionth|10^-15  \n * a  |atto |Quintillionth|10^-18  \n * z  |zepto|Sextillionth |10^-21  \n * y  |yocto|Septillionth |10^-24\n * \n * Note, a standard method Javascript is now available\n * with {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat|Intl.NumberFormat()}\n * \n * This method handles very simple cases, but you can use the `compact` layout\n * for much more control.\n * \n * @param {Number} num - Number to create into a compact number\n * @param {Number} digits - Significant digits\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed|Number.toFixed(num, digits)}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat|Intl.NumberFormat()} - as the compact format does something similar\n * @returns {String}\n * @example \n * utils.format.compactNumber(123.456, 1);   // 123.5\n * utils.format.compactNumber(759878, 0);    // 760K\n * utils.format.compactNumber(0.0000002, 1); // 200n\n * \n * //-- or using Intl.NumberFormat\n * new Intl.NumberFormat('en-GB', {\n *   notation: \"compact\",\n *   compactDisplay: \"short\"\n * }).format(987654321);\n * // → 988M\n */",
    "meta": {
      "range": [
        23816,
        24240
      ],
      "filename": "format.js",
      "lineno": 633,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003782",
        "name": "module.exports.compactNumber",
        "type": "FunctionExpression",
        "value": "compactNumber",
        "paramnames": [
          "num",
          "digits"
        ]
      },
      "vars": {
        "si": "module:format~si",
        "": null,
        "siValue": "module:format.compactNumber~siValue",
        "siKey": "module:format.compactNumber~siKey"
      }
    },
    "description": "Converts a number to a compact version.\n\nkey|name |fullName     |value2  \n-- |--   |--           |--      \nY  |yotta|Septillion   |10^24   \nZ  |zetta|Sextillion   |10^21   \nE  |exa  |Quintillion  |10^18   \nP  |peta |Quadrillion  |10^15   \nT  |tera |Trillion     |10^12   \nG  |giga |Billion      |10^9    \nM  |mega |Million      |10^6    \nK  |kilo |Thousand     |10^3    \nm  |milli|Thousandth   |0.001   \nμ  |micro|Millionth    |0.000001\nn  |nano |Billionth    |10^-9   \np  |pico |Trillionth   |10^-12  \nf  |femto|Quadrillionth|10^-15  \na  |atto |Quintillionth|10^-18  \nz  |zepto|Sextillionth |10^-21  \ny  |yocto|Septillionth |10^-24\n\nNote, a standard method Javascript is now available\nwith {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat|Intl.NumberFormat()}\n\nThis method handles very simple cases, but you can use the `compact` layout\nfor much more control.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Number to create into a compact number",
        "name": "num"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "Significant digits",
        "name": "digits"
      }
    ],
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed|Number.toFixed(num, digits)}",
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat|Intl.NumberFormat()} - as the compact format does something similar"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.compactNumber(123.456, 1);   // 123.5\nutils.format.compactNumber(759878, 0);    // 760K\nutils.format.compactNumber(0.0000002, 1); // 200n\n\n//-- or using Intl.NumberFormat\nnew Intl.NumberFormat('en-GB', {\n  notation: \"compact\",\n  compactDisplay: \"short\"\n}).format(987654321);\n// → 988M"
    ],
    "name": "compactNumber",
    "longname": "module:format.compactNumber",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23992,
        24060
      ],
      "filename": "format.js",
      "lineno": 640,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003815",
        "name": "si",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "si",
    "longname": "module:format.compactNumber~si",
    "kind": "member",
    "memberof": "module:format.compactNumber",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24073,
        24131
      ],
      "filename": "format.js",
      "lineno": 641,
      "columnno": 11,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003836",
        "name": "si",
        "type": "MemberExpression",
        "funcscope": "module:format.compactNumber",
        "value": "FormatUtils.metricSI[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "si",
    "longname": "module:format~si",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24142,
        24163
      ],
      "filename": "format.js",
      "lineno": 643,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003850",
        "name": "siValue",
        "type": "MemberExpression",
        "value": "si[1].value"
      }
    },
    "undocumented": true,
    "name": "siValue",
    "longname": "module:format.compactNumber~siValue",
    "kind": "constant",
    "memberof": "module:format.compactNumber",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24173,
        24186
      ],
      "filename": "format.js",
      "lineno": 644,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003858",
        "name": "siKey",
        "type": "MemberExpression",
        "value": "si[0]"
      }
    },
    "undocumented": true,
    "name": "siKey",
    "longname": "module:format.compactNumber~siKey",
    "kind": "constant",
    "memberof": "module:format.compactNumber",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Converts a value to a String, <br />\n * Or returns `otherwise` if any exceptions are found.\n * \n * @param {any} val - value to convert\n * @param {any} otherwise - value to use if any exceptions are caught\n * @returns {String} - `String(val)`\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive|toPrimitive}\n * @returns {String}\n * @example\n * utils.format.safeConvertString(23); // '23'\n * \n * const customObj = {\n *  toString: () => `String Value`\n * };\n * utils.format.safeConvertString(customObj); // 'String Value'\n */",
    "meta": {
      "range": [
        24836,
        25000
      ],
      "filename": "format.js",
      "lineno": 666,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003874",
        "name": "module.exports.safeConvertString",
        "type": "FunctionExpression",
        "value": "safeConvertString",
        "paramnames": [
          "val",
          "otherwise"
        ]
      }
    },
    "description": "Converts a value to a String, <br />\nOr returns `otherwise` if any exceptions are found.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to convert",
        "name": "val"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to use if any exceptions are caught",
        "name": "otherwise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "- `String(val)`"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "see": [
      "{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive|toPrimitive}"
    ],
    "examples": [
      "utils.format.safeConvertString(23); // '23'\n\nconst customObj = {\n toString: () => `String Value`\n};\nutils.format.safeConvertString(customObj); // 'String Value'"
    ],
    "name": "safeConvertString",
    "longname": "module:format.safeConvertString",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "/**\n * Converts a value to a Floating Number, <br />\n * Or returns `otherwise` if any exceptions are found or value is NaN\n * \n * @param {any} val - value to convert\n * @param {any} otherwise - value to use if any exceptions are caught\n * @returns {Number}\n * @example\n * utils.format.safeConvertFloat('23.1'); // 23.1\n * utils.format.safeConvertFloat('not a number', -1); // -1\n */",
    "meta": {
      "range": [
        25386,
        25958
      ],
      "filename": "format.js",
      "lineno": 685,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003897",
        "name": "module.exports.safeConvertFloat",
        "type": "FunctionExpression",
        "value": "safeConvertFloat",
        "paramnames": [
          "val",
          "otherwise"
        ]
      },
      "vars": {
        "val": "module:format~val",
        "result": "module:format.safeConvertFloat~result"
      }
    },
    "description": "Converts a value to a Floating Number, <br />\nOr returns `otherwise` if any exceptions are found or value is NaN",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to convert",
        "name": "val"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to use if any exceptions are caught",
        "name": "otherwise"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.safeConvertFloat('23.1'); // 23.1\nutils.format.safeConvertFloat('not a number', -1); // -1"
    ],
    "name": "safeConvertFloat",
    "longname": "module:format.safeConvertFloat",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25629,
        25662
      ],
      "filename": "format.js",
      "lineno": 689,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003917",
        "name": "val",
        "type": "CallExpression",
        "funcscope": "module:format.safeConvertFloat",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "module:format~val",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25687,
        25718
      ],
      "filename": "format.js",
      "lineno": 693,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003928",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format.safeConvertFloat~result",
    "kind": "constant",
    "memberof": "module:format.safeConvertFloat",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Converts a value to a Floating Number, <br />\n * Or returns `otherwise` if any exceptions are found or value is Not a Number.\n * \n * @param {any} val - value to convert\n * @param {any} otherwise - value to use if any exceptions are caught\n * @param {Number} [radix = 10] - radix to use in converting the string\n * @returns {Number}\n * @example\n * utils.format.safeConvertFloat('23'); // 23\n * utils.format.safeConvertFloat('not a number', -1); // -1\n */",
    "meta": {
      "range": [
        26422,
        27015
      ],
      "filename": "format.js",
      "lineno": 717,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003950",
        "name": "module.exports.safeConvertInteger",
        "type": "FunctionExpression",
        "value": "safeConvertInteger",
        "paramnames": [
          "val",
          "otherwise",
          "radix"
        ]
      },
      "vars": {
        "val": "module:format~val",
        "result": "module:format.safeConvertInteger~result"
      }
    },
    "description": "Converts a value to a Floating Number, <br />\nOr returns `otherwise` if any exceptions are found or value is Not a Number.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to convert",
        "name": "val"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to use if any exceptions are caught",
        "name": "otherwise"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 10,
        "description": "radix to use in converting the string",
        "name": "radix"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.safeConvertFloat('23'); // 23\nutils.format.safeConvertFloat('not a number', -1); // -1"
    ],
    "name": "safeConvertInteger",
    "longname": "module:format.safeConvertInteger",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26681,
        26714
      ],
      "filename": "format.js",
      "lineno": 721,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003973",
        "name": "val",
        "type": "CallExpression",
        "funcscope": "module:format.safeConvertInteger",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "module:format~val",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26739,
        26775
      ],
      "filename": "format.js",
      "lineno": 725,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100003984",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format.safeConvertInteger~result",
    "kind": "constant",
    "memberof": "module:format.safeConvertInteger",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Converts a value to boolean.\n * \n * Note this uses the standard JavaScript `truthy` conversion,\n * but with special exceptions for strings: only 'true', 'yes', '1' are considered true.\n * \n * @param {any} val - value to be converted\n * @returns {Boolean}\n * @example\n * utils.format.safeConvertBoolean(1); // true\n * utils.format.safeConvertBoolean({ pojo: true }); // true\n * utils.format.safeConvertBoolean('TruE'); // true - case insensitive\n * utils.format.safeConvertBoolean('YeS'); // true - case insensitive\n * utils.format.safeConvertBoolean('1'); // true\n * \n * utils.format.safeConvertBoolean(0); // false\n * utils.format.safeConvertBoolean(null); // false\n * utils.format.safeConvertBoolean('false'); // false\n * utils.format.safeConvertBoolean('No'); // false\n * utils.format.safeConvertBoolean('0'); // false\n */",
    "meta": {
      "range": [
        27851,
        28103
      ],
      "filename": "format.js",
      "lineno": 758,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004007",
        "name": "module.exports.safeConvertBoolean",
        "type": "FunctionExpression",
        "value": "safeConvertBoolean",
        "paramnames": [
          "val"
        ]
      },
      "vars": {
        "valUpper": "module:format.safeConvertBoolean~valUpper"
      }
    },
    "description": "Converts a value to boolean.\n\nNote this uses the standard JavaScript `truthy` conversion,\nbut with special exceptions for strings: only 'true', 'yes', '1' are considered true.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to be converted",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        }
      }
    ],
    "examples": [
      "utils.format.safeConvertBoolean(1); // true\nutils.format.safeConvertBoolean({ pojo: true }); // true\nutils.format.safeConvertBoolean('TruE'); // true - case insensitive\nutils.format.safeConvertBoolean('YeS'); // true - case insensitive\nutils.format.safeConvertBoolean('1'); // true\n\nutils.format.safeConvertBoolean(0); // false\nutils.format.safeConvertBoolean(null); // false\nutils.format.safeConvertBoolean('false'); // false\nutils.format.safeConvertBoolean('No'); // false\nutils.format.safeConvertBoolean('0'); // false"
    ],
    "name": "safeConvertBoolean",
    "longname": "module:format.safeConvertBoolean",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27965,
        27993
      ],
      "filename": "format.js",
      "lineno": 760,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004024",
        "name": "valUpper",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "valUpper",
    "longname": "module:format.safeConvertBoolean~valUpper",
    "kind": "constant",
    "memberof": "module:format.safeConvertBoolean",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28106,
        28573
      ],
      "filename": "format.js",
      "lineno": 766,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004048",
        "name": "module.exports.parseCommand",
        "type": "FunctionExpression",
        "value": "parseCommand",
        "paramnames": [
          "commandStr"
        ]
      },
      "vars": {
        "match": "module:format.parseCommand~match",
        "result": "module:format~result",
        "commandArgs": "module:format.parseCommand~commandArgs",
        "": null
      }
    },
    "undocumented": true,
    "name": "parseCommand",
    "longname": "module:format.parseCommand",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28262,
        28315
      ],
      "filename": "format.js",
      "lineno": 771,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004074",
        "name": "match",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "match",
    "longname": "module:format.parseCommand~match",
    "kind": "constant",
    "memberof": "module:format.parseCommand",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28323,
        28334
      ],
      "filename": "format.js",
      "lineno": 772,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004082",
        "name": "result",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format.parseCommand~result",
    "kind": "member",
    "memberof": "module:format.parseCommand",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28362,
        28448
      ],
      "filename": "format.js",
      "lineno": 775,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004089",
        "name": "commandArgs",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "commandArgs",
    "longname": "module:format.parseCommand~commandArgs",
    "kind": "constant",
    "memberof": "module:format.parseCommand",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28454,
        28511
      ],
      "filename": "format.js",
      "lineno": 776,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004118",
        "name": "result",
        "type": "ArrayExpression",
        "funcscope": "module:format.parseCommand",
        "value": "[\"\",\"commandArgs\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28528,
        28549
      ],
      "filename": "format.js",
      "lineno": 781,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004130",
        "name": "result",
        "type": "ArrayExpression",
        "funcscope": "module:format.parseCommand",
        "value": "[\"commandStr\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format~result",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:format"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28576,
        30307
      ],
      "filename": "format.js",
      "lineno": 786,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004137",
        "name": "module.exports.prepareFormatterObject",
        "type": "FunctionExpression",
        "value": "prepareFormatterObject",
        "paramnames": [
          "formatterObject"
        ]
      },
      "vars": {
        "translationKeys": "module:format.prepareFormatterObject~translationKeys",
        "result": "module:format.prepareFormatterObject~result",
        "": null
      }
    },
    "undocumented": true,
    "name": "prepareFormatterObject",
    "longname": "module:format.prepareFormatterObject",
    "kind": "function",
    "memberof": "module:format",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29088,
        29146
      ],
      "filename": "format.js",
      "lineno": 794,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004162",
        "name": "translationKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "translationKeys",
    "longname": "module:format.prepareFormatterObject~translationKeys",
    "kind": "constant",
    "memberof": "module:format.prepareFormatterObject",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29157,
        29190
      ],
      "filename": "format.js",
      "lineno": 796,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004174",
        "name": "result",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:format.prepareFormatterObject~result",
    "kind": "constant",
    "memberof": "module:format.prepareFormatterObject",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29240,
        29277
      ],
      "filename": "format.js",
      "lineno": 799,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004188",
        "name": "translationVal",
        "type": "MemberExpression",
        "value": "formatterObject[undefined]"
      }
    },
    "undocumented": true,
    "name": "translationVal",
    "longname": "<anonymous>~translationVal",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29289,
        29331
      ],
      "filename": "format.js",
      "lineno": 800,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004194",
        "name": "translationValType",
        "type": "UnaryExpression",
        "value": "typeoftranslationVal"
      }
    },
    "undocumented": true,
    "name": "translationValType",
    "longname": "<anonymous>~translationValType",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29569,
        29612
      ],
      "filename": "format.js",
      "lineno": 806,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004225",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "value": "FormatUtils.safeConvertString",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "member",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29743,
        29801
      ],
      "filename": "format.js",
      "lineno": 808,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004250",
        "name": "result[undefined]",
        "type": "ArrowFunctionExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "paramnames": [
          "str"
        ]
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "function",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29875,
        29917
      ],
      "filename": "format.js",
      "lineno": 810,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004274",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "value": "FormatUtils.safeConvertFloat",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "member",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29990,
        30034
      ],
      "filename": "format.js",
      "lineno": 812,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004291",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "value": "FormatUtils.safeConvertInteger",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "member",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30108,
        30152
      ],
      "filename": "format.js",
      "lineno": 814,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004308",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "value": "FormatUtils.safeConvertBoolean",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "member",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30177,
        30211
      ],
      "filename": "format.js",
      "lineno": 816,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004317",
        "name": "result[undefined]",
        "type": "ArrowFunctionExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "function",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30240,
        30274
      ],
      "filename": "format.js",
      "lineno": 819,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004325",
        "name": "result[undefined]",
        "type": "ArrowFunctionExpression",
        "funcscope": "module:format.prepareFormatterObject",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:format.prepareFormatterObject~result.undefined]",
    "kind": "function",
    "memberof": "module:format.prepareFormatterObject~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6,
        40
      ],
      "filename": "group.js",
      "lineno": 1,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004336",
        "name": "SourceMap",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "SourceMap",
    "longname": "SourceMap",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        49,
        82
      ],
      "filename": "group.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004342",
        "name": "ObjectUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ObjectUtils",
    "longname": "ObjectUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Utilities for collating and grouping records\n * \n * * Creating Groups of records\n *   * {@link module:group.by|group.by(collection, field, field, ...)} - group arrays by common values - for further reduction, etc.\n *   * {@link module:group.separateByFields|group.separateByFields(collection, field, field)} - duplicate collections by fields (useful for charting)\n * * Indexing records by a unique key\n *   * {@link module:group.index|group.index(collection, field)} - create a map of records by a unique field (helpful for joining records)\n * * Reducing Collections of records\n *   * {@link module:group.rollup|group.rollup(collection, field)} - group and \"reduce\" to aggregate a collection of records\n * \n * Please also see:\n * \n * * {@link SourceMap} - as it is the result from {@link module:group.by|group.by()}\n * * {@link module:aggregate|aggregate} - a collection of utilities to aggregate / reduce records.\n * \n * See {@link https://stackoverflow.com/questions/31412537/numpy-like-package-for-node|this stackoverflow}\n * for someone asking why couldn't {@link https://numpy.org/doc/stable/user/quickstart.html|Numpy} be written in JavaScript;\n * \n * * D3, specifically: [group / rollup / index](https://observablehq.com/@d3/d3-group)\n * and [flatGroup / flatRollup](https://observablehq.com/@d3/d3-flatgroup)\n * \n * * {@link https://danfo.jsdata.org/|DanfoJS} - a js library heavily inspired by\n * {@link https://pandas.pydata.org/pandas-docs/stable/index.html|Pandas}\n * so someone familiar with Pandas can get up to speed very quickly\n * \n * * {@link https://gmousse.gitbooks.io/dataframe-js/|dataframe-js} -\n * provides an immutable data structure for DataFrames\n * which allows to work on rows and columns with a sql\n * and functional programming inspired api.\n * \n * * {@link https://github.com/stdlib-js/stdlib|StdLib} - \n * is a great library that compiles down to C/C++ level to provide speeds comparable to Numpy.\n * \n * * {@link https://www.npmjs.com/package/numjs | NumJS}\n * is also a great number processing library.\n * It may not be as fast as StdLib, but it can sometimes be easier to use.\n * \n * @module group\n * @exports group\n */",
    "meta": {
      "filename": "group.js",
      "lineno": 5,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utilities for collating and grouping records\n\n* Creating Groups of records\n  * {@link module:group.by|group.by(collection, field, field, ...)} - group arrays by common values - for further reduction, etc.\n  * {@link module:group.separateByFields|group.separateByFields(collection, field, field)} - duplicate collections by fields (useful for charting)\n* Indexing records by a unique key\n  * {@link module:group.index|group.index(collection, field)} - create a map of records by a unique field (helpful for joining records)\n* Reducing Collections of records\n  * {@link module:group.rollup|group.rollup(collection, field)} - group and \"reduce\" to aggregate a collection of records\n\nPlease also see:\n\n* {@link SourceMap} - as it is the result from {@link module:group.by|group.by()}\n* {@link module:aggregate|aggregate} - a collection of utilities to aggregate / reduce records.\n\nSee {@link https://stackoverflow.com/questions/31412537/numpy-like-package-for-node|this stackoverflow}\nfor someone asking why couldn't {@link https://numpy.org/doc/stable/user/quickstart.html|Numpy} be written in JavaScript;\n\n* D3, specifically: [group / rollup / index](https://observablehq.com/@d3/d3-group)\nand [flatGroup / flatRollup](https://observablehq.com/@d3/d3-flatgroup)\n\n* {@link https://danfo.jsdata.org/|DanfoJS} - a js library heavily inspired by\n{@link https://pandas.pydata.org/pandas-docs/stable/index.html|Pandas}\nso someone familiar with Pandas can get up to speed very quickly\n\n* {@link https://gmousse.gitbooks.io/dataframe-js/|dataframe-js} -\nprovides an immutable data structure for DataFrames\nwhich allows to work on rows and columns with a sql\nand functional programming inspired api.\n\n* {@link https://github.com/stdlib-js/stdlib|StdLib} - \nis a great library that compiles down to C/C++ level to provide speeds comparable to Numpy.\n\n* {@link https://www.npmjs.com/package/numjs | NumJS}\nis also a great number processing library.\nIt may not be as fast as StdLib, but it can sometimes be easier to use.",
    "kind": "module",
    "name": "group",
    "alias": "group",
    "longname": "module:group"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2248,
        2267
      ],
      "filename": "group.js",
      "lineno": 46,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004348",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:group",
    "longname": "module:group",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2275,
        2302
      ],
      "filename": "group.js",
      "lineno": 47,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004354",
        "name": "GroupUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "GroupUtils",
    "longname": "module:group~GroupUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:group",
    "params": []
  },
  {
    "comment": "/**\n * Group a collection into multiple levels of maps.\n * \n * @param {Array} collection - Array of objects or two dimensional array\n * @param {String|Number} key - the key to group the collection by\n * @param {...String} key - the additional keys to group the collection by\n * @returns {SourceMap} - collection of results with the source as the key used for that level\n * \n * For example:\n * \n * ```\n * initializeWeather = () => [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n * ];\n * weather = initializeWeather();\n * \n * utils.group.by(weather, 'city')\n * ```\n * \n * // provides\n * \n * ```\n * SourceMap(3) [Map] {\n *   'Seattle' => [\n *     { id: 1, city: 'Seattle', month: 'Aug', precip: 0.87 },\n *     { id: 0, city: 'Seattle', month: 'Apr', precip: 2.68 },\n *     { id: 2, city: 'Seattle', month: 'Dec', precip: 5.31 }\n *   ],\n *   'New York' => [\n *     { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *     { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n *     { id: 5, city: 'New York', month: 'Dec', precip: 3.58 }\n *   ],\n *   'Chicago' => [\n *     { id: 6, city: 'Chicago', month: 'Apr', precip: 3.62 },\n *     { id: 8, city: 'Chicago', month: 'Dec', precip: 2.56 },\n *     { id: 7, city: 'Chicago', month: 'Aug', precip: 3.98 }\n *   ],\n *   source: 'city'\n * }\n * ```\n * \n * or using multiple groups:\n * `utils.group.by(weather, 'month', 'city')`\n * \n * provides:\n * \n * ```\n * SourceMap(3) [Map] {\n *   'Aug' => SourceMap(3) [Map] {\n *     'Seattle' => [ [Object] ],\n *     'New York' => [ [Object] ],\n *     'Chicago' => [ [Object] ],\n *     source: 'city'\n *   },\n *   'Apr' => SourceMap(3) [Map] {\n *     'Seattle' => [ [Object] ],\n *     'New York' => [ [Object] ],\n *     'Chicago' => [ [Object] ],\n *     source: 'city'\n *   },\n *   'Dec' => SourceMap(3) [Map] {\n *     'Seattle' => [ [Object] ],\n *     'New York' => [ [Object] ],\n *     'Chicago' => [ [Object] ],\n *     source: 'city'\n *   },\n *   source: 'month'\n * }\n```\n */",
    "meta": {
      "range": [
        4787,
        5584
      ],
      "filename": "group.js",
      "lineno": 128,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004360",
        "name": "module.exports.by",
        "type": "FunctionExpression",
        "value": "by",
        "paramnames": [
          "collection",
          "prop",
          "rest"
        ]
      },
      "vars": {
        "resultMap": "module:group.by~resultMap",
        "resultMap.source": "module:group.by~resultMap.source",
        "": null
      }
    },
    "description": "Group a collection into multiple levels of maps.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Array of objects or two dimensional array",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "String",
            "Number"
          ]
        },
        "description": "the key to group the collection by",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "the additional keys to group the collection by",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "- collection of results with the source as the key used for that level\n\nFor example:\n\n```\ninitializeWeather = () => [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nweather = initializeWeather();\n\nutils.group.by(weather, 'city')\n```\n\n// provides\n\n```\nSourceMap(3) [Map] {\n  'Seattle' => [\n    { id: 1, city: 'Seattle', month: 'Aug', precip: 0.87 },\n    { id: 0, city: 'Seattle', month: 'Apr', precip: 2.68 },\n    { id: 2, city: 'Seattle', month: 'Dec', precip: 5.31 }\n  ],\n  'New York' => [\n    { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n    { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n    { id: 5, city: 'New York', month: 'Dec', precip: 3.58 }\n  ],\n  'Chicago' => [\n    { id: 6, city: 'Chicago', month: 'Apr', precip: 3.62 },\n    { id: 8, city: 'Chicago', month: 'Dec', precip: 2.56 },\n    { id: 7, city: 'Chicago', month: 'Aug', precip: 3.98 }\n  ],\n  source: 'city'\n}\n```\n\nor using multiple groups:\n`utils.group.by(weather, 'month', 'city')`\n\nprovides:\n\n```\nSourceMap(3) [Map] {\n  'Aug' => SourceMap(3) [Map] {\n    'Seattle' => [ [Object] ],\n    'New York' => [ [Object] ],\n    'Chicago' => [ [Object] ],\n    source: 'city'\n  },\n  'Apr' => SourceMap(3) [Map] {\n    'Seattle' => [ [Object] ],\n    'New York' => [ [Object] ],\n    'Chicago' => [ [Object] ],\n    source: 'city'\n  },\n  'Dec' => SourceMap(3) [Map] {\n    'Seattle' => [ [Object] ],\n    'New York' => [ [Object] ],\n    'Chicago' => [ [Object] ],\n    source: 'city'\n  },\n  source: 'month'\n}\n```"
      }
    ],
    "name": "by",
    "longname": "module:group.by",
    "kind": "function",
    "memberof": "module:group",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4856,
        4883
      ],
      "filename": "group.js",
      "lineno": 129,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004374",
        "name": "resultMap",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resultMap",
    "longname": "module:group.by~resultMap",
    "kind": "constant",
    "memberof": "module:group.by",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5028,
        5051
      ],
      "filename": "group.js",
      "lineno": 134,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004400",
        "name": "resultMap.source",
        "type": "Identifier",
        "funcscope": "module:group.by",
        "value": "prop",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "source",
    "longname": "module:group.by~resultMap.source",
    "kind": "member",
    "memberof": "module:group.by~resultMap",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5102,
        5118
      ],
      "filename": "group.js",
      "lineno": 137,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004415",
        "name": "val",
        "type": "MemberExpression",
        "value": "item[undefined]"
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "<anonymous>~val",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5158,
        5181
      ],
      "filename": "group.js",
      "lineno": 140,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004426",
        "name": "val",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "module:group~val",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:group"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5433,
        5467
      ],
      "filename": "group.js",
      "lineno": 153,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004480",
        "name": "newCollection",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "newCollection",
    "longname": "<anonymous>~newCollection",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Group and \"Reduce\" a collection of records.\n * \n * (Similar to {@link https://observablehq.com/@d3/d3-group|d3 - rollup})\n * \n * @param {Array} collection - Collection to be rolled up\n * @param {Function} reducer - {(Array) => any} Function to reduce the group of records down\n * @param {String} prop - The property on the objects to group by\n * @param  {...any} fields - Additional fields to group by\n * @returns {SourceMap} - a reduced sourceMap, where only the leaves of the groups are reduced\n * @see {@link SourceMap#map} - Used to reduce or filter records\n * @see {@link module:group.by|group.by(collection, fields, ...)} - to group records\n * \n * @example\n * const data = [\n * weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, dateTime: new Date(2020, 7, 1)  , year: 2020},\n *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31, dateTime: new Date(2020, 11, 1) , year: 2020},\n *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68, dateTime: new Date(2021, 3, 1)  , year: 2021},\n *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13, dateTime: new Date(2020, 7, 1)  , year: 2020},\n *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58, dateTime: new Date(2020, 11, 1) , year: 2020},\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94, dateTime: new Date(2021, 3, 1)  , year: 2021},\n *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98, dateTime: new Date(2020, 7, 1)  , year: 2020},\n *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56, dateTime: new Date(2020, 11, 1) , year: 2020},\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, dateTime: new Date(2021, 3, 1)  , year: 2021}\n * ];\n * \n * utils.group.rollup(weather, (collection) => collection.length, 'city')\n * \n * // SourceMap(3) [Map] {\n * //   'Seattle' => 3,\n * //   'New York' => 3,\n * //   'Chicago' => 3,\n * //   source: 'city'\n * // }\n * \n * utils.group.rollup(weather, r => r.length, 'city', 'year')\n * \n * //  SourceMap(3) [Map] {\n * //   'Seattle' => SourceMap(2) [Map] { 2020 => 2, 2021 => 1, source: 'year' },\n * //   'New York' => SourceMap(2) [Map] { 2021 => 1, 2020 => 2, source: 'year' },\n * //   'Chicago' => SourceMap(2) [Map] { 2021 => 1, 2020 => 2, source: 'year' },\n * //   source: 'city'\n * // }\n */",
    "meta": {
      "range": [
        7851,
        8017
      ],
      "filename": "group.js",
      "lineno": 206,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004507",
        "name": "module.exports.rollup",
        "type": "FunctionExpression",
        "value": "rollup",
        "paramnames": [
          "collection",
          "reducer",
          "prop",
          "fields"
        ]
      }
    },
    "description": "Group and \"Reduce\" a collection of records.\n\n(Similar to {@link https://observablehq.com/@d3/d3-group|d3 - rollup})",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Collection to be rolled up",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "{(Array) => any} Function to reduce the group of records down",
        "name": "reducer"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The property on the objects to group by",
        "name": "prop"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "variable": true,
        "description": "Additional fields to group by",
        "name": "fields"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "- a reduced sourceMap, where only the leaves of the groups are reduced"
      }
    ],
    "see": [
      "{@link SourceMap#map} - Used to reduce or filter records",
      "{@link module:group.by|group.by(collection, fields, ...)} - to group records"
    ],
    "examples": [
      "const data = [\nweather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68, dateTime: new Date(2021, 3, 1)  , year: 2021},\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94, dateTime: new Date(2021, 3, 1)  , year: 2021},\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, dateTime: new Date(2021, 3, 1)  , year: 2021}\n];\n\nutils.group.rollup(weather, (collection) => collection.length, 'city')\n\n// SourceMap(3) [Map] {\n//   'Seattle' => 3,\n//   'New York' => 3,\n//   'Chicago' => 3,\n//   source: 'city'\n// }\n\nutils.group.rollup(weather, r => r.length, 'city', 'year')\n\n//  SourceMap(3) [Map] {\n//   'Seattle' => SourceMap(2) [Map] { 2020 => 2, 2021 => 1, source: 'year' },\n//   'New York' => SourceMap(2) [Map] { 2021 => 1, 2020 => 2, source: 'year' },\n//   'Chicago' => SourceMap(2) [Map] { 2021 => 1, 2020 => 2, source: 'year' },\n//   source: 'city'\n// }"
    ],
    "name": "rollup",
    "longname": "module:group.rollup",
    "kind": "function",
    "memberof": "module:group",
    "scope": "static"
  },
  {
    "comment": "/**\n * Vega needs the series on separate objects.\n * \n * Each object then made per group leaf collection, preserving the groups used to make it.\n * \n * The object generated by the function is then merged.\n * \n * @example\n * aggregateWeather = utils.group.by(weather, 'city')\n *   .reduce((group) => ({\n *     min: utils.agg.min(group, 'precip'),\n *     max: utils.agg.max(group, 'precip'),\n *     avg: utils.agg.avgMean(group, 'precip')\n *   }));\n * \n * //-- gives\n * \n * [\n *   { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953 },\n *   { city: 'New York', min: 3.58, max: 4.13, avg: 3.883 },\n *   { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387 }\n * ]\n * \n * separateByFields(aggregateWeather, 'min', 'max', 'avg')\n * \n * //-- gives\n * [\n *   { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953,  _field: 'min', _value: 0.87 },\n *   { city: 'New York', min: 3.58, max: 4.13, avg: 3.883, _field: 'min', _value: 3.58 },\n *   { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387,  _field: 'min', _value: 2.56 },\n *   { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953,  _field: 'max', _value: 5.31 },\n *   { city: 'New York', min: 3.58, max: 4.13, avg: 3.883, _field: 'max', _value: 4.13 },\n *   { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387,  _field: 'max', _value: 3.98},\n *   ...\n * ]\n * \n * @TODO - Vega needs series on separate records\n * @param {Array} collection - array of objects\n * @param  {...any} fields - string field name to separate by\n * @returns {Array}\n */",
    "meta": {
      "range": [
        9505,
        9954
      ],
      "filename": "group.js",
      "lineno": 252,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004539",
        "name": "module.exports.separateByFields",
        "type": "FunctionExpression",
        "value": "separateByFields",
        "paramnames": [
          "collection",
          "fields"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Vega needs the series on separate objects.\n\nEach object then made per group leaf collection, preserving the groups used to make it.\n\nThe object generated by the function is then merged.",
    "examples": [
      "aggregateWeather = utils.group.by(weather, 'city')\n  .reduce((group) => ({\n    min: utils.agg.min(group, 'precip'),\n    max: utils.agg.max(group, 'precip'),\n    avg: utils.agg.avgMean(group, 'precip')\n  }));\n\n//-- gives\n\n[\n  { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953 },\n  { city: 'New York', min: 3.58, max: 4.13, avg: 3.883 },\n  { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387 }\n]\n\nseparateByFields(aggregateWeather, 'min', 'max', 'avg')\n\n//-- gives\n[\n  { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953,  _field: 'min', _value: 0.87 },\n  { city: 'New York', min: 3.58, max: 4.13, avg: 3.883, _field: 'min', _value: 3.58 },\n  { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387,  _field: 'min', _value: 2.56 },\n  { city: 'Seattle', min: 0.87, max: 5.31, avg: 2.953,  _field: 'max', _value: 5.31 },\n  { city: 'New York', min: 3.58, max: 4.13, avg: 3.883, _field: 'max', _value: 4.13 },\n  { city: 'Chicago', min: 2.56, max: 3.98, avg: 3.387,  _field: 'max', _value: 3.98},\n  ...\n]"
    ],
    "todo": [
      "- Vega needs series on separate records"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "array of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "variable": true,
        "description": "string field name to separate by",
        "name": "fields"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "name": "separateByFields",
    "longname": "module:group.separateByFields",
    "kind": "function",
    "memberof": "module:group",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9913,
        9926
      ],
      "filename": "group.js",
      "lineno": 259,
      "columnno": 70,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004603",
        "name": "_field",
        "type": "Identifier",
        "value": "field"
      }
    },
    "undocumented": true,
    "name": "_field",
    "longname": "module:group~_field",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:group"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9928,
        9946
      ],
      "filename": "group.js",
      "lineno": 259,
      "columnno": 85,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004605",
        "name": "_value",
        "type": "MemberExpression",
        "value": "obj[undefined]"
      }
    },
    "undocumented": true,
    "name": "_value",
    "longname": "module:group~_value",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:group"
  },
  {
    "comment": "/**\n * Index a collection of records to a map based on a specific value.\n * \n * Unlike group.by, only one indexing function is accepted.\n * \n * This is very helpful for joining records of two separate groups.\n * \n * @param {Array} collection - Collection of objects to index by a specific field or value\n * @param {Function | String} indexFn - the propert name or function evaluating to a value for the index\n * @returns {Map}\n * \n * @example\n * athletes = [\n *   {name: \"Neymar\", sport: \"Soccer\", nation: \"Brazil\", earnings: 90},\n *   {name: \"LeBron James\", sport: \"Basketball\", nation: \"United States\",  earnings: 85.5},\n *   {name: \"Roger Federer\", sport: \"Tennis\", nation: \"Switzerland\", earnings: 77.2},\n * ];\n * \n * facts = [\n *   {about: \"Neymar\", fact: \"Neymar is Neymar da Silva Santos Júnior\"},\n *   {about: \"Roger Federer\", fact: \"Federer has won 20 Grand Slam men's singles titles\"},\n *   {about: \"Megan Rapinoe\", fact: \"Rapinoe was named The Best FIFA Women's Player in 2019\"}\n * ];\n * \n * athletesByName = utils.group.index(athletes, 'name');\n * facts.map(({about: name, ...rest}) => ({...rest, name, ...athletesByName.get(name)}))\n * \n * // [\n * //   {\n * //     fact: 'Neymar is Neymar da Silva Santos Júnior',\n * //     name: 'Neymar', sport: 'Soccer', nation: 'Brazil', earnings: 90\n * //   },\n * //   {\n * //     fact: \"Federer has won 20 Grand Slam men's singles titles\",\n * //     name: 'Roger Federer', sport: 'Tennis', nation: 'Switzerland', earnings: 77.2\n * //   },\n * //   //-- not found\n * //   {\n * //     fact: \"Rapinoe was named The Best FIFA Women's Player in 2019\",\n * //     name: 'Megan Rapinoe'\n * //   }\n * // ]\n */",
    "meta": {
      "range": [
        11609,
        12288
      ],
      "filename": "group.js",
      "lineno": 305,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004610",
        "name": "module.exports.index",
        "type": "FunctionExpression",
        "value": "index",
        "paramnames": [
          "collection",
          "indexFn"
        ]
      },
      "vars": {
        "resultMap": "module:group.index~resultMap",
        "cleanedIndexFn": "module:group.index~cleanedIndexFn",
        "": null
      }
    },
    "description": "Index a collection of records to a map based on a specific value.\n\nUnlike group.by, only one indexing function is accepted.\n\nThis is very helpful for joining records of two separate groups.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Collection of objects to index by a specific field or value",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "the propert name or function evaluating to a value for the index",
        "name": "indexFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Map"
          ]
        }
      }
    ],
    "examples": [
      "athletes = [\n  {name: \"Neymar\", sport: \"Soccer\", nation: \"Brazil\", earnings: 90},\n  {name: \"LeBron James\", sport: \"Basketball\", nation: \"United States\",  earnings: 85.5},\n  {name: \"Roger Federer\", sport: \"Tennis\", nation: \"Switzerland\", earnings: 77.2},\n];\n\nfacts = [\n  {about: \"Neymar\", fact: \"Neymar is Neymar da Silva Santos Júnior\"},\n  {about: \"Roger Federer\", fact: \"Federer has won 20 Grand Slam men's singles titles\"},\n  {about: \"Megan Rapinoe\", fact: \"Rapinoe was named The Best FIFA Women's Player in 2019\"}\n];\n\nathletesByName = utils.group.index(athletes, 'name');\nfacts.map(({about: name, ...rest}) => ({...rest, name, ...athletesByName.get(name)}))\n\n// [\n//   {\n//     fact: 'Neymar is Neymar da Silva Santos Júnior',\n//     name: 'Neymar', sport: 'Soccer', nation: 'Brazil', earnings: 90\n//   },\n//   {\n//     fact: \"Federer has won 20 Grand Slam men's singles titles\",\n//     name: 'Roger Federer', sport: 'Tennis', nation: 'Switzerland', earnings: 77.2\n//   },\n//   //-- not found\n//   {\n//     fact: \"Rapinoe was named The Best FIFA Women's Player in 2019\",\n//     name: 'Megan Rapinoe'\n//   }\n// ]"
    ],
    "name": "index",
    "longname": "module:group.index",
    "kind": "function",
    "memberof": "module:group",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11678,
        11699
      ],
      "filename": "group.js",
      "lineno": 306,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004622",
        "name": "resultMap",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "resultMap",
    "longname": "module:group.index~resultMap",
    "kind": "constant",
    "memberof": "module:group.index",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11854,
        11918
      ],
      "filename": "group.js",
      "lineno": 311,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004648",
        "name": "cleanedIndexFn",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedIndexFn",
    "longname": "module:group.index~cleanedIndexFn",
    "kind": "constant",
    "memberof": "module:group.index",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11970,
        12004
      ],
      "filename": "group.js",
      "lineno": 314,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004665",
        "name": "val",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "<anonymous>~val",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12044,
        12067
      ],
      "filename": "group.js",
      "lineno": 317,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004677",
        "name": "val",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "val",
    "longname": "module:group~val",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:group"
  },
  {
    "comment": "/**\n * Internal collection of JavaScript code\n * that is used by HTML Script.\n * \n * (Such as for Leaflet, or Vega, etc.)\n * \n * They should still be tested,\n * but it seems that making them accessible\n * (since they will never actually be called by node\n * - only pushed to the browser)\n * they should be put here to avoid polluting the interface. \n * @private\n */",
    "meta": {
      "range": [
        416,
        435
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 16,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004719",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "description": "Internal collection of JavaScript code\nthat is used by HTML Script.\n\n(Such as for Leaflet, or Vega, etc.)\n\nThey should still be tested,\nbut it seems that making them accessible\n(since they will never actually be called by node\n- only pushed to the browser)\nthey should be put here to avoid polluting the interface.",
    "access": "private",
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        437,
        473
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 17,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004725",
        "name": "InternalHtmlScripts",
        "type": "MemberExpression",
        "value": "module.exports",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "InternalHtmlScripts",
    "longname": "InternalHtmlScripts",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n * JavaScript side function for when the embedFromSpec is Ready\n * @private\n */",
    "meta": {
      "range": [
        560,
        709
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 23,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004731",
        "name": "module.exports.embedFromSpecOnReady",
        "type": "FunctionExpression",
        "value": "embedFromSpecOnReady",
        "paramnames": [
          ""
        ]
      },
      "vars": {
        "yourVlSpec": "embedFromSpecOnReady~yourVlSpec"
      }
    },
    "description": "JavaScript side function for when the embedFromSpec is Ready",
    "access": "private",
    "name": "embedFromSpecOnReady",
    "longname": "embedFromSpecOnReady",
    "kind": "function",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        630,
        636
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 23,
      "columnno": 70,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004740",
        "name": "rootEl",
        "type": "Identifier",
        "value": "rootEl"
      }
    },
    "undocumented": true,
    "name": "rootEl",
    "longname": "rootEl",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        638,
        642
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 23,
      "columnno": 78,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004742",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        656,
        673
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 24,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004746",
        "name": "yourVlSpec",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "yourVlSpec",
    "longname": "embedFromSpecOnReady~yourVlSpec",
    "kind": "constant",
    "memberof": "embedFromSpecOnReady",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Code executed by JavaScript - not node\n * @private\n */",
    "meta": {
      "range": [
        774,
        1200
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 32,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004755",
        "name": "module.exports.leafletMarkersOnReady",
        "type": "FunctionExpression",
        "value": "leafletMarkersOnReady",
        "paramnames": [
          ""
        ]
      },
      "vars": {
        "markerData": "leafletMarkersOnReady~markerData",
        "mapMarkers": "leafletMarkersOnReady~mapMarkers",
        "": null,
        "markerGroup": "leafletMarkersOnReady~markerGroup"
      }
    },
    "description": "Code executed by JavaScript - not node",
    "access": "private",
    "name": "leafletMarkersOnReady",
    "longname": "leafletMarkersOnReady",
    "kind": "function",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        846,
        849
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 32,
      "columnno": 72,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004764",
        "name": "map",
        "type": "Identifier",
        "value": "map"
      }
    },
    "undocumented": true,
    "name": "map",
    "longname": "map",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        851,
        858
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 32,
      "columnno": 77,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004766",
        "name": "leaflet",
        "type": "Identifier",
        "value": "leaflet"
      }
    },
    "undocumented": true,
    "name": "leaflet",
    "longname": "leaflet",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        860,
        864
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 32,
      "columnno": 86,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004768",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        878,
        895
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 33,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004772",
        "name": "markerData",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "markerData",
    "longname": "leafletMarkersOnReady~markerData",
    "kind": "constant",
    "memberof": "leafletMarkersOnReady",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        944,
        1088
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 36,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004776",
        "name": "mapMarkers",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "mapMarkers",
    "longname": "leafletMarkersOnReady~mapMarkers",
    "kind": "constant",
    "memberof": "leafletMarkersOnReady",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1099,
        1145
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 40,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004805",
        "name": "markerGroup",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "markerGroup",
    "longname": "leafletMarkersOnReady~markerGroup",
    "kind": "constant",
    "memberof": "leafletMarkersOnReady",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * JavaScript side 'onReady' function once katex.js has finished loading.\n * @see {@link module:ijs.htmlScript}\n * @private\n */",
    "meta": {
      "range": [
        1335,
        2143
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 50,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004826",
        "name": "module.exports.katexRenderOnReady",
        "type": "FunctionExpression",
        "value": "katexRenderOnReady",
        "paramnames": [
          ""
        ]
      },
      "vars": {
        "undefined": null,
        "window.WebFontConfig": "window.WebFontConfig",
        "": null
      }
    },
    "description": "JavaScript side 'onReady' function once katex.js has finished loading.",
    "see": [
      "{@link module:ijs.htmlScript}"
    ],
    "access": "private",
    "name": "katexRenderOnReady",
    "longname": "katexRenderOnReady",
    "kind": "function",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1401,
        1407
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 50,
      "columnno": 66,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004835",
        "name": "rootEl",
        "type": "Identifier",
        "value": "rootEl"
      }
    },
    "undocumented": true,
    "name": "rootEl",
    "longname": "rootEl",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1409,
        1413
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 50,
      "columnno": 74,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004837",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1433,
        1443
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 52,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004843",
        "name": "expression",
        "type": "Identifier",
        "value": "expression"
      }
    },
    "undocumented": true,
    "name": "expression",
    "longname": "expression",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1449,
        1461
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 53,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004845",
        "name": "katexOptions",
        "type": "Identifier",
        "value": "katexOptions"
      }
    },
    "undocumented": true,
    "name": "katexOptions",
    "longname": "katexOptions",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1532,
        1869
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 57,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004857",
        "name": "window.WebFontConfig",
        "type": "ObjectExpression",
        "value": "{\"custom\":\"\"}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "WebFontConfig",
    "longname": "window.WebFontConfig",
    "kind": "member",
    "memberof": "window",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1563,
        1863
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 58,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004862",
        "name": "custom",
        "type": "ObjectExpression",
        "value": "{\"families\":\"\"}"
      }
    },
    "undocumented": true,
    "name": "custom",
    "longname": "window.WebFontConfig.custom",
    "kind": "member",
    "memberof": "window.WebFontConfig",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1581,
        1854
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 59,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004864",
        "name": "families",
        "type": "ArrayExpression",
        "value": "[\"KaTeX_AMS\",\"KaTeX_Caligraphic:n4,n7\",\"KaTeX_Fraktur:n4,n7\",\"KaTeX_Main:n4,n7,i4,i7\",\"KaTeX_Math:i4,i7\",\"KaTeX_Script\",\"KaTeX_SansSerif:n4,n7,i4\",\"KaTeX_Size1\",\"KaTeX_Size2\",\"KaTeX_Size3\",\"KaTeX_Size4\",\"KaTeX_Typewriter\"]"
      }
    },
    "undocumented": true,
    "name": "families",
    "longname": "window.WebFontConfig.custom.families",
    "kind": "member",
    "memberof": "window.WebFontConfig.custom",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1904,
        1941
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 67,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004884",
        "name": "wf",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "wf",
    "longname": "<anonymous>~wf",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1949,
        2026
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 68,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004892",
        "name": "wf.src",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": "https://cdn.jsdelivr.net/npm/webfontloader@1.6.28/webfontloader.js",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "src",
    "longname": "<anonymous>~wf.src",
    "kind": "member",
    "memberof": "<anonymous>~wf",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2034,
        2049
      ],
      "filename": "htmlScript_internal.js",
      "lineno": 69,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004898",
        "name": "wf.async",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": true,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "async",
    "longname": "<anonymous>~wf.async",
    "kind": "member",
    "memberof": "<anonymous>~wf",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        92,
        117
      ],
      "filename": "ijs.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004921",
        "name": "uuid",
        "type": "MemberExpression",
        "value": ".v4"
      }
    },
    "undocumented": true,
    "name": "uuid",
    "longname": "uuid",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Simple library to support working within the [iJavaScript kernel within Jupyter](https://github.com/n-riesco/ijavascript)\n * \n * Note that this is available as `ijs` from within the\n * [jupyter-ijavascript-utils module](./index.html)\n * \n * * Asynchronous Methods\n *   * {@link module:ijs.await|ijs.await} - Helper function to support Await / Async functions in iJavaScript\n *   * {@link module:ijs.asyncConsole|ijs.asyncConsole} - Utility function for consoling a value in a .then() clause\n *   * {@link module:ijs.asyncWait|ijs.asyncWait} - Utility function for waiting x seconds between promise resolutions\n * * iJavaScript Context Detection\n *   * {@link module:ijs.detectIJS|ijs.detectIJS} - Detect if we are within iJavaScript context\n *   * {@link module:ijs.detectContext|ijs.detectContext} - Identify the $$ and console variables of the current cell\n * * Introspection\n *   * {@link module:ijs.listGlobals|ijs.listGlobals} - List global variables\n *   * {@link module:ijs.listStatic|ijs.listStatic} - List the static values on a class\n * * Rendering\n *   * {@link module:ijs.markdown|ijs.markdown} - Render output as markdown\n *   * {@link module:ijs.htmlScript|ijs.htmlScript} - Leverage external libraries like D3, Leaflet, etc.\n * \n * For example:\n * \n * ```\n * //-- get the data\n * //-- fetch the data\n * //-- and do not execute the next cell until received.\n * utils.ijs.await(async ($$, console) => {\n *  barley = await utils.datasets.fetch('barley.json');\n * })\n * ```\n * \n * ```\n * //-- use the data as though it was synchronously received\n * \n * //-- get the min max of the types of barley\n * barleyByVarietySite = d3.group(barley, d => d.variety, d => d.site)\n * //-- now group by variety and year\n * barleyByVarietyYear = d3.group(barley, d => d.variety, d => d.year)\n * ```\n * \n * then later\n * \n * ```\n * utils.ijs.listGlobals();\n * // ['barley','d3','barleyByVariety','barleyByVarietySite',...]\n * ```\n * \n * Or passing NodeJS variables to JavaScript\n * \n * ({@link module:ijs.htmlScript|See ijs.htmlScript for more})\n * ```\n * utils.ijs.htmlScript({\n *     scripts: ['https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js'],\n *     height: '100%',\n *     onReady: ({rootEl}) => {\n *         new QRCode(rootEl, \"https://jupyter-ijavascript-utils.onrender.com/\");\n *     }\n * });\n * ```\n * \n * ![Screenshot of QR Code](img/htmlScript_qrCode.png)\n * \n * @module ijs\n * @exports ijs\n */",
    "meta": {
      "filename": "ijs.js",
      "lineno": 7,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Simple library to support working within the [iJavaScript kernel within Jupyter](https://github.com/n-riesco/ijavascript)\n\nNote that this is available as `ijs` from within the\n[jupyter-ijavascript-utils module](./index.html)\n\n* Asynchronous Methods\n  * {@link module:ijs.await|ijs.await} - Helper function to support Await / Async functions in iJavaScript\n  * {@link module:ijs.asyncConsole|ijs.asyncConsole} - Utility function for consoling a value in a .then() clause\n  * {@link module:ijs.asyncWait|ijs.asyncWait} - Utility function for waiting x seconds between promise resolutions\n* iJavaScript Context Detection\n  * {@link module:ijs.detectIJS|ijs.detectIJS} - Detect if we are within iJavaScript context\n  * {@link module:ijs.detectContext|ijs.detectContext} - Identify the $$ and console variables of the current cell\n* Introspection\n  * {@link module:ijs.listGlobals|ijs.listGlobals} - List global variables\n  * {@link module:ijs.listStatic|ijs.listStatic} - List the static values on a class\n* Rendering\n  * {@link module:ijs.markdown|ijs.markdown} - Render output as markdown\n  * {@link module:ijs.htmlScript|ijs.htmlScript} - Leverage external libraries like D3, Leaflet, etc.\n\nFor example:\n\n```\n//-- get the data\n//-- fetch the data\n//-- and do not execute the next cell until received.\nutils.ijs.await(async ($$, console) => {\n barley = await utils.datasets.fetch('barley.json');\n})\n```\n\n```\n//-- use the data as though it was synchronously received\n\n//-- get the min max of the types of barley\nbarleyByVarietySite = d3.group(barley, d => d.variety, d => d.site)\n//-- now group by variety and year\nbarleyByVarietyYear = d3.group(barley, d => d.variety, d => d.year)\n```\n\nthen later\n\n```\nutils.ijs.listGlobals();\n// ['barley','d3','barleyByVariety','barleyByVarietySite',...]\n```\n\nOr passing NodeJS variables to JavaScript\n\n({@link module:ijs.htmlScript|See ijs.htmlScript for more})\n```\nutils.ijs.htmlScript({\n    scripts: ['https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js'],\n    height: '100%',\n    onReady: ({rootEl}) => {\n        new QRCode(rootEl, \"https://jupyter-ijavascript-utils.onrender.com/\");\n    }\n});\n```\n\n![Screenshot of QR Code](img/htmlScript_qrCode.png)",
    "kind": "module",
    "name": "ijs",
    "alias": "ijs",
    "longname": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2577,
        2596
      ],
      "filename": "ijs.js",
      "lineno": 72,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004933",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:ijs",
    "longname": "module:ijs",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2604,
        2629
      ],
      "filename": "ijs.js",
      "lineno": 73,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004939",
        "name": "IJSUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "module:ijs~IJSUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:ijs",
    "params": []
  },
  {
    "comment": "/**\n * Set with names of common global variables that aren't needed to be listed.\n * @see #.listGlobals\n * @private\n */",
    "meta": {
      "range": [
        2752,
        2980
      ],
      "filename": "ijs.js",
      "lineno": 80,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004945",
        "name": "module.exports.COMMON_GLOBALS",
        "type": "NewExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Set with names of common global variables that aren't needed to be listed.",
    "see": [
      "#.listGlobals"
    ],
    "access": "private",
    "name": "COMMON_GLOBALS",
    "longname": "module:ijs.COMMON_GLOBALS",
    "kind": "member",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * Set with names of static methods that often belong to a class.\n * @see #.listStatic\n * @private\n */",
    "meta": {
      "range": [
        3090,
        3161
      ],
      "filename": "ijs.js",
      "lineno": 90,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004968",
        "name": "module.exports.COMMON_STATIC",
        "type": "NewExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Set with names of static methods that often belong to a class.",
    "see": [
      "#.listStatic"
    ],
    "access": "private",
    "name": "COMMON_STATIC",
    "longname": "module:ijs.COMMON_STATIC",
    "kind": "member",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * Allow for asynchronous programming within iJavaScript nodes.\n * \n * * see [iJavaScript Async option docs](https://n-riesco.github.io/ijavascript/doc/async.ipynb.html)\n * * see [iJavaScript issue #73](https://github.com/n-riesco/ijavascript/issues/73)\n * * see [iJavaScript issue #173](https://github.com/n-riesco/ijavascript/issues/173)\n * \n * ![Screenshot](img/IJS_awaitBarley.png)\n * @example\n * \n * utils.ijs.await(async ($$, console) => {\n *    //-- $$ is the display for the current cell\n *    //-- console is the console for the current cell\n *    \n *    barley = await utils.datasets.fetch('barley.json');\n *    \n *    console.log(`retrieved:${barley.length} nodes`);\n * \n *    // return will be the value sent to $$.sendResults()\n *    // and shown alongside console\n *    return barley.slice(0,1)\n * })\n * \n * //-- outputs\n * \n * retrieved:120 nodes\n * \n * [\n *  {\n *    yield: 27,\n *    variety: 'Manchuria',\n *    year: 1931,\n *    site: 'University Farm'\n *  }\n * ]\n */",
    "meta": {
      "range": [
        4153,
        4639
      ],
      "filename": "ijs.js",
      "lineno": 128,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004981",
        "name": "module.exports.await",
        "type": "FunctionExpression",
        "value": "ijsAsync",
        "paramnames": [
          "fn"
        ]
      },
      "vars": {
        "context": "module:ijs.await~context",
        "results": "module:ijs.await~results"
      }
    },
    "description": "Allow for asynchronous programming within iJavaScript nodes.\n\n* see [iJavaScript Async option docs](https://n-riesco.github.io/ijavascript/doc/async.ipynb.html)\n* see [iJavaScript issue #73](https://github.com/n-riesco/ijavascript/issues/73)\n* see [iJavaScript issue #173](https://github.com/n-riesco/ijavascript/issues/173)\n\n![Screenshot](img/IJS_awaitBarley.png)",
    "examples": [
      "utils.ijs.await(async ($$, console) => {\n   //-- $$ is the display for the current cell\n   //-- console is the console for the current cell\n   \n   barley = await utils.datasets.fetch('barley.json');\n   \n   console.log(`retrieved:${barley.length} nodes`);\n\n   // return will be the value sent to $$.sendResults()\n   // and shown alongside console\n   return barley.slice(0,1)\n})\n\n//-- outputs\n\nretrieved:120 nodes\n\n[\n {\n   yield: 27,\n   variety: 'Manchuria',\n   year: 1931,\n   site: 'University Farm'\n }\n]"
    ],
    "name": "await",
    "longname": "module:ijs.await",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4214,
        4248
      ],
      "filename": "ijs.js",
      "lineno": 129,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100004992",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:ijs.await~context",
    "kind": "constant",
    "memberof": "module:ijs.await",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4422,
        4469
      ],
      "filename": "ijs.js",
      "lineno": 138,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005016",
        "name": "results",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:ijs.await~results",
    "kind": "constant",
    "memberof": "module:ijs.await",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Simple promise chain for sending a console message\n * @param {String} message - the message to be sent to console\n * @returns {Function} - (results) => results passthrough\n * \n * @example\n * \n * Promise.resolve(200)\n *  .then(utils.ijs.asyncWait(2))\n *  .then(utils.ijs.asyncConsole('after waiting for 2 seconds'))\n *  .then((results) => console.log('results passed through: ${results}`));\n * \n * //--\n * after waiting for 2 seconds\n * results passed through: 200\n */",
    "meta": {
      "range": [
        5117,
        5245
      ],
      "filename": "ijs.js",
      "lineno": 163,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005061",
        "name": "module.exports.asyncConsole",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "messages"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Simple promise chain for sending a console message",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the message to be sent to console",
        "name": "message"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "- (results) => results passthrough"
      }
    ],
    "examples": [
      "Promise.resolve(200)\n .then(utils.ijs.asyncWait(2))\n .then(utils.ijs.asyncConsole('after waiting for 2 seconds'))\n .then((results) => console.log('results passed through: ${results}`));\n\n//--\nafter waiting for 2 seconds\nresults passed through: 200"
    ],
    "name": "asyncConsole",
    "longname": "module:ijs.asyncConsole",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * Simple promise chain for waiting N seconds.\n * @param {Number} seconds - the number of seconds to wait\n * @returns {Function} - (results) => results passthrough\n * \n * @example\n * \n * Promise.resolve(200)\n *  .then(utils.ijs.asyncConsole('before waiting for 2 seconds'))\n *  .then(utils.ijs.asyncWait(2))\n *  .then(utils.ijs.asyncConsole('after waiting for 2 seconds'))\n *  .then((results) => console.log('results passed through: ${results}`));\n * \n * //--\n * before waiting for 2 seconds\n * after waiting for 2 seconds\n * results passed through: 200\n */",
    "meta": {
      "range": [
        5810,
        5977
      ],
      "filename": "ijs.js",
      "lineno": 186,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005087",
        "name": "module.exports.asyncWait",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "seconds"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Simple promise chain for waiting N seconds.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the number of seconds to wait",
        "name": "seconds"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "- (results) => results passthrough"
      }
    ],
    "examples": [
      "Promise.resolve(200)\n .then(utils.ijs.asyncConsole('before waiting for 2 seconds'))\n .then(utils.ijs.asyncWait(2))\n .then(utils.ijs.asyncConsole('after waiting for 2 seconds'))\n .then((results) => console.log('results passed through: ${results}`));\n\n//--\nbefore waiting for 2 seconds\nafter waiting for 2 seconds\nresults passed through: 200"
    ],
    "name": "asyncWait",
    "longname": "module:ijs.asyncWait",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * Determines the current global display and console from iJavaScript\n * (or null if not within iJavaScript)\n * @returns {IJavaScriptContext} - ({ display, console }) or null if not within iJavaScript\n */",
    "meta": {
      "range": [
        6189,
        6460
      ],
      "filename": "ijs.js",
      "lineno": 199,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005116",
        "name": "module.exports.detectContext",
        "type": "FunctionExpression",
        "value": "detectContext",
        "paramnames": []
      }
    },
    "description": "Determines the current global display and console from iJavaScript\n(or null if not within iJavaScript)",
    "returns": [
      {
        "type": {
          "names": [
            "IJavaScriptContext"
          ]
        },
        "description": "- ({ display, console }) or null if not within iJavaScript"
      }
    ],
    "name": "detectContext",
    "longname": "module:ijs.detectContext",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6387,
        6400
      ],
      "filename": "ijs.js",
      "lineno": 208,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005144",
        "name": "$$",
        "type": "MemberExpression",
        "value": "global.$$"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:ijs~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6406,
        6424
      ],
      "filename": "ijs.js",
      "lineno": 209,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005148",
        "name": "display",
        "type": "MemberExpression",
        "value": "global.$$"
      }
    },
    "undocumented": true,
    "name": "display",
    "longname": "module:ijs~display",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6430,
        6453
      ],
      "filename": "ijs.js",
      "lineno": 210,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005152",
        "name": "console",
        "type": "MemberExpression",
        "value": "global.console"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:ijs~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "/**\n * Determines if we are currently within the iJavaScript context\n * @returns {Boolean} - true if the code is running within an iJavaScript kernel\n */",
    "meta": {
      "range": [
        6617,
        6718
      ],
      "filename": "ijs.js",
      "lineno": 218,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005157",
        "name": "module.exports.detectIJS",
        "type": "FunctionExpression",
        "value": "detectIJS",
        "paramnames": []
      }
    },
    "description": "Determines if we are currently within the iJavaScript context",
    "returns": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "- true if the code is running within an iJavaScript kernel"
      }
    ],
    "name": "detectIJS",
    "longname": "module:ijs.detectIJS",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * Prints markdown if in the context of iJavaScript.\n * \n * This can be deceptively helpful, as it allows your text to be data driven:\n * \n * ![Screenshot of markdown](img/ijsMarkdown.png)\n * \n * @param {String} markdownText - The markdown to be rendered\n * @example\n * \n * utils.ijs.markdown(`# Overview\n * This is markdown rendered in a cell.`);\n */",
    "meta": {
      "range": [
        7077,
        7285
      ],
      "filename": "ijs.js",
      "lineno": 235,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005175",
        "name": "module.exports.markdown",
        "type": "FunctionExpression",
        "value": "markdown",
        "paramnames": [
          "markdownText",
          "display"
        ]
      },
      "vars": {
        "displayToUse": "module:ijs.markdown~displayToUse"
      }
    },
    "description": "Prints markdown if in the context of iJavaScript.\n\nThis can be deceptively helpful, as it allows your text to be data driven:\n\n![Screenshot of markdown](img/ijsMarkdown.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "The markdown to be rendered",
        "name": "markdownText"
      }
    ],
    "examples": [
      "utils.ijs.markdown(`# Overview\nThis is markdown rendered in a cell.`);"
    ],
    "name": "markdown",
    "longname": "module:ijs.markdown",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7191,
        7226
      ],
      "filename": "ijs.js",
      "lineno": 237,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005194",
        "name": "displayToUse",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "displayToUse",
    "longname": "module:ijs.markdown~displayToUse",
    "kind": "constant",
    "memberof": "module:ijs.markdown",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7250,
        7279
      ],
      "filename": "ijs.js",
      "lineno": 238,
      "columnno": 22,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005207",
        "name": "\"text/markdown\"",
        "type": "Identifier",
        "value": "markdownText"
      }
    },
    "undocumented": true,
    "name": "\"text/markdown\"",
    "longname": "module:ijs~\"text/markdown\"",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "/**\n * List the globals currently defined.\n * \n * This can be very useful when keeping track of values after a few cells.\n * \n * For example:\n * \n * ```\n * cars = utils.datasets.fetch('cars.json').then(data => global.cars = data);\n * ```\n * \n * then later\n * \n * ```\n * utils.ijs.listGlobals();\n * // cars\n * ```\n * \n * @returns {String[]} - list of the global variables\n * @see #.COMMON_GLOBALS\n */",
    "meta": {
      "range": [
        7688,
        7829
      ],
      "filename": "ijs.js",
      "lineno": 262,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005210",
        "name": "module.exports.listGlobals",
        "type": "FunctionExpression",
        "value": "listGlobals",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "List the globals currently defined.\n\nThis can be very useful when keeping track of values after a few cells.\n\nFor example:\n\n```\ncars = utils.datasets.fetch('cars.json').then(data => global.cars = data);\n```\n\nthen later\n\n```\nutils.ijs.listGlobals();\n// cars\n```",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "- list of the global variables"
      }
    ],
    "see": [
      "#.COMMON_GLOBALS"
    ],
    "name": "listGlobals",
    "longname": "module:ijs.listGlobals",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "/**\n * List the static members and functions of a class.\n * \n * @param {class} target - the target class\n * @returns {StaticMember[]} \n * @see #.COMMON_STATIC\n * \n * @example\n * \n * utils.ijs.listStatic(utils.ijs)\n * // [{type:'function', constructor:'Function', isMethod:true, name:'listStatic'}, ...]\n */",
    "meta": {
      "range": [
        8139,
        8612
      ],
      "filename": "ijs.js",
      "lineno": 279,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005239",
        "name": "module.exports.listStatic",
        "type": "FunctionExpression",
        "value": "listStatic",
        "paramnames": [
          "target"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "List the static members and functions of a class.",
    "params": [
      {
        "type": {
          "names": [
            "class"
          ]
        },
        "description": "the target class",
        "name": "target"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<StaticMember>"
          ]
        }
      }
    ],
    "see": [
      "#.COMMON_STATIC"
    ],
    "examples": [
      "utils.ijs.listStatic(utils.ijs)\n// [{type:'function', constructor:'Function', isMethod:true, name:'listStatic'}, ...]"
    ],
    "name": "listStatic",
    "longname": "module:ijs.listStatic",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8358,
        8388
      ],
      "filename": "ijs.js",
      "lineno": 285,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005280",
        "name": "propType",
        "type": "UnaryExpression",
        "value": "typeoftarget[undefined]"
      }
    },
    "undocumented": true,
    "name": "propType",
    "longname": "<anonymous>~propType",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8402,
        8445
      ],
      "filename": "ijs.js",
      "lineno": 286,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005287",
        "name": "constructor",
        "type": "MemberExpression",
        "value": "target[undefined].constructor.name"
      }
    },
    "undocumented": true,
    "name": "constructor",
    "longname": "<anonymous>~constructor",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8459,
        8493
      ],
      "filename": "ijs.js",
      "lineno": 287,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005297",
        "name": "isMethod",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "isMethod",
    "longname": "<anonymous>~isMethod",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8519,
        8533
      ],
      "filename": "ijs.js",
      "lineno": 289,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005304",
        "name": "type",
        "type": "Identifier",
        "value": "propType"
      }
    },
    "undocumented": true,
    "name": "type",
    "longname": "module:ijs~type",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8543,
        8554
      ],
      "filename": "ijs.js",
      "lineno": 290,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005306",
        "name": "constructor",
        "type": "Identifier",
        "value": "constructor"
      }
    },
    "undocumented": true,
    "name": "constructor",
    "longname": "module:ijs~constructor",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8564,
        8572
      ],
      "filename": "ijs.js",
      "lineno": 291,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005308",
        "name": "isMethod",
        "type": "Identifier",
        "value": "isMethod"
      }
    },
    "undocumented": true,
    "name": "isMethod",
    "longname": "module:ijs~isMethod",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8582,
        8592
      ],
      "filename": "ijs.js",
      "lineno": 292,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005310",
        "name": "name",
        "type": "Identifier",
        "value": "prop"
      }
    },
    "undocumented": true,
    "name": "name",
    "longname": "module:ijs~name",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "/**\n * Generates and renders an html block that loads external css and javascript.\n * \n * **For example, allows running browser side {@link https://d3js.org/|d3js} in a Jupyter cell, {@link https://leafletjs.com/|Leaflet}, etc.**\n * \n * Remember, your cells in Jupyter are running in NodeJS.\n * \n * Once all the files have loaded, then `onReady` will execute in JavaScript.\n * \n * Note that only the function in onReady is executed in JavaScript\n * (i.e. Data from other cells in Jupyter would normally not be available).\n * \n * If data is needed from jupyter, pass them through `options.data`. (ex: airportData example below)\n * \n * **For More - See the {@tutorial htmlScript} tutorial.**\n * \n * # Example\n * \n * For example {@link https://github.com/davidshimjs/qrcodejs|using a cdn library for qr codes}\n * \n * ```\n * utils.ijs.htmlScript({\n *     scripts: ['https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js'],\n *     height: '100%',\n *     onReady: ({rootEl}) => {\n *         new QRCode(rootEl, \"https://jupyter-ijavascript-utils.onrender.com/\");\n *     }\n * });\n * ```\n * \n * ![Screenshot of QR Code](img/htmlScript_qrCode.png)\n * \n * Or working with {@link https://leafletjs.com/|Leaflet - to show maps}\n * \n * ```\n * //-- nodeJS Variable\n * airportData = { ohareORD: { lat: 41.975813, lon: -87.909428, title: \"O'Hare Intl Airport\" } };\n * //-- render out html\n * utils.ijs.htmlScript({\n *     scripts: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.js',\n *               'https://unpkg.com/leaflet-providers@1.13.0/leaflet-providers.js'],\n *     css: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'],\n *     data: airportData,\n *     height: 150,\n *     //-- function will be executed in javaScript\n *     onReady: ({rootEl, data}) => {\n *         // L is globally available from the leaflet.js script.\n *         \n *         //-- capture the nodeJS data and use in JavaScript. Neat!\n *         ohareORD = data.ohareORD;\n * \n *         map = L.map(rootEl);\n *         map.setView([ohareORD.lat, ohareORD.lon], 14);\n *         \n *         new L.marker([ohareORD.lat, ohareORD.lon]).bindPopup(ohareORD.title).addTo(map);\n *         \n *         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n *            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n *         }).addTo(map);\n *     }\n * });\n * ```\n * \n * ![Screenshot of Leaflet](img/htmlScript_leaflet.png)\n * \n * @param {Object} options - additional options available during rendering\n * @param {String | Function} options.onReady - JavaScript to run once all files have loaded\n * @param {Element} options.onReady.rootEl - results div container\n * @param {any} [options.onReady.data] - the options.data parameter\n * @param {Object} options.onReady.utilityFunctions - the options.utilityFunctions object\n * @param {Object} options.onReady.options - the options object passed\n * @param {Object} options.onReady.animate - alias to requestAnimationFrame with additional checks to avoid leaks\n * @param {String[]} [options.scripts = []] - Array of JavaScript file addresses to load\n * @param {String[]} [options.css = []] - Array of CSS file addresses to load\n * @param {any} [options.data = undefined] - any nodejs data you would like available in javaScript\n * @param {String} [options.html = ''] - html elements to include within the result\n * @param {String | Number} [options.width = '100%'] - width of the div container (ex: 400 or '400px')\n * @param {String | Number} [options.height = '200px'] - height of the div container (ex: 200 or '200px')\n * @param {Boolean} [options.debug = false] - whether to incude a `debugger` breakpoint (once scripts are loaded)\n * @param {Boolean} [options.console = true] - whether to include console statements\n */",
    "meta": {
      "range": [
        12426,
        18676
      ],
      "filename": "ijs.js",
      "lineno": 378,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005313",
        "name": "module.exports.htmlScript",
        "type": "FunctionExpression",
        "value": "htmlScripts",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "context": "module:ijs.htmlScript~context",
        "options": "module:ijs~options",
        "undefined": null,
        "validKeys": "module:ijs.htmlScript~validKeys",
        "sentOptions": "module:ijs.htmlScript~sentOptions",
        "invalidOptions": "module:ijs.htmlScript~invalidOptions",
        "": null,
        "utilityFunctionStr": "module:ijs.htmlScript~utilityFunctionStr",
        "width": "module:ijs~width",
        "height": "module:ijs~height",
        "scriptAddresses": "module:ijs~scriptAddresses",
        "stylesheetAddresses": "module:ijs~stylesheetAddresses",
        "onReadyCode": "module:ijs~onReadyCode",
        "rootUUID": "module:ijs~rootUUID",
        "generateCSS": "module:ijs.htmlScript~generateCSS",
        "cssCode": "module:ijs.htmlScript~cssCode",
        "results": "module:ijs~results"
      }
    },
    "description": "Generates and renders an html block that loads external css and javascript.\n\n**For example, allows running browser side {@link https://d3js.org/|d3js} in a Jupyter cell, {@link https://leafletjs.com/|Leaflet}, etc.**\n\nRemember, your cells in Jupyter are running in NodeJS.\n\nOnce all the files have loaded, then `onReady` will execute in JavaScript.\n\nNote that only the function in onReady is executed in JavaScript\n(i.e. Data from other cells in Jupyter would normally not be available).\n\nIf data is needed from jupyter, pass them through `options.data`. (ex: airportData example below)\n\n**For More - See the {@tutorial htmlScript} tutorial.**\n\n# Example\n\nFor example {@link https://github.com/davidshimjs/qrcodejs|using a cdn library for qr codes}\n\n```\nutils.ijs.htmlScript({\n    scripts: ['https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js'],\n    height: '100%',\n    onReady: ({rootEl}) => {\n        new QRCode(rootEl, \"https://jupyter-ijavascript-utils.onrender.com/\");\n    }\n});\n```\n\n![Screenshot of QR Code](img/htmlScript_qrCode.png)\n\nOr working with {@link https://leafletjs.com/|Leaflet - to show maps}\n\n```\n//-- nodeJS Variable\nairportData = { ohareORD: { lat: 41.975813, lon: -87.909428, title: \"O'Hare Intl Airport\" } };\n//-- render out html\nutils.ijs.htmlScript({\n    scripts: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.js',\n              'https://unpkg.com/leaflet-providers@1.13.0/leaflet-providers.js'],\n    css: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'],\n    data: airportData,\n    height: 150,\n    //-- function will be executed in javaScript\n    onReady: ({rootEl, data}) => {\n        // L is globally available from the leaflet.js script.\n        \n        //-- capture the nodeJS data and use in JavaScript. Neat!\n        ohareORD = data.ohareORD;\n\n        map = L.map(rootEl);\n        map.setView([ohareORD.lat, ohareORD.lon], 14);\n        \n        new L.marker([ohareORD.lat, ohareORD.lon]).bindPopup(ohareORD.title).addTo(map);\n        \n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n           attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n    }\n});\n```\n\n![Screenshot of Leaflet](img/htmlScript_leaflet.png)",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "additional options available during rendering",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String",
            "function"
          ]
        },
        "description": "JavaScript to run once all files have loaded",
        "name": "options.onReady"
      },
      {
        "type": {
          "names": [
            "Element"
          ]
        },
        "description": "results div container",
        "name": "options.onReady.rootEl"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "description": "the options.data parameter",
        "name": "options.onReady.data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options.utilityFunctions object",
        "name": "options.onReady.utilityFunctions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options object passed",
        "name": "options.onReady.options"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "alias to requestAnimationFrame with additional checks to avoid leaks",
        "name": "options.onReady.animate"
      },
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "optional": true,
        "defaultvalue": "[]",
        "description": "Array of JavaScript file addresses to load",
        "name": "options.scripts"
      },
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "optional": true,
        "defaultvalue": "[]",
        "description": "Array of CSS file addresses to load",
        "name": "options.css"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "description": "any nodejs data you would like available in javaScript",
        "name": "options.data"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "html elements to include within the result",
        "name": "options.html"
      },
      {
        "type": {
          "names": [
            "String",
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": "'100%'",
        "description": "width of the div container (ex: 400 or '400px')",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "String",
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": "'200px'",
        "description": "height of the div container (ex: 200 or '200px')",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "whether to incude a `debugger` breakpoint (once scripts are loaded)",
        "name": "options.debug"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "whether to include console statements",
        "name": "options.console"
      }
    ],
    "name": "htmlScript",
    "longname": "module:ijs.htmlScript",
    "kind": "function",
    "memberof": "module:ijs",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12553,
        12587
      ],
      "filename": "ijs.js",
      "lineno": 382,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005324",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:ijs.htmlScript~context",
    "kind": "constant",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12719,
        12731
      ],
      "filename": "ijs.js",
      "lineno": 387,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005342",
        "name": "options",
        "type": "ObjectExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "options",
    "longname": "module:ijs~options",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12748,
        12774
      ],
      "filename": "ijs.js",
      "lineno": 390,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005348",
        "name": "debug",
        "type": "AssignmentPattern",
        "value": "renderDebug"
      }
    },
    "undocumented": true,
    "name": "debug",
    "longname": "module:ijs~debug",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12780,
        12809
      ],
      "filename": "ijs.js",
      "lineno": 391,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005352",
        "name": "console",
        "type": "AssignmentPattern",
        "value": "renderConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:ijs~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12815,
        12824
      ],
      "filename": "ijs.js",
      "lineno": 392,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005356",
        "name": "html",
        "type": "AssignmentPattern",
        "value": "html"
      }
    },
    "undocumented": true,
    "name": "html",
    "longname": "module:ijs~html",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12830,
        12834
      ],
      "filename": "ijs.js",
      "lineno": 393,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005360",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:ijs~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12840,
        12861
      ],
      "filename": "ijs.js",
      "lineno": 394,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005362",
        "name": "utilityFunctions",
        "type": "AssignmentPattern",
        "value": "utilityFunctions"
      }
    },
    "undocumented": true,
    "name": "utilityFunctions",
    "longname": "module:ijs~utilityFunctions",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12890,
        12895
      ],
      "filename": "ijs.js",
      "lineno": 398,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005370",
        "name": "width",
        "type": "Identifier",
        "value": "width"
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:ijs~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12901,
        12907
      ],
      "filename": "ijs.js",
      "lineno": 399,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005372",
        "name": "height",
        "type": "Identifier",
        "value": "height"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:ijs~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12913,
        12927
      ],
      "filename": "ijs.js",
      "lineno": 400,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005374",
        "name": "uuid",
        "type": "Identifier",
        "value": "rootUUID"
      }
    },
    "undocumented": true,
    "name": "uuid",
    "longname": "module:ijs~uuid",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12933,
        12957
      ],
      "filename": "ijs.js",
      "lineno": 401,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005376",
        "name": "scripts",
        "type": "Identifier",
        "value": "scriptAddresses"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:ijs~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12963,
        12987
      ],
      "filename": "ijs.js",
      "lineno": 402,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005378",
        "name": "css",
        "type": "Identifier",
        "value": "stylesheetAddresses"
      }
    },
    "undocumented": true,
    "name": "css",
    "longname": "module:ijs~css",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12993,
        13013
      ],
      "filename": "ijs.js",
      "lineno": 403,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005380",
        "name": "onReady",
        "type": "Identifier",
        "value": "onReadyCode"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:ijs~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13082,
        13222
      ],
      "filename": "ijs.js",
      "lineno": 407,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005384",
        "name": "validKeys",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "validKeys",
    "longname": "module:ijs.htmlScript~validKeys",
    "kind": "constant",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13232,
        13266
      ],
      "filename": "ijs.js",
      "lineno": 410,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005401",
        "name": "sentOptions",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "sentOptions",
    "longname": "module:ijs.htmlScript~sentOptions",
    "kind": "constant",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13276,
        13337
      ],
      "filename": "ijs.js",
      "lineno": 411,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005409",
        "name": "invalidOptions",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "invalidOptions",
    "longname": "module:ijs.htmlScript~invalidOptions",
    "kind": "constant",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13560,
        13583
      ],
      "filename": "ijs.js",
      "lineno": 417,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005446",
        "name": "utilityFunctionStr",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "utilityFunctionStr",
    "longname": "module:ijs.htmlScript~utilityFunctionStr",
    "kind": "member",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13984,
        14072
      ],
      "filename": "ijs.js",
      "lineno": 426,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005490",
        "name": "utilityFunctionStr",
        "type": "TemplateLiteral",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "utilityFunctionStr",
    "longname": "module:ijs~utilityFunctionStr",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14107,
        14121
      ],
      "filename": "ijs.js",
      "lineno": 431,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005508",
        "name": "width",
        "type": "Literal",
        "funcscope": "module:ijs.htmlScript",
        "value": "100%",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:ijs~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14169,
        14189
      ],
      "filename": "ijs.js",
      "lineno": 433,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005518",
        "name": "width",
        "type": "TemplateLiteral",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:ijs~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14216,
        14232
      ],
      "filename": "ijs.js",
      "lineno": 436,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005529",
        "name": "height",
        "type": "Literal",
        "funcscope": "module:ijs.htmlScript",
        "value": "200px",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:ijs~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14281,
        14303
      ],
      "filename": "ijs.js",
      "lineno": 438,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005539",
        "name": "height",
        "type": "TemplateLiteral",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:ijs~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14340,
        14360
      ],
      "filename": "ijs.js",
      "lineno": 442,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005550",
        "name": "scriptAddresses",
        "type": "ArrayExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "[]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "scriptAddresses",
    "longname": "module:ijs~scriptAddresses",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14400,
        14424
      ],
      "filename": "ijs.js",
      "lineno": 445,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005558",
        "name": "stylesheetAddresses",
        "type": "ArrayExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "[]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "stylesheetAddresses",
    "longname": "module:ijs~stylesheetAddresses",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14818,
        14913
      ],
      "filename": "ijs.js",
      "lineno": 456,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005576",
        "name": "onReadyCode",
        "type": "TemplateLiteral",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "onReadyCode",
    "longname": "module:ijs~onReadyCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14967,
        14999
      ],
      "filename": "ijs.js",
      "lineno": 458,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005592",
        "name": "onReadyCode",
        "type": "CallExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "onReadyCode",
    "longname": "module:ijs~onReadyCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15045,
        15063
      ],
      "filename": "ijs.js",
      "lineno": 460,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005607",
        "name": "onReadyCode",
        "type": "Literal",
        "funcscope": "module:ijs.htmlScript",
        "value": ";",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "onReadyCode",
    "longname": "module:ijs~onReadyCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15262,
        15279
      ],
      "filename": "ijs.js",
      "lineno": 468,
      "columnno": 17,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005619",
        "name": "rootUUID",
        "type": "CallExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "rootUUID",
    "longname": "module:ijs~rootUUID",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15290,
        15439
      ],
      "filename": "ijs.js",
      "lineno": 470,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005624",
        "name": "generateCSS",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "generateCSS",
    "longname": "module:ijs.htmlScript~generateCSS",
    "kind": "function",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15587,
        15702
      ],
      "filename": "ijs.js",
      "lineno": 482,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005637",
        "name": "cssCode",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cssCode",
    "longname": "module:ijs.htmlScript~cssCode",
    "kind": "constant",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15750,
        18497
      ],
      "filename": "ijs.js",
      "lineno": 488,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005655",
        "name": "results",
        "type": "TemplateLiteral",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:ijs.htmlScript~results",
    "kind": "member",
    "memberof": "module:ijs.htmlScript",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18501,
        18595
      ],
      "filename": "ijs.js",
      "lineno": 570,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005732",
        "name": "results",
        "type": "CallExpression",
        "funcscope": "module:ijs.htmlScript",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:ijs~results",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:ijs"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6,
        40
      ],
      "filename": "index.js",
      "lineno": 1,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005758",
        "name": "aggregate",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "aggregate",
    "longname": "aggregate",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        48,
        74
      ],
      "filename": "index.js",
      "lineno": 2,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005764",
        "name": "array",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "array",
    "longname": "array",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        82,
        110
      ],
      "filename": "index.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005770",
        "name": "base64",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "base64",
    "longname": "base64",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        118,
        150
      ],
      "filename": "index.js",
      "lineno": 4,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005776",
        "name": "datasets",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "datasets",
    "longname": "datasets",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        158,
        184
      ],
      "filename": "index.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005782",
        "name": "group",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "group",
    "longname": "group",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        192,
        219
      ],
      "filename": "index.js",
      "lineno": 6,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005788",
        "name": "ijsUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ijsUtils",
    "longname": "ijsUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        227,
        251
      ],
      "filename": "index.js",
      "lineno": 7,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005794",
        "name": "file",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "file",
    "longname": "file",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        259,
        283
      ],
      "filename": "index.js",
      "lineno": 8,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005800",
        "name": "vega",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "vega",
    "longname": "vega",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        291,
        319
      ],
      "filename": "index.js",
      "lineno": 9,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005806",
        "name": "format",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "format",
    "longname": "format",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        327,
        349
      ],
      "filename": "index.js",
      "lineno": 10,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005812",
        "name": "set",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "set",
    "longname": "set",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        357,
        385
      ],
      "filename": "index.js",
      "lineno": 11,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005818",
        "name": "object",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "object",
    "longname": "object",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        393,
        425
      ],
      "filename": "index.js",
      "lineno": 12,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005824",
        "name": "plantuml",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "plantuml",
    "longname": "plantuml",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        433,
        463
      ],
      "filename": "index.js",
      "lineno": 13,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005830",
        "name": "leaflet",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "leaflet",
    "longname": "leaflet",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        471,
        497
      ],
      "filename": "index.js",
      "lineno": 14,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005836",
        "name": "latex",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "latex",
    "longname": "latex",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        505,
        533
      ],
      "filename": "index.js",
      "lineno": 15,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005842",
        "name": "random",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "random",
    "longname": "random",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        541,
        563
      ],
      "filename": "index.js",
      "lineno": 16,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005848",
        "name": "svg",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svg",
    "longname": "svg",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        572,
        606
      ],
      "filename": "index.js",
      "lineno": 18,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005854",
        "name": "SourceMap",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "SourceMap",
    "longname": "SourceMap",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        614,
        658
      ],
      "filename": "index.js",
      "lineno": 19,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005860",
        "name": "TableGenerator",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        667,
        740
      ],
      "filename": "index.js",
      "lineno": 21,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005866",
        "name": "table",
        "type": "FunctionExpression",
        "value": "table"
      }
    },
    "undocumented": true,
    "name": "table",
    "longname": "table",
    "kind": "function",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Default module\n * @module index\n * @exports index\n * @private\n */",
    "meta": {
      "filename": "index.js",
      "lineno": 25,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Default module",
    "kind": "module",
    "name": "index",
    "alias": "index",
    "access": "private",
    "longname": "module:index"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        816,
        1605
      ],
      "filename": "index.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005879",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{\"aggregate\":\"\",\"agg\":\"\",\"array\":\"\",\"base64\":\"\",\"datasets\":\"\",\"dataset\":\"\",\"file\":\"\",\"group\":\"\",\"format\":\"\",\"ijs\":\"\",\"latex\":\"\",\"leaflet\":\"\",\"object\":\"\",\"plantuml\":\"\",\"random\":\"\",\"set\":\"\",\"svg\":\"\",\"vega\":\"\",\"SourceMap\":\"\",\"TableGenerator\":\"\",\"table\":\"\"}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:index",
    "longname": "module:index",
    "kind": "member"
  },
  {
    "comment": "/** @see module:aggregate */",
    "meta": {
      "range": [
        868,
        877
      ],
      "filename": "index.js",
      "lineno": 33,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005884",
        "name": "aggregate",
        "type": "Identifier",
        "value": "aggregate"
      }
    },
    "see": [
      "module:aggregate"
    ],
    "name": "aggregate",
    "longname": "module:index.aggregate",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        881,
        895
      ],
      "filename": "index.js",
      "lineno": 34,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005886",
        "name": "agg",
        "type": "Identifier",
        "value": "aggregate"
      }
    },
    "undocumented": true,
    "name": "agg",
    "longname": "module:index.agg",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:array */",
    "meta": {
      "range": [
        926,
        931
      ],
      "filename": "index.js",
      "lineno": 36,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005888",
        "name": "array",
        "type": "Identifier",
        "value": "array"
      }
    },
    "see": [
      "module:array"
    ],
    "name": "array",
    "longname": "module:index.array",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:base64 */",
    "meta": {
      "range": [
        963,
        969
      ],
      "filename": "index.js",
      "lineno": 38,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005890",
        "name": "base64",
        "type": "Identifier",
        "value": "base64"
      }
    },
    "see": [
      "module:base64"
    ],
    "name": "base64",
    "longname": "module:index.base64",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:datasets */",
    "meta": {
      "range": [
        1003,
        1011
      ],
      "filename": "index.js",
      "lineno": 40,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005892",
        "name": "datasets",
        "type": "Identifier",
        "value": "datasets"
      }
    },
    "see": [
      "module:datasets"
    ],
    "name": "datasets",
    "longname": "module:index.datasets",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1015,
        1032
      ],
      "filename": "index.js",
      "lineno": 41,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005894",
        "name": "dataset",
        "type": "Identifier",
        "value": "datasets"
      }
    },
    "undocumented": true,
    "name": "dataset",
    "longname": "module:index.dataset",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:file */",
    "meta": {
      "range": [
        1062,
        1066
      ],
      "filename": "index.js",
      "lineno": 43,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005896",
        "name": "file",
        "type": "Identifier",
        "value": "file"
      }
    },
    "see": [
      "module:file"
    ],
    "name": "file",
    "longname": "module:index.file",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:group */",
    "meta": {
      "range": [
        1097,
        1102
      ],
      "filename": "index.js",
      "lineno": 45,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005898",
        "name": "group",
        "type": "Identifier",
        "value": "group"
      }
    },
    "see": [
      "module:group"
    ],
    "name": "group",
    "longname": "module:index.group",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:format */",
    "meta": {
      "range": [
        1134,
        1140
      ],
      "filename": "index.js",
      "lineno": 47,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005900",
        "name": "format",
        "type": "Identifier",
        "value": "format"
      }
    },
    "see": [
      "module:format"
    ],
    "name": "format",
    "longname": "module:index.format",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see IJSUtils */",
    "meta": {
      "range": [
        1167,
        1180
      ],
      "filename": "index.js",
      "lineno": 49,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005902",
        "name": "ijs",
        "type": "Identifier",
        "value": "ijsUtils"
      }
    },
    "see": [
      "IJSUtils"
    ],
    "name": "ijs",
    "longname": "module:index.ijs",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:latex */",
    "meta": {
      "range": [
        1211,
        1216
      ],
      "filename": "index.js",
      "lineno": 51,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005904",
        "name": "latex",
        "type": "Identifier",
        "value": "latex"
      }
    },
    "see": [
      "module:latex"
    ],
    "name": "latex",
    "longname": "module:index.latex",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:leaflet */",
    "meta": {
      "range": [
        1249,
        1256
      ],
      "filename": "index.js",
      "lineno": 53,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005906",
        "name": "leaflet",
        "type": "Identifier",
        "value": "leaflet"
      }
    },
    "see": [
      "module:leaflet"
    ],
    "name": "leaflet",
    "longname": "module:index.leaflet",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:object */",
    "meta": {
      "range": [
        1288,
        1294
      ],
      "filename": "index.js",
      "lineno": 55,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005908",
        "name": "object",
        "type": "Identifier",
        "value": "object"
      }
    },
    "see": [
      "module:object"
    ],
    "name": "object",
    "longname": "module:index.object",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see {@link module:plantuml} */",
    "meta": {
      "range": [
        1336,
        1344
      ],
      "filename": "index.js",
      "lineno": 57,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005910",
        "name": "plantuml",
        "type": "Identifier",
        "value": "plantuml"
      }
    },
    "see": [
      "{@link module:plantuml}"
    ],
    "name": "plantuml",
    "longname": "module:index.plantuml",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:random */",
    "meta": {
      "range": [
        1376,
        1382
      ],
      "filename": "index.js",
      "lineno": 59,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005912",
        "name": "random",
        "type": "Identifier",
        "value": "random"
      }
    },
    "see": [
      "module:random"
    ],
    "name": "random",
    "longname": "module:index.random",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:set */",
    "meta": {
      "range": [
        1411,
        1414
      ],
      "filename": "index.js",
      "lineno": 61,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005914",
        "name": "set",
        "type": "Identifier",
        "value": "set"
      }
    },
    "see": [
      "module:set"
    ],
    "name": "set",
    "longname": "module:index.set",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:svg */",
    "meta": {
      "range": [
        1443,
        1446
      ],
      "filename": "index.js",
      "lineno": 63,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005916",
        "name": "svg",
        "type": "Identifier",
        "value": "svg"
      }
    },
    "see": [
      "module:svg"
    ],
    "name": "svg",
    "longname": "module:index.svg",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see module:vega */",
    "meta": {
      "range": [
        1476,
        1480
      ],
      "filename": "index.js",
      "lineno": 65,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005918",
        "name": "vega",
        "type": "Identifier",
        "value": "vega"
      }
    },
    "see": [
      "module:vega"
    ],
    "name": "vega",
    "longname": "module:index.vega",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see SourceMap */",
    "meta": {
      "range": [
        1509,
        1518
      ],
      "filename": "index.js",
      "lineno": 68,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005920",
        "name": "SourceMap",
        "type": "Identifier",
        "value": "SourceMap"
      }
    },
    "see": [
      "SourceMap"
    ],
    "name": "SourceMap",
    "longname": "module:index.SourceMap",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see TableGenerator */",
    "meta": {
      "range": [
        1551,
        1565
      ],
      "filename": "index.js",
      "lineno": 70,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005922",
        "name": "TableGenerator",
        "type": "Identifier",
        "value": "TableGenerator"
      }
    },
    "see": [
      "TableGenerator"
    ],
    "name": "TableGenerator",
    "longname": "module:index.TableGenerator",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "/** @see TableGenerator */",
    "meta": {
      "range": [
        1598,
        1603
      ],
      "filename": "index.js",
      "lineno": 72,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005924",
        "name": "table",
        "type": "Identifier",
        "value": "table"
      }
    },
    "see": [
      "TableGenerator"
    ],
    "name": "table",
    "longname": "module:index.table",
    "kind": "member",
    "memberof": "module:index",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        43,
        70
      ],
      "filename": "latex.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005929",
        "name": "IJSUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "IJSUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        78,
        131
      ],
      "filename": "latex.js",
      "lineno": 4,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005935",
        "name": "HtmlScriptInternal",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "HtmlScriptInternal",
    "longname": "HtmlScriptInternal",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Renders LaTeX or KaTeX within a jupyter notebook cell.\n * \n * [LaTeX](https://www.latex-project.org/) is a typesetting engine often used for writing mathematical formulas\n * along with technical and scientific documentation. ({@link module:latex.render|see latex.render()})\n * \n * [KaTeX](https://katex.org/) is a very fast typesetting library specifically to write math notation.\n * It implements a subset of the LaTeX specification. ({@link module:latex.katex|see latex.katex()})\n * <a id=\"note-on-backslashes\" >&nbsp;</a>\n * # Note on Backslashes\n * \n * Both LaTeX and KaTeX use slashed characters that are not normally understood by JavaScript strings.\n * \n * For example: `\"c = \\pm\\sqrt{a^2 + b^2}\"`\n * \n * An alternative to using additional backslashes is possible: `c = \\\\pm\\\\sqrt{a^2 + b^2}`\n * \n * However, use of [String.raw](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw)\n * may be easier.\n * \n * (Please note though, that some sequences still need to be escaped, such as: `${`, `\\n`, `\\x` \n * \n * For example:\n * \n * ```\n * utils.latex.render(String.raw`Given : $\\pi = 3.14$ , $\\alpha = \\frac{3\\pi}{4}\\, rad$\n * $$\n * \\omega = 2\\pi f \\\\\n * f = \\frac{c}{\\lambda}\\\\\n * \\lambda_0=\\theta^2+\\delta\\\\\n * \\Delta\\lambda = \\frac{1}{\\lambda^2}\n * $$`);\n * ```\n * \n * Renders as:\n * \n * ![Screenshot of Latex](img/latexExample.png)\n * \n * Learn more about how to write LaTeX in the\n * [Toward Data Science article here](https://towardsdatascience.com/write-markdown-latex-in-the-jupyter-notebook-10985edb91fd#4cd2)\n * \n * Or in the [Illinois University document here](https://faculty.math.illinois.edu/~hildebr/tex/course/intro2.html)\n * \n * @module latex\n * @exports latex\n */",
    "meta": {
      "filename": "latex.js",
      "lineno": 6,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Renders LaTeX or KaTeX within a jupyter notebook cell.\n\n[LaTeX](https://www.latex-project.org/) is a typesetting engine often used for writing mathematical formulas\nalong with technical and scientific documentation. ({@link module:latex.render|see latex.render()})\n\n[KaTeX](https://katex.org/) is a very fast typesetting library specifically to write math notation.\nIt implements a subset of the LaTeX specification. ({@link module:latex.katex|see latex.katex()})\n<a id=\"note-on-backslashes\" >&nbsp;</a>\n# Note on Backslashes\n\nBoth LaTeX and KaTeX use slashed characters that are not normally understood by JavaScript strings.\n\nFor example: `\"c = \\pm\\sqrt{a^2 + b^2}\"`\n\nAn alternative to using additional backslashes is possible: `c = \\\\pm\\\\sqrt{a^2 + b^2}`\n\nHowever, use of [String.raw](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw)\nmay be easier.\n\n(Please note though, that some sequences still need to be escaped, such as: `${`, `\\n`, `\\x` \n\nFor example:\n\n```\nutils.latex.render(String.raw`Given : $\\pi = 3.14$ , $\\alpha = \\frac{3\\pi}{4}\\, rad$\n$$\n\\omega = 2\\pi f \\\\\nf = \\frac{c}{\\lambda}\\\\\n\\lambda_0=\\theta^2+\\delta\\\\\n\\Delta\\lambda = \\frac{1}{\\lambda^2}\n$$`);\n```\n\nRenders as:\n\n![Screenshot of Latex](img/latexExample.png)\n\nLearn more about how to write LaTeX in the\n[Toward Data Science article here](https://towardsdatascience.com/write-markdown-latex-in-the-jupyter-notebook-10985edb91fd#4cd2)\n\nOr in the [Illinois University document here](https://faculty.math.illinois.edu/~hildebr/tex/course/intro2.html)",
    "kind": "module",
    "name": "latex",
    "alias": "latex",
    "longname": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1866,
        1885
      ],
      "filename": "latex.js",
      "lineno": 52,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005941",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:latex",
    "longname": "module:latex",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1893,
        1920
      ],
      "filename": "latex.js",
      "lineno": 53,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005947",
        "name": "KatexUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "KatexUtils",
    "longname": "module:latex~KatexUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:latex",
    "params": []
  },
  {
    "comment": "/**\n * Renders the body text as LaTeX using the\n * [Jupyter Lab supported mime-type](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#latex):\n * `text/latex`.\n * \n * **See the note the [Note on Backslashes](#note-on-backslashes) above.**\n * \n * For example:\n * \n * ```\n * utils.latex.render(String.raw`Given : $\\pi = 3.14$ , $\\alpha = \\frac{3\\pi}{4}\\, rad$\n * $$\n * \\omega = 2\\pi f \\\\\n * f = \\frac{c}{\\lambda}\\\\\n * \\lambda_0=\\theta^2+\\delta\\\\\n * \\Delta\\lambda = \\frac{1}{\\lambda^2}\n * $$`);\n * ```\n * \n * ![Screenshot of Latex](img/latexExample.png)\n * \n * @param {String} body \n */",
    "meta": {
      "range": [
        2523,
        2788
      ],
      "filename": "latex.js",
      "lineno": 78,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005953",
        "name": "module.exports.render",
        "type": "FunctionExpression",
        "value": "render",
        "paramnames": [
          "body"
        ]
      },
      "vars": {
        "context": "module:latex.render~context",
        "undefined": null
      }
    },
    "description": "Renders the body text as LaTeX using the\n[Jupyter Lab supported mime-type](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#latex):\n`text/latex`.\n\n**See the note the [Note on Backslashes](#note-on-backslashes) above.**\n\nFor example:\n\n```\nutils.latex.render(String.raw`Given : $\\pi = 3.14$ , $\\alpha = \\frac{3\\pi}{4}\\, rad$\n$$\n\\omega = 2\\pi f \\\\\nf = \\frac{c}{\\lambda}\\\\\n\\lambda_0=\\theta^2+\\delta\\\\\n\\Delta\\lambda = \\frac{1}{\\lambda^2}\n$$`);\n```\n\n![Screenshot of Latex](img/latexExample.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "body"
      }
    ],
    "name": "render",
    "longname": "module:latex.render",
    "kind": "function",
    "memberof": "module:latex",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2579,
        2613
      ],
      "filename": "latex.js",
      "lineno": 79,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005964",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:latex.render~context",
    "kind": "constant",
    "memberof": "module:latex.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2721,
        2732
      ],
      "filename": "latex.js",
      "lineno": 81,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005980",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:latex~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2764,
        2782
      ],
      "filename": "latex.js",
      "lineno": 83,
      "columnno": 17,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005989",
        "name": "\"text/latex\"",
        "type": "Identifier",
        "value": "body"
      }
    },
    "undocumented": true,
    "name": "\"text/latex\"",
    "longname": "module:latex~\"text/latex\"",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "/**\n * Renders a KaTeX math expression through {@link module:ijs.htmlScript|ijs.htmlScript} in the Browser.\n * \n * It is a [subset of LaTeX - see here for supported functions](https://katex.org/docs/support_table.html)\n * that focuses primarily on Math representation.\n * \n * While not supported out of the box, it does provide a number of very nice features and options not supported\n * by standalone LaTeX.\n * \n * For example, here we can give options on display options, and additional custom macros.\n * \n * ```\n * utils.latex.katex(\"c = \\\\pm\\\\root{a^2 + b^2}\\\\in\\\\RR\", {\n *     displayMode: false,\n *     macros: {\n *       \"\\\\RR\": \"\\\\mathbb{R}\",\n *       \"\\\\root\": \"\\\\sqrt\"\n *     }\n * });\n * ```\n * \n * ![Screenshot of KaTeX with Options](img/katexOptionsExample.png)\n * \n * **See the note the [Note on Backslashes](#note-on-backslashes) above.**\n * \n * (As this runs within htmlScript, and not within latex, it may not be preserved in all output formats)\n * \n * @param {String} expression - KaTeX expression to render (note comment on String.raw)\n * @param {Object} katexRenderOptions - Options object to pass to katex.render\n * @param {Object} htmlScriptOptions - Options to pass to the htmlScript renderer.\n * \n * @see {@link https://katex.org/docs/support_table.html|KaTeX documentation}\n */",
    "meta": {
      "range": [
        4093,
        4721
      ],
      "filename": "latex.js",
      "lineno": 119,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100005992",
        "name": "module.exports.katex",
        "type": "FunctionExpression",
        "value": "katex",
        "paramnames": [
          "expression",
          "katexRenderOptions",
          "options"
        ]
      },
      "vars": {
        "cleanOptions": "module:latex.katex~cleanOptions",
        "cleanKatexOptions": "module:latex.katex~cleanKatexOptions",
        "katexOptions": "module:latex.katex~katexOptions"
      }
    },
    "description": "Renders a KaTeX math expression through {@link module:ijs.htmlScript|ijs.htmlScript} in the Browser.\n\nIt is a [subset of LaTeX - see here for supported functions](https://katex.org/docs/support_table.html)\nthat focuses primarily on Math representation.\n\nWhile not supported out of the box, it does provide a number of very nice features and options not supported\nby standalone LaTeX.\n\nFor example, here we can give options on display options, and additional custom macros.\n\n```\nutils.latex.katex(\"c = \\\\pm\\\\root{a^2 + b^2}\\\\in\\\\RR\", {\n    displayMode: false,\n    macros: {\n      \"\\\\RR\": \"\\\\mathbb{R}\",\n      \"\\\\root\": \"\\\\sqrt\"\n    }\n});\n```\n\n![Screenshot of KaTeX with Options](img/katexOptionsExample.png)\n\n**See the note the [Note on Backslashes](#note-on-backslashes) above.**\n\n(As this runs within htmlScript, and not within latex, it may not be preserved in all output formats)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "KaTeX expression to render (note comment on String.raw)",
        "name": "expression"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Options object to pass to katex.render",
        "name": "katexRenderOptions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Options to pass to the htmlScript renderer.",
        "name": "htmlScriptOptions"
      }
    ],
    "see": [
      "{@link https://katex.org/docs/support_table.html|KaTeX documentation}"
    ],
    "name": "katex",
    "longname": "module:latex.katex",
    "kind": "function",
    "memberof": "module:latex",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4196,
        4234
      ],
      "filename": "latex.js",
      "lineno": 120,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006009",
        "name": "cleanOptions",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:latex.katex~cleanOptions",
    "kind": "constant",
    "memberof": "module:latex.katex",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4244,
        4309
      ],
      "filename": "latex.js",
      "lineno": 121,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006017",
        "name": "cleanKatexOptions",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanKatexOptions",
    "longname": "module:latex.katex~cleanKatexOptions",
    "kind": "constant",
    "memberof": "module:latex.katex",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4320,
        4390
      ],
      "filename": "latex.js",
      "lineno": 123,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006025",
        "name": "katexOptions",
        "type": "ObjectExpression",
        "value": "{\"throwOnError\":false}"
      }
    },
    "undocumented": true,
    "name": "katexOptions",
    "longname": "module:latex.katex~katexOptions",
    "kind": "constant",
    "memberof": "module:latex.katex",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4341,
        4360
      ],
      "filename": "latex.js",
      "lineno": 124,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006028",
        "name": "throwOnError",
        "type": "Literal",
        "value": false
      }
    },
    "undocumented": true,
    "name": "throwOnError",
    "longname": "module:latex.katex~katexOptions.throwOnError",
    "kind": "member",
    "memberof": "module:latex.katex~katexOptions",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4442,
        4526
      ],
      "filename": "latex.js",
      "lineno": 130,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006040",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.js\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:latex~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4532,
        4601
      ],
      "filename": "latex.js",
      "lineno": 133,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006043",
        "name": "css",
        "type": "ArrayExpression",
        "value": "[\"https://cdn.jsdelivr.net/npm/katex@0.15.3/dist/katex.min.css\"]"
      }
    },
    "undocumented": true,
    "name": "css",
    "longname": "module:latex~css",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4607,
        4641
      ],
      "filename": "latex.js",
      "lineno": 134,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006046",
        "name": "data",
        "type": "ObjectExpression",
        "value": "{\"expression\":\"\",\"katexOptions\":\"\"}"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:latex~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4615,
        4625
      ],
      "filename": "latex.js",
      "lineno": 134,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006048",
        "name": "expression",
        "type": "Identifier",
        "value": "expression"
      }
    },
    "undocumented": true,
    "name": "expression",
    "longname": "module:latex~data.expression",
    "kind": "member",
    "memberof": "module:latex~data",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4627,
        4639
      ],
      "filename": "latex.js",
      "lineno": 134,
      "columnno": 24,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006050",
        "name": "katexOptions",
        "type": "Identifier",
        "value": "katexOptions"
      }
    },
    "undocumented": true,
    "name": "katexOptions",
    "longname": "module:latex~data.katexOptions",
    "kind": "member",
    "memberof": "module:latex~data",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4647,
        4661
      ],
      "filename": "latex.js",
      "lineno": 135,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006052",
        "name": "height",
        "type": "Literal",
        "value": "100%"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:latex~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4667,
        4713
      ],
      "filename": "latex.js",
      "lineno": 136,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006054",
        "name": "onReady",
        "type": "MemberExpression",
        "value": "HtmlScriptInternal.katexRenderOnReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:latex~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:latex"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        46,
        73
      ],
      "filename": "leaflet.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006061",
        "name": "IjsUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IjsUtils",
    "longname": "IjsUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        82,
        136
      ],
      "filename": "leaflet.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006067",
        "name": "InternalHtmlScripts",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "InternalHtmlScripts",
    "longname": "InternalHtmlScripts",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Library for showing leaflet within Jupyter and the iJavaScript kernel.'\n * \n * **Note that [Leaflet](https://leafletjs.com/)\n * and [Leaflet-Provider](https://leaflet-extras.github.io/leaflet-providers/preview/)\n * are both accessed from unpkg.com. The version is easily upgradable -\n * {@link module:leaflet.render|see render(options) for more}**\n * \n * * Render Leaflet\n *   * {@link module:leaflet.render|leaflet.render(options)} - Render leaflet\n *   * {@link module:leaflet.renderMarkers|leaflet.renderMarkers(array, options)} - Convenience to render a set of markers\n * * Update Defaults\n *   * {@link module:leaflet.OPTION_DEFAULTS|leaflet.OPTION_DEFAULTS} - Object used for default options\n *   * {@link module:leaflet.setProvider|leaflet.setProvider(string)} - Use one of the providers available from\n *        {@link http://leaflet-extras.github.io/leaflet-providers/preview/index.html|leaflet-providers}\n *   * {@link module:leaflet.setProviderFn|leaflet.setProviderFn(function)} - Use a custom provider, or leaflet-provider with api keys, etc.\n * \n * For example:\n * \n * ```\n * utils.leaflet.renderMarkers([\n *   [52.230020586193795, 21.01083755493164, \"point 1\"],\n *   [52.22924516170657, 21.011320352554325, \"point 2\"],\n *   [52.229511304688444, 21.01270973682404, \"point 3\"],\n *   [52.23040500771883, 21.012146472930908, \"point 4\"]\n * ], {height: 400, provider: 'Stamen.Watercolor'});\n * ```\n * \n * ![Screenshot](img/leafletRenderMarkers.png)\n * \n * Further reading: \n * \n * * [leaflet-providers github page](https://github.com/leaflet-extras/leaflet-providers)\n * * [leaflet documentation](https://leafletjs.com/SlavaUkraini/reference.html#latlngbounds)\n * * [leaflet examples](https://tomik23.github.io/leaflet-examples/)\n * * [One off site for geocoding](https://www.latlong.net/)\n * \n * @module leaflet\n * @exports leaflet\n */",
    "meta": {
      "filename": "leaflet.js",
      "lineno": 7,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Library for showing leaflet within Jupyter and the iJavaScript kernel.'\n\n**Note that [Leaflet](https://leafletjs.com/)\nand [Leaflet-Provider](https://leaflet-extras.github.io/leaflet-providers/preview/)\nare both accessed from unpkg.com. The version is easily upgradable -\n{@link module:leaflet.render|see render(options) for more}**\n\n* Render Leaflet\n  * {@link module:leaflet.render|leaflet.render(options)} - Render leaflet\n  * {@link module:leaflet.renderMarkers|leaflet.renderMarkers(array, options)} - Convenience to render a set of markers\n* Update Defaults\n  * {@link module:leaflet.OPTION_DEFAULTS|leaflet.OPTION_DEFAULTS} - Object used for default options\n  * {@link module:leaflet.setProvider|leaflet.setProvider(string)} - Use one of the providers available from\n       {@link http://leaflet-extras.github.io/leaflet-providers/preview/index.html|leaflet-providers}\n  * {@link module:leaflet.setProviderFn|leaflet.setProviderFn(function)} - Use a custom provider, or leaflet-provider with api keys, etc.\n\nFor example:\n\n```\nutils.leaflet.renderMarkers([\n  [52.230020586193795, 21.01083755493164, \"point 1\"],\n  [52.22924516170657, 21.011320352554325, \"point 2\"],\n  [52.229511304688444, 21.01270973682404, \"point 3\"],\n  [52.23040500771883, 21.012146472930908, \"point 4\"]\n], {height: 400, provider: 'Stamen.Watercolor'});\n```\n\n![Screenshot](img/leafletRenderMarkers.png)\n\nFurther reading: \n\n* [leaflet-providers github page](https://github.com/leaflet-extras/leaflet-providers)\n* [leaflet documentation](https://leafletjs.com/SlavaUkraini/reference.html#latlngbounds)\n* [leaflet examples](https://tomik23.github.io/leaflet-examples/)\n* [One off site for geocoding](https://www.latlong.net/)",
    "kind": "module",
    "name": "leaflet",
    "alias": "leaflet",
    "longname": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1992,
        2011
      ],
      "filename": "leaflet.js",
      "lineno": 47,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006073",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:leaflet",
    "longname": "module:leaflet",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2019,
        2048
      ],
      "filename": "leaflet.js",
      "lineno": 48,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006079",
        "name": "LeafletUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "LeafletUtils",
    "longname": "module:leaflet~LeafletUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:leaflet",
    "params": []
  },
  {
    "comment": "/**\n * Values are used for default leaflet rendering options.\n * \n * (Can be overwritten at the top of your file, so you only need to change options for a specific render)\n * \n * Note `version` and `providerVersion` are used to identify the unpkg cdn location:\n * \n * * `https://unpkg.com/leaflet@${version}/dist/leaflet.css`\n * * `https://unpkg.com/leaflet@${version}/dist/leaflet.js`\n * * `https://unpkg.com/leaflet-providers@${providerVersion}/leaflet-providers.js`\n * \n * To change the version used, change the `version` and `providerVersion` attributes\n * on the {@link module:leaflet.OPTION_DEFAULTS|leaflet.OPTION_DEFAULTS}\n * \n * ```\n * OPTION_DEFAULTS = {\n *  version: '1.6.0',             // version of the leaflet library\n *  providerVersion: '1.13.0',    // version of the leaflet-provider library\n *  mapOptions: {}                // options passed to leaflet when initializing the map\n * }\n * ```\n */",
    "meta": {
      "range": [
        2966,
        3318
      ],
      "filename": "leaflet.js",
      "lineno": 72,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006085",
        "name": "module.exports.OPTION_DEFAULTS",
        "type": "ObjectExpression",
        "value": "{\"version\":\"1.6.0\",\"providerVersion\":\"1.13.0\",\"providerFn\":\"\"}",
        "paramnames": []
      }
    },
    "description": "Values are used for default leaflet rendering options.\n\n(Can be overwritten at the top of your file, so you only need to change options for a specific render)\n\nNote `version` and `providerVersion` are used to identify the unpkg cdn location:\n\n* `https://unpkg.com/leaflet@${version}/dist/leaflet.css`\n* `https://unpkg.com/leaflet@${version}/dist/leaflet.js`\n* `https://unpkg.com/leaflet-providers@${providerVersion}/leaflet-providers.js`\n\nTo change the version used, change the `version` and `providerVersion` attributes\non the {@link module:leaflet.OPTION_DEFAULTS|leaflet.OPTION_DEFAULTS}\n\n```\nOPTION_DEFAULTS = {\n version: '1.6.0',             // version of the leaflet library\n providerVersion: '1.13.0',    // version of the leaflet-provider library\n mapOptions: {}                // options passed to leaflet when initializing the map\n}\n```",
    "name": "OPTION_DEFAULTS",
    "longname": "module:leaflet.OPTION_DEFAULTS",
    "kind": "member",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3037,
        3053
      ],
      "filename": "leaflet.js",
      "lineno": 74,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006092",
        "name": "version",
        "type": "Literal",
        "value": "1.6.0"
      }
    },
    "undocumented": true,
    "name": "version",
    "longname": "module:leaflet.OPTION_DEFAULTS.version",
    "kind": "member",
    "memberof": "module:leaflet.OPTION_DEFAULTS",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3057,
        3082
      ],
      "filename": "leaflet.js",
      "lineno": 75,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006094",
        "name": "providerVersion",
        "type": "Literal",
        "value": "1.13.0"
      }
    },
    "undocumented": true,
    "name": "providerVersion",
    "longname": "module:leaflet.OPTION_DEFAULTS.providerVersion",
    "kind": "member",
    "memberof": "module:leaflet.OPTION_DEFAULTS",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3086,
        3316
      ],
      "filename": "leaflet.js",
      "lineno": 76,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006096",
        "name": "providerFn",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "providerFn",
    "longname": "module:leaflet.OPTION_DEFAULTS.providerFn",
    "kind": "function",
    "memberof": "module:leaflet.OPTION_DEFAULTS",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3101,
        3104
      ],
      "filename": "leaflet.js",
      "lineno": 76,
      "columnno": 17,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006099",
        "name": "map",
        "type": "Identifier",
        "value": "map"
      }
    },
    "undocumented": true,
    "name": "map",
    "longname": "module:leaflet~map",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3106,
        3113
      ],
      "filename": "leaflet.js",
      "lineno": 76,
      "columnno": 22,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006101",
        "name": "leaflet",
        "type": "Identifier",
        "value": "leaflet"
      }
    },
    "undocumented": true,
    "name": "leaflet",
    "longname": "module:leaflet~leaflet",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3198,
        3300
      ],
      "filename": "leaflet.js",
      "lineno": 77,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006111",
        "name": "attribution",
        "type": "Literal",
        "value": "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"
      }
    },
    "undocumented": true,
    "name": "attribution",
    "longname": "module:leaflet~attribution",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "/**\n * Sets the default provider to be one of the\n * {@link https://leaflet-extras.github.io/leaflet-providers/preview/|providers from the leaflet-providers library}\n * \n * For example:\n * \n * ```\n * utils.leaflet.setProvider('OpenTopoMap');\n * ```\n * \n * Then any separate calls to maps will use that provider by default.\n * \n * ![Screenshot for defaulting providers](img/leafletDefaultProvider.png)\n * \n * @param {String} providerName - the name of the provider from the list\n * @see {@link module:leaflet.setProviderFn|leaflet.setProviderFn()} - to use a function to specify a provider\n * @see {@link module:leaflet.resetProvider|leaflet.resetProvider()} - to reset the provider to default\n */",
    "meta": {
      "range": [
        4018,
        4216
      ],
      "filename": "leaflet.js",
      "lineno": 99,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006116",
        "name": "module.exports.setProvider",
        "type": "FunctionExpression",
        "value": "setProvider",
        "paramnames": [
          "providerName"
        ]
      },
      "vars": {
        "LeafletUtils.OPTION_DEFAULTS.providerFn": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn"
      }
    },
    "description": "Sets the default provider to be one of the\n{@link https://leaflet-extras.github.io/leaflet-providers/preview/|providers from the leaflet-providers library}\n\nFor example:\n\n```\nutils.leaflet.setProvider('OpenTopoMap');\n```\n\nThen any separate calls to maps will use that provider by default.\n\n![Screenshot for defaulting providers](img/leafletDefaultProvider.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the name of the provider from the list",
        "name": "providerName"
      }
    ],
    "see": [
      "{@link module:leaflet.setProviderFn|leaflet.setProviderFn()} - to use a function to specify a provider",
      "{@link module:leaflet.resetProvider|leaflet.resetProvider()} - to reset the provider to default"
    ],
    "name": "setProvider",
    "longname": "module:leaflet.setProvider",
    "kind": "function",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4110,
        4164
      ],
      "filename": "leaflet.js",
      "lineno": 101,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006130",
        "name": "LeafletUtils.OPTION_DEFAULTS.providerFn",
        "type": "Identifier",
        "value": "providerName",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "OPTION_DEFAULTS.providerFn",
    "longname": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn",
    "kind": "member",
    "memberof": "module:leaflet~LeafletUtils",
    "scope": "static"
  },
  {
    "comment": "/**\n * Sets a provider function\n * \n * Note that the function should not only create the provider,\n * but should also add the provider to the map (ex: `.addTo(map)`)\n * \n * Otherwise, you can get a grey map like the following:\n * \n * ![Screenshot of missing .addToMap](img/leafletMissingAddToMap.png)\n * \n * Instead, do the following:\n * \n * ```\n * utils.leaflet.setProviderFn({map, leaflet} => leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n *   attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n * }).addTo(map));\n * ```\n * \n * @param {Function} providerFn - ({map, leaflet}) => {provider}\n * @param {any} providerFn.map - The leaflet map instance\n * @param {any} providerFn.leaflet - the Leaflet library instance\n * \n * @see {@link module:leaflet.setProvider|leaflet.setProvider()} - to use a leaflet-extra provider name\n * @see {@link module:leaflet.resetProvider|leaflet.resetProvider()} - to reset the provider to default\n */",
    "meta": {
      "range": [
        5231,
        5427
      ],
      "filename": "leaflet.js",
      "lineno": 132,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006144",
        "name": "module.exports.setProviderFn",
        "type": "FunctionExpression",
        "value": "setProviderFn",
        "paramnames": [
          "providerFn"
        ]
      },
      "vars": {
        "LeafletUtils.OPTION_DEFAULTS.providerFn": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn"
      }
    },
    "description": "Sets a provider function\n\nNote that the function should not only create the provider,\nbut should also add the provider to the map (ex: `.addTo(map)`)\n\nOtherwise, you can get a grey map like the following:\n\n![Screenshot of missing .addToMap](img/leafletMissingAddToMap.png)\n\nInstead, do the following:\n\n```\nutils.leaflet.setProviderFn({map, leaflet} => leaflet.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map));\n```",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "({map, leaflet}) => {provider}",
        "name": "providerFn"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "The leaflet map instance",
        "name": "providerFn.map"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the Leaflet library instance",
        "name": "providerFn.leaflet"
      }
    ],
    "see": [
      "{@link module:leaflet.setProvider|leaflet.setProvider()} - to use a leaflet-extra provider name",
      "{@link module:leaflet.resetProvider|leaflet.resetProvider()} - to reset the provider to default"
    ],
    "name": "setProviderFn",
    "longname": "module:leaflet.setProviderFn",
    "kind": "function",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5323,
        5375
      ],
      "filename": "leaflet.js",
      "lineno": 134,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006158",
        "name": "LeafletUtils.OPTION_DEFAULTS.providerFn",
        "type": "Identifier",
        "value": "providerFn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "OPTION_DEFAULTS.providerFn",
    "longname": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn",
    "kind": "member",
    "memberof": "module:leaflet~LeafletUtils",
    "scope": "static"
  },
  {
    "comment": "/**\n * Resets the map / tile provider to the default.\n * \n * @see {@link module:leaflet.setProvider|leaflet.setProvider()} - to use a leaflet-extra provider name\n * @see {@link module:leaflet.setProviderFn|leaflet.setProviderFn()} - to use a function to specify a provider\n */",
    "meta": {
      "range": [
        5707,
        6039
      ],
      "filename": "leaflet.js",
      "lineno": 146,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006172",
        "name": "module.exports.resetProvider",
        "type": "FunctionExpression",
        "value": "resetProvider",
        "paramnames": []
      },
      "vars": {
        "LeafletUtils.OPTION_DEFAULTS.providerFn": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn",
        "": null
      }
    },
    "description": "Resets the map / tile provider to the default.",
    "see": [
      "{@link module:leaflet.setProvider|leaflet.setProvider()} - to use a leaflet-extra provider name",
      "{@link module:leaflet.setProviderFn|leaflet.setProviderFn()} - to use a function to specify a provider"
    ],
    "name": "resetProvider",
    "longname": "module:leaflet.resetProvider",
    "kind": "function",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5767,
        6036
      ],
      "filename": "leaflet.js",
      "lineno": 147,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006182",
        "name": "LeafletUtils.OPTION_DEFAULTS.providerFn",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          ""
        ]
      }
    },
    "undocumented": true,
    "name": "OPTION_DEFAULTS.providerFn",
    "longname": "module:leaflet~LeafletUtils.OPTION_DEFAULTS.providerFn",
    "kind": "function",
    "memberof": "module:leaflet~LeafletUtils",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5812,
        5815
      ],
      "filename": "leaflet.js",
      "lineno": 147,
      "columnno": 47,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006190",
        "name": "map",
        "type": "Identifier",
        "value": "map"
      }
    },
    "undocumented": true,
    "name": "map",
    "longname": "module:leaflet~map",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5817,
        5824
      ],
      "filename": "leaflet.js",
      "lineno": 147,
      "columnno": 52,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006192",
        "name": "leaflet",
        "type": "Identifier",
        "value": "leaflet"
      }
    },
    "undocumented": true,
    "name": "leaflet",
    "longname": "module:leaflet~leaflet",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5916,
        6018
      ],
      "filename": "leaflet.js",
      "lineno": 149,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006202",
        "name": "attribution",
        "type": "Literal",
        "value": "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"
      }
    },
    "undocumented": true,
    "name": "attribution",
    "longname": "module:leaflet~attribution",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "/**\n * Renders a {@link https://leafletjs.com/|leaflet map}\n * \n * This extends {@link module:ijs.htmlScript|ijs.htmlScript}, so those options are also available.\n * \n * (Such as `debug: true` to run a `debugger;` and step through your `onReady` javascript)\n * \n * ```\n * //-- nodeJS Variable\n * airportData = { ohareORD: { lat: 41.975813, lon: -87.909428, title: \"O'Hare Intl Airport\" } };\n * //-- render out html\n * utils.ijs.htmlScript({\n *     scripts: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.js',\n *               'https://unpkg.com/leaflet-providers@1.13.0/leaflet-providers.js'],\n *     css: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'],\n *     data: airportData,\n *     height: 150,\n *     //-- function will be executed in javaScript\n *     onReady: ({rootEl, data}) => {\n *         // L is globally available from the leaflet.js script.\n *         \n *         //-- capture the nodeJS data and use in JavaScript. Neat!\n *         ohareORD = data.ohareORD;\n * \n *         map = L.map(rootEl);\n *         map.setView([ohareORD.lat, ohareORD.lon], 14);\n *         \n *         new L.marker([ohareORD.lat, ohareORD.lon]).bindPopup(ohareORD.title).addTo(map);\n *         \n *         L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n *            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n *         }).addTo(map);\n *     }\n * });\n * ```\n * \n * ![Screenshot of Leaflet](img/htmlScript_leaflet.png)\n * \n * @param {Object} options - the options passed and then forwarded to {@link module:ijs.htmlScript|ijs.htmlScript()}\n * @param {any} options.data - JSON.serializable data available in node we want available in JavaScript\n * @param {Function} options.onReady - JavaScript to run once the leaflet map is ready.\n * @param {ELement} options.onReady.rootEl - Destructured div Html Element available for the cell (to add or modify)\n * @param {any} options.onReady.data - the JavaScript equivalent of the NodeJS options.data passed\n * @param {any} options.onReady.leaflet - the Leaflet library instance\n * @param {Object} options.onReady.options - the options passed from NodeJS available in JavaScript\n * @param {Object} options.mapOptions - the object passed to leaflet when created\n * @param {String} [options.version = '1.6.0'] - the leaflet unpkg version we want to use\n * @param {String} [options.providerVersion = ''] - the leaflet-provider unpkg library version to use\n * @param {String} [provider] - The name of the leaflet-provider to use instad of leaflet.setProvider()\n * @param {String} [providerFn] - The function to use instad of leaflet.setProviderFn()\n * \n * @see {@link module:ijs.htmlScript|ijs.htmlScript(options)} - for additional options\n */",
    "meta": {
      "range": [
        8798,
        10618
      ],
      "filename": "leaflet.js",
      "lineno": 206,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006207",
        "name": "module.exports.render",
        "type": "FunctionExpression",
        "value": "render",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "options": "module:leaflet~options",
        "sanitizedOptions": "module:leaflet.render~sanitizedOptions",
        "undefined": null,
        "sanitizedProvider": "module:leaflet.render~sanitizedProvider",
        "providerCode": "module:leaflet~providerCode",
        "mapOptionsCode": "module:leaflet~mapOptionsCode"
      }
    },
    "description": "Renders a {@link https://leafletjs.com/|leaflet map}\n\nThis extends {@link module:ijs.htmlScript|ijs.htmlScript}, so those options are also available.\n\n(Such as `debug: true` to run a `debugger;` and step through your `onReady` javascript)\n\n```\n//-- nodeJS Variable\nairportData = { ohareORD: { lat: 41.975813, lon: -87.909428, title: \"O'Hare Intl Airport\" } };\n//-- render out html\nutils.ijs.htmlScript({\n    scripts: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.js',\n              'https://unpkg.com/leaflet-providers@1.13.0/leaflet-providers.js'],\n    css: ['https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'],\n    data: airportData,\n    height: 150,\n    //-- function will be executed in javaScript\n    onReady: ({rootEl, data}) => {\n        // L is globally available from the leaflet.js script.\n        \n        //-- capture the nodeJS data and use in JavaScript. Neat!\n        ohareORD = data.ohareORD;\n\n        map = L.map(rootEl);\n        map.setView([ohareORD.lat, ohareORD.lon], 14);\n        \n        new L.marker([ohareORD.lat, ohareORD.lon]).bindPopup(ohareORD.title).addTo(map);\n        \n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n           attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n    }\n});\n```\n\n![Screenshot of Leaflet](img/htmlScript_leaflet.png)",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options passed and then forwarded to {@link module:ijs.htmlScript|ijs.htmlScript()}",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "JSON.serializable data available in node we want available in JavaScript",
        "name": "options.data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "JavaScript to run once the leaflet map is ready.",
        "name": "options.onReady"
      },
      {
        "type": {
          "names": [
            "ELement"
          ]
        },
        "description": "Destructured div Html Element available for the cell (to add or modify)",
        "name": "options.onReady.rootEl"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the JavaScript equivalent of the NodeJS options.data passed",
        "name": "options.onReady.data"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the Leaflet library instance",
        "name": "options.onReady.leaflet"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options passed from NodeJS available in JavaScript",
        "name": "options.onReady.options"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the object passed to leaflet when created",
        "name": "options.mapOptions"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "'1.6.0'",
        "description": "the leaflet unpkg version we want to use",
        "name": "options.version"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "defaultvalue": "''",
        "description": "the leaflet-provider unpkg library version to use",
        "name": "options.providerVersion"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The name of the leaflet-provider to use instad of leaflet.setProvider()",
        "name": "provider"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "The function to use instad of leaflet.setProviderFn()",
        "name": "providerFn"
      }
    ],
    "see": [
      "{@link module:ijs.htmlScript|ijs.htmlScript(options)} - for additional options"
    ],
    "name": "render",
    "longname": "module:leaflet.render",
    "kind": "function",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8865,
        8877
      ],
      "filename": "leaflet.js",
      "lineno": 207,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006221",
        "name": "options",
        "type": "ObjectExpression",
        "funcscope": "module:leaflet.render",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "options",
    "longname": "module:leaflet~options",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8887,
        8963
      ],
      "filename": "leaflet.js",
      "lineno": 208,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006225",
        "name": "sanitizedOptions",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "sanitizedOptions",
    "longname": "module:leaflet.render~sanitizedOptions",
    "kind": "constant",
    "memberof": "module:leaflet.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8980,
        8987
      ],
      "filename": "leaflet.js",
      "lineno": 214,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006237",
        "name": "version",
        "type": "Identifier",
        "value": "version"
      }
    },
    "undocumented": true,
    "name": "version",
    "longname": "module:leaflet~version",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8993,
        9008
      ],
      "filename": "leaflet.js",
      "lineno": 215,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006239",
        "name": "providerVersion",
        "type": "Identifier",
        "value": "providerVersion"
      }
    },
    "undocumented": true,
    "name": "providerVersion",
    "longname": "module:leaflet~providerVersion",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9014,
        9029
      ],
      "filename": "leaflet.js",
      "lineno": 216,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006241",
        "name": "mapOptions",
        "type": "AssignmentPattern",
        "value": "mapOptions"
      }
    },
    "undocumented": true,
    "name": "mapOptions",
    "longname": "module:leaflet~mapOptions",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9035,
        9043
      ],
      "filename": "leaflet.js",
      "lineno": 217,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006245",
        "name": "provider",
        "type": "Identifier",
        "value": "provider"
      }
    },
    "undocumented": true,
    "name": "provider",
    "longname": "module:leaflet~provider",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9049,
        9059
      ],
      "filename": "leaflet.js",
      "lineno": 218,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006247",
        "name": "providerFn",
        "type": "Identifier",
        "value": "providerFn"
      }
    },
    "undocumented": true,
    "name": "providerFn",
    "longname": "module:leaflet~providerFn",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9065,
        9072
      ],
      "filename": "leaflet.js",
      "lineno": 219,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006249",
        "name": "onReady",
        "type": "Identifier",
        "value": "onReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:leaflet~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9078,
        9090
      ],
      "filename": "leaflet.js",
      "lineno": 220,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006251",
        "name": "scripts",
        "type": "AssignmentPattern",
        "value": "scripts"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:leaflet~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9096,
        9104
      ],
      "filename": "leaflet.js",
      "lineno": 221,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006255",
        "name": "css",
        "type": "AssignmentPattern",
        "value": "css"
      }
    },
    "undocumented": true,
    "name": "css",
    "longname": "module:leaflet~css",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9158,
        9200
      ],
      "filename": "leaflet.js",
      "lineno": 225,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006263",
        "name": "sanitizedProvider",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "sanitizedProvider",
    "longname": "module:leaflet.render~sanitizedProvider",
    "kind": "constant",
    "memberof": "module:leaflet.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9316,
        9333
      ],
      "filename": "leaflet.js",
      "lineno": 228,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006276",
        "name": "providerCode",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "providerCode",
    "longname": "module:leaflet.render~providerCode",
    "kind": "member",
    "memberof": "module:leaflet.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9388,
        9457
      ],
      "filename": "leaflet.js",
      "lineno": 230,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006286",
        "name": "providerCode",
        "type": "TemplateLiteral",
        "funcscope": "module:leaflet.render",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "providerCode",
    "longname": "module:leaflet~providerCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9576,
        9649
      ],
      "filename": "leaflet.js",
      "lineno": 233,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006302",
        "name": "providerCode",
        "type": "TemplateLiteral",
        "funcscope": "module:leaflet.render",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "providerCode",
    "longname": "module:leaflet~providerCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9916,
        9937
      ],
      "filename": "leaflet.js",
      "lineno": 242,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006327",
        "name": "mapOptionsCode",
        "type": "Literal",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "mapOptionsCode",
    "longname": "module:leaflet.render~mapOptionsCode",
    "kind": "member",
    "memberof": "module:leaflet.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9963,
        10006
      ],
      "filename": "leaflet.js",
      "lineno": 244,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006334",
        "name": "mapOptionsCode",
        "type": "CallExpression",
        "funcscope": "module:leaflet.render",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "mapOptionsCode",
    "longname": "module:leaflet~mapOptionsCode",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10068,
        10248
      ],
      "filename": "leaflet.js",
      "lineno": 249,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006349",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"\",\"\",\"\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:leaflet~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10254,
        10342
      ],
      "filename": "leaflet.js",
      "lineno": 254,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006361",
        "name": "css",
        "type": "ArrayExpression",
        "value": "[\"\",\"\"]"
      }
    },
    "undocumented": true,
    "name": "css",
    "longname": "module:leaflet~css",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10348,
        10610
      ],
      "filename": "leaflet.js",
      "lineno": 258,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006369",
        "name": "onReady",
        "type": "TemplateLiteral",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:leaflet~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "/**\n * Renders a collection of markers for simple use cases with Leaflet.\n * \n * Marker data can be either:\n * \n * * Objects\n *   * With at least the `lat` and `lon` attributes, with optional 'title' attributes\n *   * ex: `[{ lat: 41.991576, lon: -87.915822, title: 'AA Hanger'}, { lat: 41.991071, lon: -87.920961, title: 'Ozark Hanger'}]`\n * * Arrays\n *   * With at least 2 values for the second dimension.\n *   * Assumed [lat, lon, title]\n *   * ex: `[[41.991576, -87.915822, 'AA Hanger'], [41.991071, -87.920961, 'Ozark Hanger']]`\n * \n * For example:\n * \n * ```\n * utils.leaflet.renderMarkers([\n *   [52.230020586193795, 21.01083755493164, \"point 1\"],\n *   [52.22924516170657, 21.011320352554325, \"point 2\"],\n *   [52.229511304688444, 21.01270973682404, \"point 3\"],\n *   [52.23040500771883, 21.012146472930908, \"point 4\"]\n * ], {height: 400, provider: 'Stamen.Watercolor'});\n * ```\n * \n * ![Screenshot](img/leafletRenderMarkers.png)\n * \n * @param {Array} markers - of either of the two supported definition types\n * @param {Object} options - options forwarded to {@link module:leaflet.render|leaflet.render()}\n * \n * @see {@link module:leaflet.render|leaflet.render(options)} - for additional options supported\n */",
    "meta": {
      "range": [
        11839,
        13030
      ],
      "filename": "leaflet.js",
      "lineno": 300,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006382",
        "name": "module.exports.renderMarkers",
        "type": "FunctionExpression",
        "value": "renderMarkers",
        "paramnames": [
          "markers",
          "mapOptions"
        ]
      },
      "vars": {
        "firstMarker": "module:leaflet.renderMarkers~firstMarker",
        "cleanMarkers": "module:leaflet~cleanMarkers",
        "": null,
        "onReady": "module:leaflet.renderMarkers~onReady"
      }
    },
    "description": "Renders a collection of markers for simple use cases with Leaflet.\n\nMarker data can be either:\n\n* Objects\n  * With at least the `lat` and `lon` attributes, with optional 'title' attributes\n  * ex: `[{ lat: 41.991576, lon: -87.915822, title: 'AA Hanger'}, { lat: 41.991071, lon: -87.920961, title: 'Ozark Hanger'}]`\n* Arrays\n  * With at least 2 values for the second dimension.\n  * Assumed [lat, lon, title]\n  * ex: `[[41.991576, -87.915822, 'AA Hanger'], [41.991071, -87.920961, 'Ozark Hanger']]`\n\nFor example:\n\n```\nutils.leaflet.renderMarkers([\n  [52.230020586193795, 21.01083755493164, \"point 1\"],\n  [52.22924516170657, 21.011320352554325, \"point 2\"],\n  [52.229511304688444, 21.01270973682404, \"point 3\"],\n  [52.23040500771883, 21.012146472930908, \"point 4\"]\n], {height: 400, provider: 'Stamen.Watercolor'});\n```\n\n![Screenshot](img/leafletRenderMarkers.png)",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "of either of the two supported definition types",
        "name": "markers"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options forwarded to {@link module:leaflet.render|leaflet.render()}",
        "name": "options"
      }
    ],
    "see": [
      "{@link module:leaflet.render|leaflet.render(options)} - for additional options supported"
    ],
    "name": "renderMarkers",
    "longname": "module:leaflet.renderMarkers",
    "kind": "function",
    "memberof": "module:leaflet",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12077,
        12101
      ],
      "filename": "leaflet.js",
      "lineno": 304,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006415",
        "name": "firstMarker",
        "type": "MemberExpression",
        "value": "markers[0]"
      }
    },
    "undocumented": true,
    "name": "firstMarker",
    "longname": "module:leaflet.renderMarkers~firstMarker",
    "kind": "constant",
    "memberof": "module:leaflet.renderMarkers",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12112,
        12129
      ],
      "filename": "leaflet.js",
      "lineno": 306,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006421",
        "name": "cleanMarkers",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "cleanMarkers",
    "longname": "module:leaflet.renderMarkers~cleanMarkers",
    "kind": "member",
    "memberof": "module:leaflet.renderMarkers",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12327,
        12349
      ],
      "filename": "leaflet.js",
      "lineno": 311,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006443",
        "name": "cleanMarkers",
        "type": "Identifier",
        "funcscope": "module:leaflet.renderMarkers",
        "value": "markers",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanMarkers",
    "longname": "module:leaflet~cleanMarkers",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12633,
        12703
      ],
      "filename": "leaflet.js",
      "lineno": 318,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006472",
        "name": "cleanMarkers",
        "type": "CallExpression",
        "funcscope": "module:leaflet.renderMarkers",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanMarkers",
    "longname": "module:leaflet~cleanMarkers",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12663,
        12666
      ],
      "filename": "leaflet.js",
      "lineno": 318,
      "columnno": 34,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006480",
        "name": "lat",
        "type": "Identifier",
        "value": "lat"
      }
    },
    "undocumented": true,
    "name": "lat",
    "longname": "module:leaflet~lat",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12668,
        12671
      ],
      "filename": "leaflet.js",
      "lineno": 318,
      "columnno": 39,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006482",
        "name": "lon",
        "type": "Identifier",
        "value": "lon"
      }
    },
    "undocumented": true,
    "name": "lon",
    "longname": "module:leaflet~lon",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12673,
        12678
      ],
      "filename": "leaflet.js",
      "lineno": 318,
      "columnno": 44,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006484",
        "name": "title",
        "type": "Identifier",
        "value": "title"
      }
    },
    "undocumented": true,
    "name": "title",
    "longname": "module:leaflet~title",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12897,
        12948
      ],
      "filename": "leaflet.js",
      "lineno": 324,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006496",
        "name": "onReady",
        "type": "MemberExpression",
        "value": "InternalHtmlScripts.leafletMarkersOnReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:leaflet.renderMarkers~onReady",
    "kind": "constant",
    "memberof": "module:leaflet.renderMarkers",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12997,
        13004
      ],
      "filename": "leaflet.js",
      "lineno": 326,
      "columnno": 46,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006509",
        "name": "onReady",
        "type": "Identifier",
        "value": "onReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:leaflet~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13006,
        13024
      ],
      "filename": "leaflet.js",
      "lineno": 326,
      "columnno": 55,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006511",
        "name": "data",
        "type": "Identifier",
        "value": "cleanMarkers"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:leaflet~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:leaflet"
  },
  {
    "comment": "/**\n * Logging library\n * \n * (uses pino under the sheets)\n */",
    "meta": {
      "range": [
        69,
        118
      ],
      "filename": "logger.js",
      "lineno": 6,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006516",
        "name": "logger",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "Logging library\n\n(uses pino under the sheets)",
    "name": "logger",
    "longname": "logger",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        98,
        115
      ],
      "filename": "logger.js",
      "lineno": 7,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006523",
        "name": "prettyPrint",
        "type": "Literal",
        "value": true
      }
    },
    "undocumented": true,
    "name": "prettyPrint",
    "longname": "prettyPrint",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/** Error level: none @type {Number} */",
    "meta": {
      "range": [
        161,
        189
      ],
      "filename": "logger.js",
      "lineno": 11,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006526",
        "name": "logger.ERROR_LEVEL_NONE",
        "type": "UnaryExpression",
        "value": -1,
        "paramnames": []
      }
    },
    "description": "Error level: none @type {Number}",
    "name": "ERROR_LEVEL_NONE",
    "longname": "logger.ERROR_LEVEL_NONE",
    "kind": "member",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "/** Error level: Basic @type {Number} */",
    "meta": {
      "range": [
        233,
        261
      ],
      "filename": "logger.js",
      "lineno": 14,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006533",
        "name": "logger.ERROR_LEVEL_BASIC",
        "type": "Literal",
        "value": 0,
        "paramnames": []
      }
    },
    "description": "Error level: Basic @type {Number}",
    "name": "ERROR_LEVEL_BASIC",
    "longname": "logger.ERROR_LEVEL_BASIC",
    "kind": "member",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "/** Error level: Detail @type {Number} */",
    "meta": {
      "range": [
        306,
        335
      ],
      "filename": "logger.js",
      "lineno": 17,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006539",
        "name": "logger.ERROR_LEVEL_DETAIL",
        "type": "Literal",
        "value": 1,
        "paramnames": []
      }
    },
    "description": "Error level: Detail @type {Number}",
    "name": "ERROR_LEVEL_DETAIL",
    "longname": "logger.ERROR_LEVEL_DETAIL",
    "kind": "member",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "/** The current traceLevel within the logger */",
    "meta": {
      "range": [
        424,
        468
      ],
      "filename": "logger.js",
      "lineno": 20,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006545",
        "name": "logger.traceLevel",
        "type": "MemberExpression",
        "value": "logger.ERROR_LEVEL_BASIC",
        "paramnames": []
      }
    },
    "description": "The current traceLevel within the logger",
    "name": "traceLevel",
    "longname": "logger.traceLevel",
    "kind": "member",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "/**\n * Flags to send for the connector\n * @public\n * @param {Object} options -\n */",
    "meta": {
      "range": [
        554,
        1216
      ],
      "filename": "logger.js",
      "lineno": 27,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006553",
        "name": "logger.setOptions",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "defaults": "logger.setOptions~defaults",
        "envTraceLevel": "logger.setOptions~envTraceLevel",
        "defaults.traceLevel": "logger.setOptions~defaults.traceLevel",
        "cleanOptions": "logger.setOptions~cleanOptions",
        "logger.traceLevel": "logger.traceLevel"
      }
    },
    "description": "Flags to send for the connector",
    "access": "public",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "-",
        "name": "options"
      }
    ],
    "name": "setOptions",
    "longname": "logger.setOptions",
    "kind": "function",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        597,
        654
      ],
      "filename": "logger.js",
      "lineno": 28,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006561",
        "name": "defaults",
        "type": "ObjectExpression",
        "value": "{\"traceLevel\":\"\"}"
      }
    },
    "undocumented": true,
    "name": "defaults",
    "longname": "logger.setOptions~defaults",
    "kind": "constant",
    "memberof": "logger.setOptions",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        614,
        650
      ],
      "filename": "logger.js",
      "lineno": 29,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006564",
        "name": "traceLevel",
        "type": "MemberExpression",
        "value": "logger.ERROR_LEVEL_BASIC"
      }
    },
    "undocumented": true,
    "name": "traceLevel",
    "longname": "logger.setOptions~defaults.traceLevel",
    "kind": "member",
    "memberof": "logger.setOptions~defaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        831,
        891
      ],
      "filename": "logger.js",
      "lineno": 35,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006584",
        "name": "envTraceLevel",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "envTraceLevel",
    "longname": "logger.setOptions~envTraceLevel",
    "kind": "constant",
    "memberof": "logger.setOptions",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        946,
        981
      ],
      "filename": "logger.js",
      "lineno": 37,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006604",
        "name": "defaults.traceLevel",
        "type": "Identifier",
        "funcscope": "logger.setOptions",
        "value": "envTraceLevel",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "traceLevel",
    "longname": "logger.setOptions~defaults.traceLevel",
    "kind": "member",
    "memberof": "logger.setOptions~defaults",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1002,
        1049
      ],
      "filename": "logger.js",
      "lineno": 41,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006610",
        "name": "cleanOptions",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "logger.setOptions~cleanOptions",
    "kind": "constant",
    "memberof": "logger.setOptions",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * The level that we will be tracing the output.\n   * (By default - 0, no trace.)\n   * @type {number}\n   */",
    "meta": {
      "range": [
        1170,
        1213
      ],
      "filename": "logger.js",
      "lineno": 48,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006619",
        "name": "logger.traceLevel",
        "type": "MemberExpression",
        "value": "cleanOptions.traceLevel",
        "paramnames": []
      }
    },
    "description": "The level that we will be tracing the output.\n(By default - 0, no trace.)",
    "type": {
      "names": [
        "number"
      ]
    },
    "name": "traceLevel",
    "longname": "logger.traceLevel",
    "kind": "member",
    "memberof": "logger",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1219,
        1242
      ],
      "filename": "logger.js",
      "lineno": 51,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006627",
        "name": "module.exports",
        "type": "Identifier",
        "value": "logger",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        55,
        99
      ],
      "filename": "object.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006635",
        "name": "schemaGenerator",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "schemaGenerator",
    "longname": "schemaGenerator",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        108,
        141
      ],
      "filename": "object.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006641",
        "name": "FormatUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "FormatUtils",
    "longname": "FormatUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Utility for working with and massaging javascript objects.\n * \n * * Describe objects\n *   * {@link module:object.keys|keys()} - Safely get the keys of an object or list of objects\n *   * {@link module:object.getObjectPropertyTypes|getObjectPropertyTypes()} - describe the properties of a list of objects\n *   * {@link module:object.generateSchema|generateSchema()} - generate a schema / describe properties of a list of objects\n *   * {@link module:object.findWithoutProperties|findWithoutProperties()} - find objects without ALL the properties specified\n *   * {@link module:object.findWithoutProperties|findWithProperties()} - find objects with any of the properties specified\n *   * {@link module:object.setPropertyDefaults|setPropertyDefaults()} - sets values for objects that don't currently have the property\n * * Manipulating objects\n *   * {@link module:object.objAssign|objAssign()} -\n *   * {@link module:object.objAssignEntities|objAssignEntities()} -\n *   * {@link module:object.selectObjectProperties|selectObjectProperties()} - keep only specific properties\n *   * {@link module:object.filterObjectProperties|filterObjectProperties()} - remove specific properties\n *   * {@link module:object.mapProperties|mapProperties(collection, fn, ...properties)} - map multiple properties at once (like parseInt, or toString)\n *   * {@link module:object.formatProperties|formatProperties(collection, propertyTranslation)} - map specific properties (ex: toString, toNumber, etc)\n * * Fetch child properties from related objects\n *   * {@link module:object.fetchObjectProperty|fetchObjectProperty(object, string)} - use dot notation to bring a child property onto a parent\n *   * {@link module:object.fetchObjectProperties|fetchObjectProperties(object, string[])} - use dot notation to bring multiple child properties onto a parent\n *   * {@link module:object.join|join(array, index, map, fn)} - join a collection against a map by a given index\n *   * {@link module:object.joinProperties|join(array, index, map, ...fields)} - join a collection, and copy properties over from the mapped object.\n *   * {@link module:object.propertyFromList|propertyFromList(array, propertyName)} - fetches a specific property from all objects in a list\n * * Rename properties\n *   * {@link module:object.cleanProperties|cleanProperties()} - correct inaccessible property names in a list of objects - in place\n *  *   * {@link module:object.cleanProperties2|cleanProperties2()} - correct inaccessible property names in a list of objects - on a cloned list\n *   * {@link module:object.cleanPropertyNames|cleanPropertyNames()} - create a translation of inaccessible names to accessible ones\n *   * {@link module:object.cleanPropertyName|cleanPropertyName()} - create a translation of a specific property name to be accessible.\n *   * {@link module:object.renameProperties|renameProperties()} - Use a translation from old property names to new ones\n * * Flatten object properties\n *   * {@link module:object.collapseSpecificObject|collapseSpecificObject()} - flatten object properties\n *   * {@link module:object.collapse|collapse()} - flatten specific object\n * * Create Map of objects by key\n *   * {@link module:object.mapByProperty|mapByProperty()} -\n *   * {@link module:group.by|group(collection, accessor)}\n * \n * @module object\n * @exports object\n */",
    "meta": {
      "filename": "object.js",
      "lineno": 7,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utility for working with and massaging javascript objects.\n\n* Describe objects\n  * {@link module:object.keys|keys()} - Safely get the keys of an object or list of objects\n  * {@link module:object.getObjectPropertyTypes|getObjectPropertyTypes()} - describe the properties of a list of objects\n  * {@link module:object.generateSchema|generateSchema()} - generate a schema / describe properties of a list of objects\n  * {@link module:object.findWithoutProperties|findWithoutProperties()} - find objects without ALL the properties specified\n  * {@link module:object.findWithoutProperties|findWithProperties()} - find objects with any of the properties specified\n  * {@link module:object.setPropertyDefaults|setPropertyDefaults()} - sets values for objects that don't currently have the property\n* Manipulating objects\n  * {@link module:object.objAssign|objAssign()} -\n  * {@link module:object.objAssignEntities|objAssignEntities()} -\n  * {@link module:object.selectObjectProperties|selectObjectProperties()} - keep only specific properties\n  * {@link module:object.filterObjectProperties|filterObjectProperties()} - remove specific properties\n  * {@link module:object.mapProperties|mapProperties(collection, fn, ...properties)} - map multiple properties at once (like parseInt, or toString)\n  * {@link module:object.formatProperties|formatProperties(collection, propertyTranslation)} - map specific properties (ex: toString, toNumber, etc)\n* Fetch child properties from related objects\n  * {@link module:object.fetchObjectProperty|fetchObjectProperty(object, string)} - use dot notation to bring a child property onto a parent\n  * {@link module:object.fetchObjectProperties|fetchObjectProperties(object, string[])} - use dot notation to bring multiple child properties onto a parent\n  * {@link module:object.join|join(array, index, map, fn)} - join a collection against a map by a given index\n  * {@link module:object.joinProperties|join(array, index, map, ...fields)} - join a collection, and copy properties over from the mapped object.\n  * {@link module:object.propertyFromList|propertyFromList(array, propertyName)} - fetches a specific property from all objects in a list\n* Rename properties\n  * {@link module:object.cleanProperties|cleanProperties()} - correct inaccessible property names in a list of objects - in place\n *   * {@link module:object.cleanProperties2|cleanProperties2()} - correct inaccessible property names in a list of objects - on a cloned list\n  * {@link module:object.cleanPropertyNames|cleanPropertyNames()} - create a translation of inaccessible names to accessible ones\n  * {@link module:object.cleanPropertyName|cleanPropertyName()} - create a translation of a specific property name to be accessible.\n  * {@link module:object.renameProperties|renameProperties()} - Use a translation from old property names to new ones\n* Flatten object properties\n  * {@link module:object.collapseSpecificObject|collapseSpecificObject()} - flatten object properties\n  * {@link module:object.collapse|collapse()} - flatten specific object\n* Create Map of objects by key\n  * {@link module:object.mapByProperty|mapByProperty()} -\n  * {@link module:group.by|group(collection, accessor)}",
    "kind": "module",
    "name": "object",
    "alias": "object",
    "longname": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3489,
        3508
      ],
      "filename": "object.js",
      "lineno": 46,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006647",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:object",
    "longname": "module:object",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3517,
        3545
      ],
      "filename": "object.js",
      "lineno": 48,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006653",
        "name": "ObjectUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "ObjectUtils",
    "longname": "module:object~ObjectUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:object",
    "params": []
  },
  {
    "comment": "/**\n * Generates a function if a property or null or a function is sent\n * @param {Function | String} fnOrProp - \n * @return {Function}\n * @private\n */",
    "meta": {
      "range": [
        3722,
        4091
      ],
      "filename": "object.js",
      "lineno": 58,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006659",
        "name": "module.exports.evaluateFunctionOrProperty",
        "type": "FunctionExpression",
        "value": "evaluateFunctionOrProperty",
        "paramnames": [
          "fnOrProp"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates a function if a property or null or a function is sent",
    "params": [
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "-",
        "name": "fnOrProp"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        }
      }
    ],
    "access": "private",
    "name": "evaluateFunctionOrProperty",
    "longname": "module:object.evaluateFunctionOrProperty",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Identifies keys from an object, but handles null safely.\n * @param {Object} - object to get the keys from\n * @return {Array<String>} - collections of keys or [] if no keys are found.\n * @private\n */",
    "meta": {
      "range": [
        4306,
        4395
      ],
      "filename": "object.js",
      "lineno": 76,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006702",
        "name": "keysFromObject",
        "type": "ArrowFunctionExpression"
      }
    },
    "description": "Identifies keys from an object, but handles null safely.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object to get the keys from"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "- collections of keys or [] if no keys are found."
      }
    ],
    "access": "private",
    "name": "keysFromObject",
    "longname": "module:object~keysFromObject",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Adds all items into a set\n */",
    "meta": {
      "range": [
        4441,
        4558
      ],
      "filename": "object.js",
      "lineno": 86,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006720",
        "name": "setAddAll",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "description": "Adds all items into a set",
    "name": "setAddAll",
    "longname": "module:object~setAddAll",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:object",
    "params": []
  },
  {
    "comment": "/**\n * The maximum depth that a collapse will go to \n * @type {Number}\n * @see {@link module:object.collapse|collapse()} - used with collapse\n */",
    "meta": {
      "range": [
        4723,
        4761
      ],
      "filename": "object.js",
      "lineno": 98,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006741",
        "name": "module.exports.MAX_COLLAPSE_DEPTH",
        "type": "Literal",
        "value": 50,
        "paramnames": []
      }
    },
    "description": "The maximum depth that a collapse will go to",
    "type": {
      "names": [
        "Number"
      ]
    },
    "see": [
      "{@link module:object.collapse|collapse()} - used with collapse"
    ],
    "name": "MAX_COLLAPSE_DEPTH",
    "longname": "module:object.MAX_COLLAPSE_DEPTH",
    "kind": "member",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Assign a property to an object and return object\n * (allowing for functional programming assignments)\n * @example objAssign({}, 'name', 'john').name === 'john'\n * @param {Object} [obj={}] - object to assign the value to (or null for a new one)\n * @param {String} propertyName -\n * @param {any} value -\n * @returns {Object}\n */",
    "meta": {
      "range": [
        5098,
        5671
      ],
      "filename": "object.js",
      "lineno": 109,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006749",
        "name": "module.exports.objAssign",
        "type": "FunctionExpression",
        "value": "objAssign",
        "paramnames": [
          "obj",
          "propertyName",
          "value",
          "propertyNameValues"
        ]
      },
      "vars": {
        "obj": "module:object~obj",
        "obj[undefined]": "module:object~obj.undefined]"
      }
    },
    "description": "Assign a property to an object and return object\n(allowing for functional programming assignments)",
    "examples": [
      "objAssign({}, 'name', 'john').name === 'john'"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "object to assign the value to (or null for a new one)",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "-",
        "name": "propertyName"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "-",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "name": "objAssign",
    "longname": "module:object.objAssign",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5456,
        5464
      ],
      "filename": "object.js",
      "lineno": 116,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006793",
        "name": "obj",
        "type": "ObjectExpression",
        "funcscope": "module:object.objAssign",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "obj",
    "longname": "module:object~obj",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5468,
        5493
      ],
      "filename": "object.js",
      "lineno": 117,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006797",
        "name": "obj[undefined]",
        "type": "Identifier",
        "funcscope": "module:object.objAssign",
        "value": "value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:object~obj.undefined]",
    "kind": "member",
    "memberof": "module:object~obj",
    "scope": "static"
  },
  {
    "comment": "/**\n * Assigns multiple object entities [[property, value], [property, value], ...];\n * \n * @param {Object} [obj={}] - object to assign the values to\n * @param {Array} entities - 2d array [[property, value], ...]\n * @returns {Object}\n */",
    "meta": {
      "range": [
        5912,
        6339
      ],
      "filename": "object.js",
      "lineno": 133,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006824",
        "name": "module.exports.objAssignEntities",
        "type": "FunctionExpression",
        "value": "objAssignEntities",
        "paramnames": [
          "obj",
          "entities"
        ]
      },
      "vars": {
        "obj": "module:object~obj",
        "": null
      }
    },
    "description": "Assigns multiple object entities [[property, value], [property, value], ...];",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "object to assign the values to",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "2d array [[property, value], ...]",
        "name": "entities"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "name": "objAssignEntities",
    "longname": "module:object.objAssignEntities",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6003,
        6011
      ],
      "filename": "object.js",
      "lineno": 134,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006839",
        "name": "obj",
        "type": "ObjectExpression",
        "funcscope": "module:object.objAssignEntities",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "obj",
    "longname": "module:object~obj",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6294,
        6315
      ],
      "filename": "object.js",
      "lineno": 143,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006874",
        "name": "obj[undefined]",
        "type": "Identifier",
        "funcscope": "module:object.objAssignEntities",
        "value": "value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:object~obj.undefined]",
    "kind": "member",
    "memberof": "module:object~obj",
    "scope": "static"
  },
  {
    "comment": "/**\n * Runs a map over a collection, and adds properties the the objects.\n * \n * @param {Object | Array<Object>} objCollection - object or collection of objects to augment\n * @param {Function | Object} mappingFn - (record) => {Object} mapping function <br />\n *            or object with properties to create \n * @param {Boolean} [inPlace=false] - whether to update the collection in place (true) or cloned (false)\n * @returns {Array<Object>} - collection of records with the fields merged\n * @example\n * data = [{ source: 'A', value: 5 }, { source: 'B', value: 11 },\n *        { source: 'A', value: 6 }, { source: 'B', value: 13 },\n *        { source: 'A', value: 5 }, { source: 'B', value: 12 }];\n * utils.object.augment(data, (record) => ({ origin: 's_' + record.source }));\n * // returns\n * [{ source: 'A', value: 5, origin: 's_A' }, { source: 'B', value: 11, origin: 's_B' },\n *  { source: 'A', value: 6, origin: 's_A' }, { source: 'B', value: 13, origin: 's_B' },\n *  { source: 'A', value: 5, origin: 's_A' }, { source: 'B', value: 12, origin: 's_B' }];\n * \n * // by default `inPlace = false`, and data is not updated\n * data[0] // { source: 'A', value: 5 }\n * \n * // if `inPlace = true`, then data would be updated\n * data[0] // { source: 'A', value: 5, origin: 's_A' }\n */",
    "meta": {
      "range": [
        7623,
        8073
      ],
      "filename": "object.js",
      "lineno": 173,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006882",
        "name": "module.exports.augment",
        "type": "FunctionExpression",
        "value": "augment",
        "paramnames": [
          "objCollection",
          "mappingFn",
          "inPlace"
        ]
      },
      "vars": {
        "collection": "module:object.augment~collection",
        "results": "module:object~results",
        "": null
      }
    },
    "description": "Runs a map over a collection, and adds properties the the objects.",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "object or collection of objects to augment",
        "name": "objCollection"
      },
      {
        "type": {
          "names": [
            "function",
            "Object"
          ]
        },
        "description": "(record) => {Object} mapping function <br />\n           or object with properties to create",
        "name": "mappingFn"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "whether to update the collection in place (true) or cloned (false)",
        "name": "inPlace"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- collection of records with the fields merged"
      }
    ],
    "examples": [
      "data = [{ source: 'A', value: 5 }, { source: 'B', value: 11 },\n       { source: 'A', value: 6 }, { source: 'B', value: 13 },\n       { source: 'A', value: 5 }, { source: 'B', value: 12 }];\nutils.object.augment(data, (record) => ({ origin: 's_' + record.source }));\n// returns\n[{ source: 'A', value: 5, origin: 's_A' }, { source: 'B', value: 11, origin: 's_B' },\n { source: 'A', value: 6, origin: 's_A' }, { source: 'B', value: 13, origin: 's_B' },\n { source: 'A', value: 5, origin: 's_A' }, { source: 'B', value: 12, origin: 's_B' }];\n\n// by default `inPlace = false`, and data is not updated\ndata[0] // { source: 'A', value: 5 }\n\n// if `inPlace = true`, then data would be updated\ndata[0] // { source: 'A', value: 5, origin: 's_A' }"
    ],
    "name": "augment",
    "longname": "module:object.augment",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7718,
        7801
      ],
      "filename": "object.js",
      "lineno": 174,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006897",
        "name": "collection",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "collection",
    "longname": "module:object.augment~collection",
    "kind": "constant",
    "memberof": "module:object.augment",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7812,
        7819
      ],
      "filename": "object.js",
      "lineno": 178,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006909",
        "name": "results"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object.augment~results",
    "kind": "member",
    "memberof": "module:object.augment",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7935,
        7955
      ],
      "filename": "object.js",
      "lineno": 183,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006932",
        "name": "results",
        "type": "Identifier",
        "funcscope": "module:object.augment",
        "value": "collection",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object~results",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7972,
        8047
      ],
      "filename": "object.js",
      "lineno": 185,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006937",
        "name": "results",
        "type": "CallExpression",
        "funcscope": "module:object.augment",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object~results",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Creates a map of a list of objects based on a specific property\n * @param {Object[]} collection - collection of objects\n * @param {String} propertyName - the name of the property to map on\n * @returns {Map<String, Object>} - map using the propertyName as the key\n * @see {@link module:group.by|group(collection, accessor)} - if there is a possibility the records are not unique\n * @example\n * const data = [{ id: '123', name: 'jim' },\n *    { id: '456', name: 'mary' },\n *    { id: '789', name: 'sue' }];\n * mapByProperty(data, 'id');\n * // Map(\n * //      '123': { id: '123', name: 'jim' },\n * //      '456': { id: '456', name: 'mary' },\n * //      '789': { id: '789', name: 'sue' });\n */",
    "meta": {
      "range": [
        8773,
        9095
      ],
      "filename": "object.js",
      "lineno": 207,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006955",
        "name": "module.exports.mapByProperty",
        "type": "FunctionExpression",
        "value": "mapByProperty",
        "paramnames": [
          "collection",
          "propertyName"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates a map of a list of objects based on a specific property",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the name of the property to map on",
        "name": "propertyName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Map.<String, Object>"
          ]
        },
        "description": "- map using the propertyName as the key"
      }
    ],
    "see": [
      "{@link module:group.by|group(collection, accessor)} - if there is a possibility the records are not unique"
    ],
    "examples": [
      "const data = [{ id: '123', name: 'jim' },\n   { id: '456', name: 'mary' },\n   { id: '789', name: 'sue' }];\nmapByProperty(data, 'id');\n// Map(\n//      '123': { id: '123', name: 'jim' },\n//      '456': { id: '456', name: 'mary' },\n//      '789': { id: '789', name: 'sue' });"
    ],
    "name": "mapByProperty",
    "longname": "module:object.mapByProperty",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Safely gets the keys from an object or array of objects\n * NOTE: much faster on object, as it will assume it needs to check all items in the aray\n * @param {(Object|Array)} objOrArray -\n * @returns {String[]} - list of all the keys found\n */",
    "meta": {
      "range": [
        9347,
        9613
      ],
      "filename": "object.js",
      "lineno": 224,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100006998",
        "name": "module.exports.keys",
        "type": "FunctionExpression",
        "value": "keys",
        "paramnames": [
          "objOrArray"
        ]
      },
      "vars": {
        "result": "module:object.keys~result",
        "": null
      }
    },
    "description": "Safely gets the keys from an object or array of objects\nNOTE: much faster on object, as it will assume it needs to check all items in the aray",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array"
          ]
        },
        "description": "-",
        "name": "objOrArray"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "- list of all the keys found"
      }
    ],
    "name": "keys",
    "longname": "module:object.keys",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9490,
        9508
      ],
      "filename": "object.js",
      "lineno": 229,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007023",
        "name": "result",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:object.keys~result",
    "kind": "constant",
    "memberof": "module:object.keys",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Cleans all the properties of the array of objects in place (does not make Copies)\n * \n * **NOTE: This is faster than {@link module:ObjectUtils.cleanProperties2|cleanProperties2},\n * but the standard order of the properties (using Object.keys) will be altered.**\n * \n * @param {Object[]} objectsToBeCleaned -\n * @return {Object[]} - cleaned objects\n */",
    "meta": {
      "range": [
        9975,
        10179
      ],
      "filename": "object.js",
      "lineno": 243,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007047",
        "name": "module.exports.cleanProperties",
        "type": "FunctionExpression",
        "value": "cleanProperties",
        "paramnames": [
          "objectsToBeCleaned"
        ]
      }
    },
    "description": "Cleans all the properties of the array of objects in place (does not make Copies)\n\n**NOTE: This is faster than {@link module:ObjectUtils.cleanProperties2|cleanProperties2},\nbut the standard order of the properties (using Object.keys) will be altered.**",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "-",
        "name": "objectsToBeCleaned"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- cleaned objects"
      }
    ],
    "name": "cleanProperties",
    "longname": "module:object.cleanProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Labels and Values from {@link module:object.cleanProperties2|object.cleanProperties2}\n * \n * ```\n * {\n *   labels: { date: 'date', kind: 'kind', num: 'num' },\n *   values: [\n *     { date: ' 2021-07-11T22:23:07+0100', kind: ' s', num: '192' },\n *     { date: ' 2021-07-09T19:54:48+0100', kind: ' c', num: '190' },\n *     { date: ' 2021-07-08T17:00:32+0100', kind: ' s', num: '190' }\n *   ]\n * };\n * ```\n * \n * @typedef {Object} CleanedProperties\n * @property {Object} labels - an object with translations of the fields and labels\n * @property {String} labels.property - for each translated property, stores the original property name\n * @property {Object[]} values - cleaned values\n \n */",
    "meta": {
      "filename": "object.js",
      "lineno": 250,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Labels and Values from {@link module:object.cleanProperties2|object.cleanProperties2}\n\n```\n{\n  labels: { date: 'date', kind: 'kind', num: 'num' },\n  values: [\n    { date: ' 2021-07-11T22:23:07+0100', kind: ' s', num: '192' },\n    { date: ' 2021-07-09T19:54:48+0100', kind: ' c', num: '190' },\n    { date: ' 2021-07-08T17:00:32+0100', kind: ' s', num: '190' }\n  ]\n};\n```",
    "kind": "typedef",
    "name": "CleanedProperties",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "an object with translations of the fields and labels",
        "name": "labels"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "for each translated property, stores the original property name",
        "name": "labels.property"
      },
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "cleaned values",
        "name": "values"
      }
    ],
    "longname": "module:object~CleanedProperties",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Cleans properties on clones of objects.\n * \n * Additionally, this returns a mapping of what the properties used to be named,\n * as this can be helpful for rendering out tables.\n * \n * @param {Object[]} objectsToBeCleaned - collection of objects to be cleaned\n * @returns {CleanedProperties} - { labels: Object - propertyName:originalProperty, values: cleaned collection }\n * @see {@link module:object~CleanedProperties}\n * @example\nconst badData = [\n  { '\"name\"': 'john', num: '192', ' kind': ' s', '1st date': ' 2021-07-11T22:23:07+0100' },\n  { '\"name\"': 'jane', num: '190', ' kind': ' c', '1st date': ' 2021-07-09T19:54:48+0100' },\n  { '\"name\"': 'ringo', num: '190', ' kind': ' s', '1st date': ' 2021-07-08T17:00:32+0100' }\n];\nconst cleaned = objectUtils.cleanProperties2(badData);\n// {\n//   labels: { 1st_date: '1st date', kind: 'kind', num: 'num' },\n//   values: [\n//     { name: 'john', num: '192', kind: ' s', '1st_date': ' 2021-07-11T22:23:07+0100' },\n//     { name: 'jane', num: '190', kind: ' c', '1st_date': ' 2021-07-09T19:54:48+0100' },\n//     { name: 'ringo', num: '190', kind: ' s', '1st_date': ' 2021-07-08T17:00:32+0100' }\n//   ]\n// }\n */",
    "meta": {
      "range": [
        12040,
        12653
      ],
      "filename": "object.js",
      "lineno": 296,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007069",
        "name": "module.exports.cleanProperties2",
        "type": "FunctionExpression",
        "value": "cleanProperties2",
        "paramnames": [
          "objectsToBeCleaned"
        ]
      },
      "vars": {
        "cleanedPropertyNames": "module:object.cleanProperties2~cleanedPropertyNames",
        "keys": "module:object.cleanProperties2~keys",
        "translation": "module:object.cleanProperties2~translation",
        "": null,
        "values": "module:object.cleanProperties2~values"
      }
    },
    "description": "Cleans properties on clones of objects.\n\nAdditionally, this returns a mapping of what the properties used to be named,\nas this can be helpful for rendering out tables.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to be cleaned",
        "name": "objectsToBeCleaned"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "CleanedProperties"
          ]
        },
        "description": "- { labels: Object - propertyName:originalProperty, values: cleaned collection }"
      }
    ],
    "see": [
      "{@link module:object~CleanedProperties}"
    ],
    "examples": [
      "const badData = [\n  { '\"name\"': 'john', num: '192', ' kind': ' s', '1st date': ' 2021-07-11T22:23:07+0100' },\n  { '\"name\"': 'jane', num: '190', ' kind': ' c', '1st date': ' 2021-07-09T19:54:48+0100' },\n  { '\"name\"': 'ringo', num: '190', ' kind': ' s', '1st date': ' 2021-07-08T17:00:32+0100' }\n];\nconst cleaned = objectUtils.cleanProperties2(badData);\n// {\n//   labels: { 1st_date: '1st date', kind: 'kind', num: 'num' },\n//   values: [\n//     { name: 'john', num: '192', kind: ' s', '1st_date': ' 2021-07-11T22:23:07+0100' },\n//     { name: 'jane', num: '190', kind: ' c', '1st_date': ' 2021-07-09T19:54:48+0100' },\n//     { name: 'ringo', num: '190', kind: ' s', '1st_date': ' 2021-07-08T17:00:32+0100' }\n//   ]\n// }"
    ],
    "name": "cleanProperties2",
    "longname": "module:object.cleanProperties2",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12130,
        12203
      ],
      "filename": "object.js",
      "lineno": 297,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007080",
        "name": "cleanedPropertyNames",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedPropertyNames",
    "longname": "module:object.cleanProperties2~cleanedPropertyNames",
    "kind": "constant",
    "memberof": "module:object.cleanProperties2",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12213,
        12258
      ],
      "filename": "object.js",
      "lineno": 298,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007088",
        "name": "keys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "keys",
    "longname": "module:object.cleanProperties2~keys",
    "kind": "constant",
    "memberof": "module:object.cleanProperties2",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12269,
        12417
      ],
      "filename": "object.js",
      "lineno": 300,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007096",
        "name": "translation",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "translation",
    "longname": "module:object.cleanProperties2~translation",
    "kind": "constant",
    "memberof": "module:object.cleanProperties2",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12430,
        12603
      ],
      "filename": "object.js",
      "lineno": 303,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007120",
        "name": "values",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "values",
    "longname": "module:object.cleanProperties2~values",
    "kind": "constant",
    "memberof": "module:object.cleanProperties2",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12620,
        12639
      ],
      "filename": "object.js",
      "lineno": 309,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007151",
        "name": "labels",
        "type": "Identifier",
        "value": "translation"
      }
    },
    "undocumented": true,
    "name": "labels",
    "longname": "module:object~labels",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12641,
        12647
      ],
      "filename": "object.js",
      "lineno": 309,
      "columnno": 33,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007153",
        "name": "values",
        "type": "Identifier",
        "value": "values"
      }
    },
    "undocumented": true,
    "name": "values",
    "longname": "module:object~values",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * cleans properties so they are still legible\n * @private\n * @param {String} propertyName - property name to be cleaned\n * @returns {String}\n */",
    "meta": {
      "range": [
        12806,
        13013
      ],
      "filename": "object.js",
      "lineno": 318,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007156",
        "name": "module.exports.lightlyCleanProperty",
        "type": "FunctionExpression",
        "value": "lightlyCleanProperty",
        "paramnames": [
          "propertyName"
        ]
      }
    },
    "description": "cleans properties so they are still legible",
    "access": "private",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "property name to be cleaned",
        "name": "propertyName"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "name": "lightlyCleanProperty",
    "longname": "module:object.lightlyCleanProperty",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Cleans the list of object keys - likely from a CSV\n * @param {(Object| String[])} objectKeys -\n * @return {Object} - object with key:value as original:new\n */",
    "meta": {
      "range": [
        13182,
        13673
      ],
      "filename": "object.js",
      "lineno": 330,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007182",
        "name": "module.exports.cleanPropertyNames",
        "type": "FunctionExpression",
        "value": "cleanPropertyNames",
        "paramnames": [
          "target"
        ]
      },
      "vars": {
        "originalKeys": "module:object~originalKeys",
        "result": "module:object.cleanPropertyNames~result",
        "": null
      }
    },
    "description": "Cleans the list of object keys - likely from a CSV",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<String>"
          ]
        },
        "description": "-",
        "name": "objectKeys"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- object with key:value as original:new"
      }
    ],
    "name": "cleanPropertyNames",
    "longname": "module:object.cleanPropertyNames",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13262,
        13274
      ],
      "filename": "object.js",
      "lineno": 331,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007193",
        "name": "originalKeys"
      }
    },
    "undocumented": true,
    "name": "originalKeys",
    "longname": "module:object.cleanPropertyNames~originalKeys",
    "kind": "member",
    "memberof": "module:object.cleanPropertyNames",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13395,
        13416
      ],
      "filename": "object.js",
      "lineno": 336,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007217",
        "name": "originalKeys",
        "type": "Identifier",
        "funcscope": "module:object.cleanPropertyNames",
        "value": "target",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "originalKeys",
    "longname": "module:object~originalKeys",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13437,
        13476
      ],
      "filename": "object.js",
      "lineno": 338,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007222",
        "name": "originalKeys",
        "type": "CallExpression",
        "funcscope": "module:object.cleanPropertyNames",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "originalKeys",
    "longname": "module:object~originalKeys",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13499,
        13533
      ],
      "filename": "object.js",
      "lineno": 341,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007231",
        "name": "originalKeys",
        "type": "CallExpression",
        "funcscope": "module:object.cleanPropertyNames",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "originalKeys",
    "longname": "module:object~originalKeys",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13548,
        13559
      ],
      "filename": "object.js",
      "lineno": 344,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007239",
        "name": "result",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:object.cleanPropertyNames~result",
    "kind": "constant",
    "memberof": "module:object.cleanPropertyNames",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13599,
        13647
      ],
      "filename": "object.js",
      "lineno": 346,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007251",
        "name": "result[undefined]",
        "type": "CallExpression",
        "funcscope": "module:object.cleanPropertyNames",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:object.cleanPropertyNames~result.undefined]",
    "kind": "member",
    "memberof": "module:object.cleanPropertyNames~result",
    "scope": "static"
  },
  {
    "comment": "/**\n * Cleans an individual property\n * @param {String} property -\n * @returns {String}\n */",
    "meta": {
      "range": [
        13768,
        13981
      ],
      "filename": "object.js",
      "lineno": 356,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007263",
        "name": "module.exports.cleanPropertyName",
        "type": "FunctionExpression",
        "value": "cleanPropertyName",
        "paramnames": [
          "property"
        ]
      },
      "vars": {
        "cleanProperty": "module:object.cleanPropertyName~cleanProperty"
      }
    },
    "description": "Cleans an individual property",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "-",
        "name": "property"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "name": "cleanPropertyName",
    "longname": "module:object.cleanPropertyName",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13850,
        13954
      ],
      "filename": "object.js",
      "lineno": 357,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007274",
        "name": "cleanProperty",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanProperty",
    "longname": "module:object.cleanPropertyName~cleanProperty",
    "kind": "constant",
    "memberof": "module:object.cleanPropertyName",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13990,
        14353
      ],
      "filename": "object.js",
      "lineno": 364,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007296",
        "name": "renameObjectProperties",
        "type": "FunctionExpression",
        "value": "renameObjectProperties"
      },
      "vars": {
        "result": "module:object~renameObjectProperties~result",
        "": null
      }
    },
    "undocumented": true,
    "name": "renameObjectProperties",
    "longname": "module:object~renameObjectProperties",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:object",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14091,
        14113
      ],
      "filename": "object.js",
      "lineno": 365,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007305",
        "name": "result",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:object~renameObjectProperties~result",
    "kind": "constant",
    "memberof": "module:object~renameObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14174,
        14203
      ],
      "filename": "object.js",
      "lineno": 367,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007320",
        "name": "targetKey",
        "type": "MemberExpression",
        "value": "targetKeys[undefined]"
      }
    },
    "undocumented": true,
    "name": "targetKey",
    "longname": "<anonymous>~targetKey",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14248,
        14287
      ],
      "filename": "object.js",
      "lineno": 369,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007331",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:object~renameObjectProperties",
        "value": "result[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:object~renameObjectProperties~result.undefined]",
    "kind": "member",
    "memberof": "module:object~renameObjectProperties~result",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Property Reassign - either against a single object or an array of objects\n   * @example renameProperties(\n   *  { '\"first name\"': 'john', '\"last name\"': 'doe' }, {'\"first name\"':'first_name'}\n   *  ).deepEquals({first_name: 'john', '\"last name\"': 'doe'})\n   * @param {Object[]} objects - objects to reassign - likely from a CSV\n   * @param {Object} propertyTranslations - where property:value is original:new\n   * @returns {Object[]}\n   */",
    "meta": {
      "range": [
        14805,
        15226
      ],
      "filename": "object.js",
      "lineno": 385,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007346",
        "name": "module.exports.renameProperties",
        "type": "FunctionExpression",
        "value": "renameProperties",
        "paramnames": [
          "objects",
          "propertyTranslations"
        ]
      },
      "vars": {
        "originalKeys": "module:object.renameProperties~originalKeys",
        "targetKeys": "module:object.renameProperties~targetKeys",
        "": null
      }
    },
    "description": "Property Reassign - either against a single object or an array of objects",
    "examples": [
      "renameProperties(\n { '\"first name\"': 'john', '\"last name\"': 'doe' }, {'\"first name\"':'first_name'}\n ).deepEquals({first_name: 'john', '\"last name\"': 'doe'})"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "objects to reassign - likely from a CSV",
        "name": "objects"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "where property:value is original:new",
        "name": "propertyTranslations"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        }
      }
    ],
    "name": "renameProperties",
    "longname": "module:object.renameProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14906,
        14954
      ],
      "filename": "object.js",
      "lineno": 386,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007358",
        "name": "originalKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "originalKeys",
    "longname": "module:object.renameProperties~originalKeys",
    "kind": "constant",
    "memberof": "module:object.renameProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14964,
        15012
      ],
      "filename": "object.js",
      "lineno": 387,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007366",
        "name": "targetKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetKeys",
    "longname": "module:object.renameProperties~targetKeys",
    "kind": "constant",
    "memberof": "module:object.renameProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15235,
        15763
      ],
      "filename": "object.js",
      "lineno": 397,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007399",
        "name": "collapseSpecificObject",
        "type": "FunctionExpression",
        "value": "collapseSpecificObject"
      },
      "vars": {
        "targetObjProperties": "module:object~collapseSpecificObject~targetObjProperties",
        "": null
      }
    },
    "undocumented": true,
    "name": "collapseSpecificObject",
    "longname": "module:object~collapseSpecificObject",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:object",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15406,
        15465
      ],
      "filename": "object.js",
      "lineno": 400,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007418",
        "name": "targetObjProperties",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetObjProperties",
    "longname": "module:object~collapseSpecificObject~targetObjProperties",
    "kind": "constant",
    "memberof": "module:object~collapseSpecificObject",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15523,
        15556
      ],
      "filename": "object.js",
      "lineno": 402,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007434",
        "name": "propType",
        "type": "UnaryExpression",
        "value": "typeoftargetObj[undefined]"
      }
    },
    "undocumented": true,
    "name": "propType",
    "longname": "<anonymous>~propType",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15687,
        15720
      ],
      "filename": "object.js",
      "lineno": 406,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007457",
        "name": "sourceObj[undefined]",
        "type": "MemberExpression",
        "value": "targetObj[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "sourceObj[undefined]",
    "longname": "module:object~sourceObj[undefined]",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Collapse an object tree into a single object with all the properties.\n * @example\n * const targetObj = { make: 'Ford', model: 'F150', driver: {firstName:'John', lastName:'doe'}};\n * const collapsed - utils.collapse(targetObj);\n * console.log(`Hi ${collapsed.firstName}, how do you like your ${collapsed.model}?`);\n * // 'Hi John, how do you like your F150?\n * @param {Object} objectTree\n * @returns {Object} - object with all the properties added\n * @see #MAX_COLLAPSE_DEPTH - \n */",
    "meta": {
      "range": [
        16255,
        16364
      ],
      "filename": "object.js",
      "lineno": 424,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007467",
        "name": "module.exports.collapse",
        "type": "FunctionExpression",
        "value": "collapse",
        "paramnames": [
          "targetObj"
        ]
      }
    },
    "description": "Collapse an object tree into a single object with all the properties.",
    "examples": [
      "const targetObj = { make: 'Ford', model: 'F150', driver: {firstName:'John', lastName:'doe'}};\nconst collapsed - utils.collapse(targetObj);\nconsole.log(`Hi ${collapsed.firstName}, how do you like your ${collapsed.model}?`);\n// 'Hi John, how do you like your F150?"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "objectTree"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- object with all the properties added"
      }
    ],
    "see": [
      "#MAX_COLLAPSE_DEPTH -"
    ],
    "name": "collapse",
    "longname": "module:object.collapse",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Keeps only specific properties on an object or list of objects\n * @param {Object | Object[]} list - collection of objects to filter\n * @param {String[]} propertyNames - list of the only properties to keep\n * @returns {Object[]}\n */",
    "meta": {
      "range": [
        16606,
        17079
      ],
      "filename": "object.js",
      "lineno": 434,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007484",
        "name": "module.exports.selectObjectProperties",
        "type": "FunctionExpression",
        "value": "selectObjectProperties",
        "paramnames": [
          "list",
          "propertyNames"
        ]
      },
      "vars": {
        "cleanPropertyNames": "module:object.selectObjectProperties~cleanPropertyNames",
        "targetList": "module:object.selectObjectProperties~targetList",
        "": null
      }
    },
    "description": "Keeps only specific properties on an object or list of objects",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to filter",
        "name": "list"
      },
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "list of the only properties to keep",
        "name": "propertyNames"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        }
      }
    ],
    "name": "selectObjectProperties",
    "longname": "module:object.selectObjectProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16712,
        16835
      ],
      "filename": "object.js",
      "lineno": 435,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007497",
        "name": "cleanPropertyNames",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanPropertyNames",
    "longname": "module:object.selectObjectProperties~cleanPropertyNames",
    "kind": "constant",
    "memberof": "module:object.selectObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        16870,
        16918
      ],
      "filename": "object.js",
      "lineno": 440,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007523",
        "name": "targetList",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetList",
    "longname": "module:object.selectObjectProperties~targetList",
    "kind": "constant",
    "memberof": "module:object.selectObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Removes specific properties on an object or list of objects\n * @param {Object | Object[]} list - collection of objects to filter\n * @param {String[]} propertyNames - list of the only properties to keep\n * @returns {Object[]}\n */",
    "meta": {
      "range": [
        17318,
        17666
      ],
      "filename": "object.js",
      "lineno": 455,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007559",
        "name": "module.exports.filterObjectProperties",
        "type": "FunctionExpression",
        "value": "filterObjectProperties",
        "paramnames": [
          "list",
          "propertyNames"
        ]
      },
      "vars": {
        "targetList": "module:object.filterObjectProperties~targetList",
        "": null
      }
    },
    "description": "Removes specific properties on an object or list of objects",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to filter",
        "name": "list"
      },
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "list of the only properties to keep",
        "name": "propertyNames"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        }
      }
    ],
    "name": "filterObjectProperties",
    "longname": "module:object.filterObjectProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17445,
        17493
      ],
      "filename": "object.js",
      "lineno": 457,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007576",
        "name": "targetList",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetList",
    "longname": "module:object.filterObjectProperties~targetList",
    "kind": "constant",
    "memberof": "module:object.filterObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17540,
        17558
      ],
      "filename": "object.js",
      "lineno": 459,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007596",
        "name": "clone",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "clone",
    "longname": "<anonymous>~clone",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Options for fetching object properties\n * @typedef {Object} FetchObjectOptions\n * @property {Boolean} safeAccess - whether to safely access, even if the path cannot be found\n * @property {Boolean} append - whether to only return the properties (default) or append\n */",
    "meta": {
      "filename": "object.js",
      "lineno": 465,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Options for fetching object properties",
    "kind": "typedef",
    "name": "FetchObjectOptions",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "whether to safely access, even if the path cannot be found",
        "name": "safeAccess"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "whether to only return the properties (default) or append",
        "name": "append"
      }
    ],
    "longname": "module:object~FetchObjectOptions",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Fetches multiple properties from an object or list of objects.\n * @param {Object | Object[]} list - collection of objects to reduce\n * @param {Map<String,any>} propertyNames - Object with the keys as the properties\n *    and the values using dot notation to access related records and properties\n *    (ex: {parentName: 'somePropertyObject.parent.parent.name', childName: 'child.Name'})\n * @param {FetchObjectOptions} options - {@link module:object~FetchObjectOptions|See FetchObjectOptions} \n * @returns {Object[]} - objects with the properties resolved\n *    (ex: {parentname, childName, etc.})\n */",
    "meta": {
      "range": [
        18553,
        19261
      ],
      "filename": "object.js",
      "lineno": 482,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007615",
        "name": "module.exports.fetchObjectProperties",
        "type": "FunctionExpression",
        "value": "fetchObjectProperties",
        "paramnames": [
          "list",
          "propertyNames",
          "options"
        ]
      },
      "vars": {
        "undefined": null,
        "targetList": "module:object.fetchObjectProperties~targetList",
        "props": "module:object.fetchObjectProperties~props",
        "": null
      }
    },
    "description": "Fetches multiple properties from an object or list of objects.",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to reduce",
        "name": "list"
      },
      {
        "type": {
          "names": [
            "Map.<String, any>"
          ]
        },
        "description": "Object with the keys as the properties\n   and the values using dot notation to access related records and properties\n   (ex: {parentName: 'somePropertyObject.parent.parent.name', childName: 'child.Name'})",
        "name": "propertyNames"
      },
      {
        "type": {
          "names": [
            "FetchObjectOptions"
          ]
        },
        "description": "{@link module:object~FetchObjectOptions|See FetchObjectOptions}",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- objects with the properties resolved\n   (ex: {parentname, childName, etc.})"
      }
    ],
    "name": "fetchObjectProperties",
    "longname": "module:object.fetchObjectProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18744,
        18762
      ],
      "filename": "object.js",
      "lineno": 485,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007632",
        "name": "safeAccess",
        "type": "AssignmentPattern",
        "value": "safeAccess"
      }
    },
    "undocumented": true,
    "name": "safeAccess",
    "longname": "module:object~safeAccess",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18851,
        18865
      ],
      "filename": "object.js",
      "lineno": 488,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007636",
        "name": "append",
        "type": "AssignmentPattern",
        "value": "append"
      }
    },
    "undocumented": true,
    "name": "append",
    "longname": "module:object~append",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18914,
        18962
      ],
      "filename": "object.js",
      "lineno": 492,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007647",
        "name": "targetList",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetList",
    "longname": "module:object.fetchObjectProperties~targetList",
    "kind": "constant",
    "memberof": "module:object.fetchObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18973,
        19022
      ],
      "filename": "object.js",
      "lineno": 494,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007659",
        "name": "props",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "props",
    "longname": "module:object.fetchObjectProperties~props",
    "kind": "constant",
    "memberof": "module:object.fetchObjectProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19070,
        19103
      ],
      "filename": "object.js",
      "lineno": 497,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007675",
        "name": "result",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19141,
        19225
      ],
      "filename": "object.js",
      "lineno": 499,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007692",
        "name": "result[undefined]",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "<anonymous>~result.undefined]",
    "kind": "member",
    "memberof": "<anonymous>~result",
    "scope": "static"
  },
  {
    "comment": "/**\n * Accesses a property using a string\n * @param {Object} obj - object to access the properties on\n * @param {String} propertyAccess - dot notation for the property to access\n *    (ex: `parent.obj.Name`)\n * @param {FetchObjectOptions} options - {@link module:object~FetchObjectOptions|See FetchObjectOptions}\n * @returns {any} - the value accessed at the end ofthe property chain\n */",
    "meta": {
      "range": [
        19652,
        20189
      ],
      "filename": "object.js",
      "lineno": 513,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007708",
        "name": "module.exports.fetchObjectProperty",
        "type": "FunctionExpression",
        "value": "fetchObjectProperty",
        "paramnames": [
          "obj",
          "propertyAccess",
          "safeAccess"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Accesses a property using a string",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object to access the properties on",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "dot notation for the property to access\n   (ex: `parent.obj.Name`)",
        "name": "propertyAccess"
      },
      {
        "type": {
          "names": [
            "FetchObjectOptions"
          ]
        },
        "description": "{@link module:object~FetchObjectOptions|See FetchObjectOptions}",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- the value accessed at the end ofthe property chain"
      }
    ],
    "name": "fetchObjectProperty",
    "longname": "module:object.fetchObjectProperty",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Translates specific properties to a new value on an object, or collection of objects.\n * \n * The properties defined in the `propertyTranslations` argument is then the property to be updated. (All other properties remain the same)\n * \n * You can either provide a function accepting the current value and returning the new value (any) => any\n * \n * Or you can provide one of the common shorthands:\n * \n * * 'string'\n * * 'float' or 'number'\n * * 'int' or 'integer'\n * * 'boolean'\n * \n * ```\n * data = [\n *   {station: 'A', isFahreinheit: 'true', offset: '0', temp: 98, type: 'F', descr: '0123'},\n *   {station: 'A', isFahreinheit: 'TRUE', offset: '2', temp: 99, type: 'F', descr: '0123456'},\n *   {station: 'A', isFahreinheit: 'false', offset: '3', temp: 100, type: 'F', descr: '0123456789'}\n * ];\n * \n * utils.object.format(data, ({\n *   //-- to a literal value\n *   type: 'C',\n *   //-- convert it to 'string', 'number' || 'float', 'int' || 'integer', 'boolean'\n *   offset: 'number',\n *   isFahreinheit: 'boolean',\n *   //-- or convert the value with a function accepting the current value\n *   //-- and returning the new value\n *   temp: (val) => (val - 32) * 0.5556\n * }));\n * \n * // [\n * //   { station: 'A', isFahreinheit: true, offset: 0, temp: 36.669599999999996, type: 'C', descr: '0123' },\n * //   { station: 'A', isFahreinheit: true, offset: 2, temp: 37.2252, type: 'C', descr: '0123456' },\n * //   { station: 'A', isFahreinheit: false, offset: 3, temp: 37.7808, type: 'C', descr: '0123456789' }\n * // ];\n * ```\n * \n * **Please note, you can pass a single object to be cleaned**,<br /> but it will be returned as an array of one object.\n * \n * ```\n * data = [{station: 'A', isFahreinheit: 'TRUE', offset: '2', temp: 99, type: 'F', descr: '0123456'}];\n * \n * utils.object.format(data, ({\n *   //-- convert it to 'string', 'number' || 'float', 'int' || 'integer', 'boolean'\n *   offset: 'number',\n *   isFahreinheit: 'boolean'\n * }));\n * \n * // [{station: 'A', isFahreinheit: true, offset: 2, temp: 99, type: 'F', descr: '0123456'}];\n * ```\n * \n * @param {Object} collection - the list of objects to update specific properties\n * @param {Object} propertyTranslations - An object with property names as the properties to update <br />\n *      and the values as a function ((any) => any) accepting the current value, returning the new value.\n * @returns {Object[]} - collection of objects transformed\n * @see {@link module:object.augment|augment(collection, fn)} - to add in new properties\n * @see {@link TableGenerator#formatter} - for other examples\n */",
    "meta": {
      "range": [
        22761,
        23323
      ],
      "filename": "object.js",
      "lineno": 588,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007772",
        "name": "module.exports.formatProperties",
        "type": "FunctionExpression",
        "value": "formatProperties",
        "paramnames": [
          "collection",
          "propertyTranslations"
        ]
      },
      "vars": {
        "cleanCollection": "module:object.formatProperties~cleanCollection",
        "propertyTranslations": "module:object~propertyTranslations",
        "translationKeys": "module:object.formatProperties~translationKeys",
        "": null
      }
    },
    "description": "Translates specific properties to a new value on an object, or collection of objects.\n\nThe properties defined in the `propertyTranslations` argument is then the property to be updated. (All other properties remain the same)\n\nYou can either provide a function accepting the current value and returning the new value (any) => any\n\nOr you can provide one of the common shorthands:\n\n* 'string'\n* 'float' or 'number'\n* 'int' or 'integer'\n* 'boolean'\n\n```\ndata = [\n  {station: 'A', isFahreinheit: 'true', offset: '0', temp: 98, type: 'F', descr: '0123'},\n  {station: 'A', isFahreinheit: 'TRUE', offset: '2', temp: 99, type: 'F', descr: '0123456'},\n  {station: 'A', isFahreinheit: 'false', offset: '3', temp: 100, type: 'F', descr: '0123456789'}\n];\n\nutils.object.format(data, ({\n  //-- to a literal value\n  type: 'C',\n  //-- convert it to 'string', 'number' || 'float', 'int' || 'integer', 'boolean'\n  offset: 'number',\n  isFahreinheit: 'boolean',\n  //-- or convert the value with a function accepting the current value\n  //-- and returning the new value\n  temp: (val) => (val - 32) * 0.5556\n}));\n\n// [\n//   { station: 'A', isFahreinheit: true, offset: 0, temp: 36.669599999999996, type: 'C', descr: '0123' },\n//   { station: 'A', isFahreinheit: true, offset: 2, temp: 37.2252, type: 'C', descr: '0123456' },\n//   { station: 'A', isFahreinheit: false, offset: 3, temp: 37.7808, type: 'C', descr: '0123456789' }\n// ];\n```\n\n**Please note, you can pass a single object to be cleaned**,<br /> but it will be returned as an array of one object.\n\n```\ndata = [{station: 'A', isFahreinheit: 'TRUE', offset: '2', temp: 99, type: 'F', descr: '0123456'}];\n\nutils.object.format(data, ({\n  //-- convert it to 'string', 'number' || 'float', 'int' || 'integer', 'boolean'\n  offset: 'number',\n  isFahreinheit: 'boolean'\n}));\n\n// [{station: 'A', isFahreinheit: true, offset: 2, temp: 99, type: 'F', descr: '0123456'}];\n```",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the list of objects to update specific properties",
        "name": "collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "An object with property names as the properties to update <br />\n     and the values as a function ((any) => any) accepting the current value, returning the new value.",
        "name": "propertyTranslations"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- collection of objects transformed"
      }
    ],
    "see": [
      "{@link module:object.augment|augment(collection, fn)} - to add in new properties",
      "{@link TableGenerator#formatter} - for other examples"
    ],
    "name": "formatProperties",
    "longname": "module:object.formatProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22865,
        22959
      ],
      "filename": "object.js",
      "lineno": 589,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007784",
        "name": "cleanCollection",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "module:object.formatProperties~cleanCollection",
    "kind": "constant",
    "memberof": "module:object.formatProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22966,
        23045
      ],
      "filename": "object.js",
      "lineno": 592,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007800",
        "name": "propertyTranslations",
        "type": "CallExpression",
        "funcscope": "module:object.formatProperties",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "propertyTranslations",
    "longname": "module:object~propertyTranslations",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23055,
        23118
      ],
      "filename": "object.js",
      "lineno": 593,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007808",
        "name": "translationKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "translationKeys",
    "longname": "module:object.formatProperties~translationKeys",
    "kind": "constant",
    "memberof": "module:object.formatProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23173,
        23191
      ],
      "filename": "object.js",
      "lineno": 596,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007828",
        "name": "clone",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "clone",
    "longname": "<anonymous>~clone",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23238,
        23288
      ],
      "filename": "object.js",
      "lineno": 598,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007842",
        "name": "clone[undefined]",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "<anonymous>~clone.undefined]",
    "kind": "member",
    "memberof": "<anonymous>~clone",
    "scope": "static"
  },
  {
    "comment": "/**\n * returns a map of the types of fields stored\n * @see generateSchema\n * @param {Object | Object[]} list - collection of objects to check\n * @returns {Map<String, Set<String>>} - collection of the types and the fields of those types\n */",
    "meta": {
      "range": [
        23567,
        24147
      ],
      "filename": "object.js",
      "lineno": 610,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007856",
        "name": "module.exports.getObjectPropertyTypes",
        "type": "FunctionExpression",
        "value": "getObjectPropertyTypes",
        "paramnames": [
          "list"
        ]
      },
      "vars": {
        "targetList": "module:object.getObjectPropertyTypes~targetList",
        "results": "module:object.getObjectPropertyTypes~results",
        "type": "module:object.getObjectPropertyTypes~type",
        "": null
      }
    },
    "description": "returns a map of the types of fields stored",
    "see": [
      "generateSchema"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to check",
        "name": "list"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Map.<String, Set.<String>>"
          ]
        },
        "description": "- collection of the types and the fields of those types"
      }
    ],
    "name": "getObjectPropertyTypes",
    "longname": "module:object.getObjectPropertyTypes",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23655,
        23716
      ],
      "filename": "object.js",
      "lineno": 611,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007867",
        "name": "targetList",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetList",
    "longname": "module:object.getObjectPropertyTypes~targetList",
    "kind": "constant",
    "memberof": "module:object.getObjectPropertyTypes",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23726,
        23745
      ],
      "filename": "object.js",
      "lineno": 612,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007883",
        "name": "results",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object.getObjectPropertyTypes~results",
    "kind": "constant",
    "memberof": "module:object.getObjectPropertyTypes",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23753,
        23757
      ],
      "filename": "object.js",
      "lineno": 613,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007888",
        "name": "type"
      }
    },
    "undocumented": true,
    "name": "type",
    "longname": "module:object.getObjectPropertyTypes~type",
    "kind": "member",
    "memberof": "module:object.getObjectPropertyTypes",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23851,
        23871
      ],
      "filename": "object.js",
      "lineno": 618,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007914",
        "name": "type",
        "type": "UnaryExpression",
        "funcscope": "<anonymous>",
        "value": "typeofr[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "type",
    "longname": "module:object~type",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Generates a JSON schema for an object\n * @see https://github.com/Nijikokun/generate-schema\n * @param {any} targetObj - object or array of objects\n * @returns {Object} - JSON Schema\n */",
    "meta": {
      "range": [
        24342,
        24454
      ],
      "filename": "object.js",
      "lineno": 639,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007965",
        "name": "module.exports.generateSchema",
        "type": "FunctionExpression",
        "value": "generateSchema",
        "paramnames": [
          "targetObj"
        ]
      }
    },
    "description": "Generates a JSON schema for an object",
    "see": [
      "https://github.com/Nijikokun/generate-schema"
    ],
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "object or array of objects",
        "name": "targetObj"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "- JSON Schema"
      }
    ],
    "name": "generateSchema",
    "longname": "module:object.generateSchema",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "/**\n * Join values from an objectArray to a JavaScript Map.\n * \n * For example:\n * \n * ```\n * weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   null,\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 }\n * ];\n * \n * cityLocations = new Map([\n *   ['Chicago', { locationId: 1, city: 'Chicago', lat: 41.8781, lon: 87.6298 }],\n *   ['New York', { locationId: 2, city: 'New York', lat: 40.7128, lon: 74.0060 }],\n *   ['Seattle', { locationId: 3, city: 'Seattle', lat: 47.6062, lon: 122.3321 }]\n * ]);\n * \n * utils.object.join(weather, 'city', cityLocations, (weather, city) => ({...weather, ...city}));\n * // [\n * //    {id:1, city:'Seattle',  month:'Aug', precip:0.87, locationId:3, lat:47.6062, lon:122.3321 },\n * //    null,\n * //    {id:3, city:'New York', month:'Apr', precip:3.94, locationId:2, lat:40.7128, lon:74.006 },\n * //    {id:6, city:'Chicago',  month:'Apr', precip:3.62, locationId:1, lat:41.8781, lon:87.6298 }\n * // ]\n * ```\n * \n * or join by lookup:\n * \n * ```\n * utils.object.join(weather, 'city', cityLocations, (weather, city) => ({...weather, city}));\n * [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, city:\n *     { city: 'Seattle', locationId: 3, lat: 47.6062, lon: 122.3321 }\n *   },\n *   null,\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94, city:\n *     { city: 'New York', locationId: 2, lat: 40.7128, lon: 74.006 }\n *   },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, city:\n *     { city: 'Chicago', locationId: 1, lat: 41.8781, lon: 87.6298 }\n *   }\n * ];\n * ```\n * \n * or performing a translation / calculate the index instead of a property:\n * \n * ```\n * const indexingFn = (weather) => `${weather.country}_${weather.city}`;\n * utils.object.join(weather, indexingFn, cityLocations, (weather, city) => ({...weather, ...city}));\n * // ...\n * ```\n * \n * The signature for the indexingFunction is `(sourceObj:Object): {any}` - providing the index to use against the map.\n * \n * The signature for the mapping function is `(sourceObj:Object, mappedObject:Object) => {Object}`.\n * \n * If the mappedObject could not be found by that index (left join), then mappedObject will be `null`.\n * \n * As the results of the functions are mapped, you can either modify in-line (directly on the object),\n * or on a clone of the object (ex: {...sourceObj})\n * \n * Note, performing a JavaScript .map() call may be more performant in some cases,\n * so consider it for more complex options.\n * \n * **Note: indexField can be either a string name of the field to join,\n * or a function to be passed the object and generate the index**\n * \n * @param {Array<Object>} objectArray - collection of objects to join based on the target map\n * @param {Function | String} indexField - property on each object in array to lookup against target map <br />\n *      Signature if a function: `(sourceObj:Object): {any}`\n * @param {Map} targetMap - Map with keys mapping to values to pass\n * @param {Function} joinFn - function to call each time an objectArray object, has an indexField found in targetMap <br />\n *      Signature: `(sourceObj:Object, mappedObject:Object) => {Object}`\n * @returns {Array<Object>} - Array of results returned from `joinFn`\n */",
    "meta": {
      "range": [
        27747,
        28587
      ],
      "filename": "object.js",
      "lineno": 720,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007982",
        "name": "module.exports.join",
        "type": "FunctionExpression",
        "value": "join",
        "paramnames": [
          "objectArray",
          "indexField",
          "targetMap",
          "joinFn"
        ]
      },
      "vars": {
        "cleanArray": "module:object.join~cleanArray",
        "indexFn": "module:object.join~indexFn",
        "results": "module:object.join~results",
        "": null
      }
    },
    "description": "Join values from an objectArray to a JavaScript Map.\n\nFor example:\n\n```\nweather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  null,\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 }\n];\n\ncityLocations = new Map([\n  ['Chicago', { locationId: 1, city: 'Chicago', lat: 41.8781, lon: 87.6298 }],\n  ['New York', { locationId: 2, city: 'New York', lat: 40.7128, lon: 74.0060 }],\n  ['Seattle', { locationId: 3, city: 'Seattle', lat: 47.6062, lon: 122.3321 }]\n]);\n\nutils.object.join(weather, 'city', cityLocations, (weather, city) => ({...weather, ...city}));\n// [\n//    {id:1, city:'Seattle',  month:'Aug', precip:0.87, locationId:3, lat:47.6062, lon:122.3321 },\n//    null,\n//    {id:3, city:'New York', month:'Apr', precip:3.94, locationId:2, lat:40.7128, lon:74.006 },\n//    {id:6, city:'Chicago',  month:'Apr', precip:3.62, locationId:1, lat:41.8781, lon:87.6298 }\n// ]\n```\n\nor join by lookup:\n\n```\nutils.object.join(weather, 'city', cityLocations, (weather, city) => ({...weather, city}));\n[\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, city:\n    { city: 'Seattle', locationId: 3, lat: 47.6062, lon: 122.3321 }\n  },\n  null,\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94, city:\n    { city: 'New York', locationId: 2, lat: 40.7128, lon: 74.006 }\n  },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, city:\n    { city: 'Chicago', locationId: 1, lat: 41.8781, lon: 87.6298 }\n  }\n];\n```\n\nor performing a translation / calculate the index instead of a property:\n\n```\nconst indexingFn = (weather) => `${weather.country}_${weather.city}`;\nutils.object.join(weather, indexingFn, cityLocations, (weather, city) => ({...weather, ...city}));\n// ...\n```\n\nThe signature for the indexingFunction is `(sourceObj:Object): {any}` - providing the index to use against the map.\n\nThe signature for the mapping function is `(sourceObj:Object, mappedObject:Object) => {Object}`.\n\nIf the mappedObject could not be found by that index (left join), then mappedObject will be `null`.\n\nAs the results of the functions are mapped, you can either modify in-line (directly on the object),\nor on a clone of the object (ex: {...sourceObj})\n\nNote, performing a JavaScript .map() call may be more performant in some cases,\nso consider it for more complex options.\n\n**Note: indexField can be either a string name of the field to join,\nor a function to be passed the object and generate the index**",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to join based on the target map",
        "name": "objectArray"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "property on each object in array to lookup against target map <br />\n     Signature if a function: `(sourceObj:Object): {any}`",
        "name": "indexField"
      },
      {
        "type": {
          "names": [
            "Map"
          ]
        },
        "description": "Map with keys mapping to values to pass",
        "name": "targetMap"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function to call each time an objectArray object, has an indexField found in targetMap <br />\n     Signature: `(sourceObj:Object, mappedObject:Object) => {Object}`",
        "name": "joinFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- Array of results returned from `joinFn`"
      }
    ],
    "name": "join",
    "longname": "module:object.join",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27837,
        27946
      ],
      "filename": "object.js",
      "lineno": 721,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100007996",
        "name": "cleanArray",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanArray",
    "longname": "module:object.join~cleanArray",
    "kind": "constant",
    "memberof": "module:object.join",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27957,
        28017
      ],
      "filename": "object.js",
      "lineno": 727,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008012",
        "name": "indexFn",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "indexFn",
    "longname": "module:object.join~indexFn",
    "kind": "constant",
    "memberof": "module:object.join",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28307,
        28565
      ],
      "filename": "object.js",
      "lineno": 737,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008041",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object.join~results",
    "kind": "constant",
    "memberof": "module:object.join",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28386,
        28408
      ],
      "filename": "object.js",
      "lineno": 740,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008056",
        "name": "index",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "index",
    "longname": "<anonymous>~index",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28425,
        28496
      ],
      "filename": "object.js",
      "lineno": 742,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008062",
        "name": "target",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "<anonymous>~target",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28509,
        28539
      ],
      "filename": "object.js",
      "lineno": 746,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008077",
        "name": "result",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * For cases where we simply want to pull values from one object to another.\n * \n * For example:\n * \n * ```\n * weather = [\n *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n *   null,\n *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 }\n * ];\n * \n * cityLocations = new Map([\n *   ['Chicago', { locationId: 1, city: 'Chicago', lat: 41.8781, lon: 87.6298 }],\n *   ['New York', { locationId: 2, city: 'New York', lat: 40.7128, lon: 74.0060 }],\n *   ['Seattle', { locationId: 3, city: 'Seattle', lat: 47.6062, lon: 122.3321 }]\n * ]);\n * \n * utils.object.joinProperties(weather, 'city', cityLocations, 'lat', 'lon'));\n * // [\n * //    {id:1, city:'Seattle',  month:'Aug', precip:0.87, lat:47.6062, lon:122.3321 },\n * //    null,\n * //    {id:3, city:'New York', month:'Apr', precip:3.94, lat:40.7128, lon:74.006 },\n * //    {id:6, city:'Chicago',  month:'Apr', precip:3.62, lat:41.8781, lon:87.6298 }\n * // ]\n * ```\n * \n * @param {Array<Object>} objectArray - collection of objects to join based on the target map\n * @param {Function | String} indexField - property on each object in array to lookup against target map <br />\n *      Signature if a function: `(sourceObj:Object): {any}`\n * @param {Map<any,Object>} targetMap - Map with keys mapping to values to pass\n * @param {...String} fields - List of fields to add to the objectArray in-place against values from targetMap\n * @returns {Array<Object>} - The modified objectArray with the fields applied.\n */",
    "meta": {
      "range": [
        30134,
        30812
      ],
      "filename": "object.js",
      "lineno": 789,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008088",
        "name": "module.exports.joinProperties",
        "type": "FunctionExpression",
        "value": "join",
        "paramnames": [
          "objectArray",
          "indexField",
          "targetMap",
          "fields"
        ]
      },
      "vars": {
        "cleanFields": "module:object.joinProperties~cleanFields",
        "": null,
        "joinFn": "module:object.joinProperties~joinFn"
      }
    },
    "description": "For cases where we simply want to pull values from one object to another.\n\nFor example:\n\n```\nweather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  null,\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 }\n];\n\ncityLocations = new Map([\n  ['Chicago', { locationId: 1, city: 'Chicago', lat: 41.8781, lon: 87.6298 }],\n  ['New York', { locationId: 2, city: 'New York', lat: 40.7128, lon: 74.0060 }],\n  ['Seattle', { locationId: 3, city: 'Seattle', lat: 47.6062, lon: 122.3321 }]\n]);\n\nutils.object.joinProperties(weather, 'city', cityLocations, 'lat', 'lon'));\n// [\n//    {id:1, city:'Seattle',  month:'Aug', precip:0.87, lat:47.6062, lon:122.3321 },\n//    null,\n//    {id:3, city:'New York', month:'Apr', precip:3.94, lat:40.7128, lon:74.006 },\n//    {id:6, city:'Chicago',  month:'Apr', precip:3.62, lat:41.8781, lon:87.6298 }\n// ]\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects to join based on the target map",
        "name": "objectArray"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "property on each object in array to lookup against target map <br />\n     Signature if a function: `(sourceObj:Object): {any}`",
        "name": "indexField"
      },
      {
        "type": {
          "names": [
            "Map.<any, Object>"
          ]
        },
        "description": "Map with keys mapping to values to pass",
        "name": "targetMap"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "List of fields to add to the objectArray in-place against values from targetMap",
        "name": "fields"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- The modified objectArray with the fields applied."
      }
    ],
    "name": "joinProperties",
    "longname": "module:object.joinProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30237,
        30274
      ],
      "filename": "object.js",
      "lineno": 790,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008103",
        "name": "cleanFields",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanFields",
    "longname": "module:object.joinProperties~cleanFields",
    "kind": "constant",
    "memberof": "module:object.joinProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30448,
        30737
      ],
      "filename": "object.js",
      "lineno": 795,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008124",
        "name": "joinFn",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "cleanTarget": "module:object.joinProperties~joinFn~cleanTarget",
        "result": "module:object.joinProperties~joinFn~result",
        "": null
      }
    },
    "undocumented": true,
    "name": "joinFn",
    "longname": "module:object.joinProperties~joinFn",
    "kind": "function",
    "memberof": "module:object.joinProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30495,
        30524
      ],
      "filename": "object.js",
      "lineno": 796,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008131",
        "name": "cleanTarget",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanTarget",
    "longname": "module:object.joinProperties~joinFn~cleanTarget",
    "kind": "constant",
    "memberof": "module:object.joinProperties~joinFn",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30585,
        30603
      ],
      "filename": "object.js",
      "lineno": 798,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008137",
        "name": "result",
        "type": "Identifier",
        "value": "sourceObj"
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:object.joinProperties~joinFn~result",
    "kind": "constant",
    "memberof": "module:object.joinProperties~joinFn",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30670,
        30704
      ],
      "filename": "object.js",
      "lineno": 801,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008149",
        "name": "result[undefined]",
        "type": "MemberExpression",
        "funcscope": "module:object.joinProperties~joinFn",
        "value": "cleanTarget[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "module:object.joinProperties~joinFn~result.undefined]",
    "kind": "member",
    "memberof": "module:object.joinProperties~joinFn~result",
    "scope": "static"
  },
  {
    "comment": "/**\n * Maps an array of values to a single property.\n * \n * For example:\n * \n * ```\n * const data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n *  { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n *  { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n *  { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n *  { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n * ];\n * \n * utils.object.propertyFromList(data, 'val')\n * //-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * \n * utils.object.propertyFromList(data, (r) => r.val);\n * //-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * ```\n * \n * @param {Object[]} objectArray - Array of Objects to be mapped to a single property / value\n * @param {Function | String} propertyOrFn - Name of the property or Function to return a value\n * @returns {Array} - Array of values\n */",
    "meta": {
      "range": [
        31651,
        31917
      ],
      "filename": "object.js",
      "lineno": 834,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008168",
        "name": "module.exports.propertyFromList",
        "type": "FunctionExpression",
        "value": "propertyFromList",
        "paramnames": [
          "objectArray",
          "propertyOrFn"
        ]
      },
      "vars": {
        "cleanArray": "module:object.propertyFromList~cleanArray",
        "fn": "module:object.propertyFromList~fn"
      }
    },
    "description": "Maps an array of values to a single property.\n\nFor example:\n\n```\nconst data = [{ record: 'jobA', val: 1 }, { record: 'jobA', val: 2 },\n { record: 'jobA', val: 3 }, { record: 'jobA', val: 4 },\n { record: 'jobA', val: 5 }, { record: 'jobA', val: 6 },\n { record: 'jobA', val: 7 }, { record: 'jobA', val: 8 },\n { record: 'jobA', val: 9 }, { record: 'jobA', val: 10 }\n];\n\nutils.object.propertyFromList(data, 'val')\n//-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nutils.object.propertyFromList(data, (r) => r.val);\n//-- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "Array of Objects to be mapped to a single property / value",
        "name": "objectArray"
      },
      {
        "type": {
          "names": [
            "function",
            "String"
          ]
        },
        "description": "Name of the property or Function to return a value",
        "name": "propertyOrFn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of values"
      }
    ],
    "name": "propertyFromList",
    "longname": "module:object.propertyFromList",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31748,
        31814
      ],
      "filename": "object.js",
      "lineno": 835,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008180",
        "name": "cleanArray",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanArray",
    "longname": "module:object.propertyFromList~cleanArray",
    "kind": "constant",
    "memberof": "module:object.propertyFromList",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31827,
        31884
      ],
      "filename": "object.js",
      "lineno": 839,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008191",
        "name": "fn",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "fn",
    "longname": "module:object.propertyFromList~fn",
    "kind": "constant",
    "memberof": "module:object.propertyFromList",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Finds objects that do not have ALL the properties specified.\n *\n * This can be very helpful in ensuring all objects actually meet a specification and are not missing values.\n * \n * ```\n * const students = [\n *   { first: 'john', last: 'doe', age: 23 }, { first: 'jane', last: 'doe', age: 23 }, { first: 'jack', last: 'white', failure: 401 }\n * ];\n *\n * utils.findWithoutProperties(students, 'first', 'last', 'age');\n * // [{ first: 'jack', last: 'white', failure: 401 }]\n * \n * utils.findWithoutProperties(students, 'failure');\n * // [{ first: 'john', last: 'doe', age: 23 }, { first: 'jane', last: 'doe', age: 23 }] \n * ```\n *\n * Please note, that we can check a single object:\n *\n * ```\n * utils.findWithoutProperties(students[0], 'failure');\n * // []\n * ```\n * \n * @param {Object[]} objectsToCheck - the array of objects to check for the properties.\n * @param {...String} propertiesToFind - the list of properties to find within the collection.\n * @returns {Object[]} - Array of objects that are missing at least one of those properties\n * @see {@link module:file.findWithProperties|findWithProperties} - if you want objects that do not have all properties\n **/",
    "meta": {
      "range": [
        33092,
        33636
      ],
      "filename": "object.js",
      "lineno": 873,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008205",
        "name": "module.exports.findWithoutProperties",
        "type": "FunctionExpression",
        "value": "findWithoutProperties",
        "paramnames": [
          "targetObj",
          "propertiesToFind"
        ]
      },
      "vars": {
        "cleanProperties": "module:object.findWithoutProperties~cleanProperties",
        "cleanTargets": "module:object.findWithoutProperties~cleanTargets",
        "results": "module:object.findWithoutProperties~results",
        "": null
      }
    },
    "description": "Finds objects that do not have ALL the properties specified.\n\nThis can be very helpful in ensuring all objects actually meet a specification and are not missing values.\n\n```\nconst students = [\n  { first: 'john', last: 'doe', age: 23 }, { first: 'jane', last: 'doe', age: 23 }, { first: 'jack', last: 'white', failure: 401 }\n];\n\nutils.findWithoutProperties(students, 'first', 'last', 'age');\n// [{ first: 'jack', last: 'white', failure: 401 }]\n\nutils.findWithoutProperties(students, 'failure');\n// [{ first: 'john', last: 'doe', age: 23 }, { first: 'jane', last: 'doe', age: 23 }] \n```\n\nPlease note, that we can check a single object:\n\n```\nutils.findWithoutProperties(students[0], 'failure');\n// []\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "the array of objects to check for the properties.",
        "name": "objectsToCheck"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "the list of properties to find within the collection.",
        "name": "propertiesToFind"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- Array of objects that are missing at least one of those properties"
      }
    ],
    "see": [
      "{@link module:file.findWithProperties|findWithProperties} - if you want objects that do not have all properties"
    ],
    "name": "findWithoutProperties",
    "longname": "module:object.findWithoutProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33204,
        33336
      ],
      "filename": "object.js",
      "lineno": 874,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008218",
        "name": "cleanProperties",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanProperties",
    "longname": "module:object.findWithoutProperties~cleanProperties",
    "kind": "constant",
    "memberof": "module:object.findWithoutProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33349,
        33422
      ],
      "filename": "object.js",
      "lineno": 878,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008239",
        "name": "cleanTargets",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanTargets",
    "longname": "module:object.findWithoutProperties~cleanTargets",
    "kind": "constant",
    "memberof": "module:object.findWithoutProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33435,
        33447
      ],
      "filename": "object.js",
      "lineno": 882,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008251",
        "name": "results",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object.findWithoutProperties~results",
    "kind": "constant",
    "memberof": "module:object.findWithoutProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Finds objects that have any of the properties specified.\n * \n * This can be very helpful when working with datasets that include mixed data (such as JSON)\n * \n * ```\n * const students = [\n *   { first: 'john', last: 'doe' }, { first: 'jane', last: 'doe' }, { first: 'jack', last: 'white', failure: 401 }\n * ];\n *\n * utils.findWithProperties(students, 'failure');\n * // { first: 'jack', last: 'white', failure: 401 }\n * ```\n *\n * Please note, that we can check a single object:\n *\n * ```\n * utils.findWithProperties({ first: 'john', last: 'doe' }, 'failure');\n * // []\n * ```\n * \n * @param {Object[]} objectsToCheck - the array of objects to check for the properties.\n * @param {...String} propertiesToFind - the list of properties to find within the collection.\n * @returns {Object[]} - Array of objects that have at least one of those properties\n * @see {@link module:file.findWithoutProperties|findWithoutProperties} - if you want objects that do not have all properties\n **/",
    "meta": {
      "range": [
        34624,
        35160
      ],
      "filename": "object.js",
      "lineno": 919,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008285",
        "name": "module.exports.findWithProperties",
        "type": "FunctionExpression",
        "value": "findWithProperties",
        "paramnames": [
          "targetObj",
          "propertiesToFind"
        ]
      },
      "vars": {
        "cleanProperties": "module:object.findWithProperties~cleanProperties",
        "cleanTargets": "module:object.findWithProperties~cleanTargets",
        "results": "module:object.findWithProperties~results",
        "": null
      }
    },
    "description": "Finds objects that have any of the properties specified.\n\nThis can be very helpful when working with datasets that include mixed data (such as JSON)\n\n```\nconst students = [\n  { first: 'john', last: 'doe' }, { first: 'jane', last: 'doe' }, { first: 'jack', last: 'white', failure: 401 }\n];\n\nutils.findWithProperties(students, 'failure');\n// { first: 'jack', last: 'white', failure: 401 }\n```\n\nPlease note, that we can check a single object:\n\n```\nutils.findWithProperties({ first: 'john', last: 'doe' }, 'failure');\n// []\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "the array of objects to check for the properties.",
        "name": "objectsToCheck"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "variable": true,
        "description": "the list of properties to find within the collection.",
        "name": "propertiesToFind"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- Array of objects that have at least one of those properties"
      }
    ],
    "see": [
      "{@link module:file.findWithoutProperties|findWithoutProperties} - if you want objects that do not have all properties"
    ],
    "name": "findWithProperties",
    "longname": "module:object.findWithProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34730,
        34862
      ],
      "filename": "object.js",
      "lineno": 920,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008298",
        "name": "cleanProperties",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanProperties",
    "longname": "module:object.findWithProperties~cleanProperties",
    "kind": "constant",
    "memberof": "module:object.findWithProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34873,
        34946
      ],
      "filename": "object.js",
      "lineno": 924,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008319",
        "name": "cleanTargets",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanTargets",
    "longname": "module:object.findWithProperties~cleanTargets",
    "kind": "constant",
    "memberof": "module:object.findWithProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34960,
        34972
      ],
      "filename": "object.js",
      "lineno": 928,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008331",
        "name": "results",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:object.findWithProperties~results",
    "kind": "constant",
    "memberof": "module:object.findWithProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Sets values for objects that don't currently have the property\n * \n * This is very helpful for ensuring that all objects have a property,\n * or setting a value to make it easier to identify that it is 'N/A'\n * \n * Note, that only the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty|ownProperties}\n * on the default object are checked.\n * \n * And values are applied to the target object, only if the property is not on the object (property is undefined)\n * \n * @param {Object[] | Object} targetObject - Object to apply the properties to <br />\n *              but ONLY if the object does not have that property (ex: undefined)\n * @param {Object} defaultObj - Object with the properties and defaults applied\n * @param {any} defaultObj.property - the property to check, with the default value assigned\n * @see {@link module:file.findWithoutProperties|findWithoutProperties} - to determine if any objects do not have a set of properties\n * @see {@link module:file.keys|keys} - to get a list of unique properties of all objects in a list.\n * @example\n * const students = [\n *   { first: 'john', last: 'doe', birthday: '2002-04-01' },\n *   { first: 'jane', last: 'doe', birthday: '2003-05-01' },\n *   { first: 'jack', last: 'white', failure: 401 }\n * ];\n * \n * utils.object.setPropertyDefaults(students, {\n *  first: '',\n *  last: '',\n *  birthday: ''\n * });\n * \n * // [\n * //   { first: 'john', last: 'doe', birthday: '2002-04-01' },\n * //   { first: 'jane', last: 'doe', birthday: '2003-05-01' },\n * //   { first: 'jack', last: 'white', birthday: '', failure: 401 }\n * // ];\n */",
    "meta": {
      "range": [
        36807,
        37469
      ],
      "filename": "object.js",
      "lineno": 975,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008365",
        "name": "module.exports.setPropertyDefaults",
        "type": "FunctionExpression",
        "value": "setPropertyDefaults",
        "paramnames": [
          "targetObject",
          "defaultObj"
        ]
      },
      "vars": {
        "cleanTargets": "module:object.setPropertyDefaults~cleanTargets",
        "defaultKeys": "module:object.setPropertyDefaults~defaultKeys",
        "": null
      }
    },
    "description": "Sets values for objects that don't currently have the property\n\nThis is very helpful for ensuring that all objects have a property,\nor setting a value to make it easier to identify that it is 'N/A'\n\nNote, that only the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty|ownProperties}\non the default object are checked.\n\nAnd values are applied to the target object, only if the property is not on the object (property is undefined)",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>",
            "Object"
          ]
        },
        "description": "Object to apply the properties to <br />\n             but ONLY if the object does not have that property (ex: undefined)",
        "name": "targetObject"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Object with the properties and defaults applied",
        "name": "defaultObj"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the property to check, with the default value assigned",
        "name": "defaultObj.property"
      }
    ],
    "see": [
      "{@link module:file.findWithoutProperties|findWithoutProperties} - to determine if any objects do not have a set of properties",
      "{@link module:file.keys|keys} - to get a list of unique properties of all objects in a list."
    ],
    "examples": [
      "const students = [\n  { first: 'john', last: 'doe', birthday: '2002-04-01' },\n  { first: 'jane', last: 'doe', birthday: '2003-05-01' },\n  { first: 'jack', last: 'white', failure: 401 }\n];\n\nutils.object.setPropertyDefaults(students, {\n first: '',\n last: '',\n birthday: ''\n});\n\n// [\n//   { first: 'john', last: 'doe', birthday: '2002-04-01' },\n//   { first: 'jane', last: 'doe', birthday: '2003-05-01' },\n//   { first: 'jack', last: 'white', birthday: '', failure: 401 }\n// ];"
    ],
    "name": "setPropertyDefaults",
    "longname": "module:object.setPropertyDefaults",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        36909,
        36991
      ],
      "filename": "object.js",
      "lineno": 976,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008377",
        "name": "cleanTargets",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanTargets",
    "longname": "module:object.setPropertyDefaults~cleanTargets",
    "kind": "constant",
    "memberof": "module:object.setPropertyDefaults",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        37228,
        37280
      ],
      "filename": "object.js",
      "lineno": 984,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008402",
        "name": "defaultKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "defaultKeys",
    "longname": "module:object.setPropertyDefaults~defaultKeys",
    "kind": "constant",
    "memberof": "module:object.setPropertyDefaults",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        37413,
        37444
      ],
      "filename": "object.js",
      "lineno": 989,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008434",
        "name": "target[undefined]",
        "type": "MemberExpression",
        "value": "defaultObj[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "target[undefined]",
    "longname": "module:object~target[undefined]",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:object"
  },
  {
    "comment": "/**\n * Applies a function to a set of properties on an object, or collection.\n * \n * This is shorthand for a mapping function,\n * but useful if doing the same operation (like converting to compactNumbers, converting to string, etc)\n * \n * For example, the two are equivalent:\n * \n * ```\n * const list = [\n *  { id: '100', age: '21', name: 'p1' },\n *  { id: '200', age: '22', name: 'p2' },\n *  { id: '300', age: '23', name: 'p3' },\n *  { id: '400', age: '24', name: 'p4' },\n *  { id: '500', age: '25', name: 'p5' }\n * ];\n * \n * const numToString = (val) => String(val);\n * \n * const listMapProperties = utils.object.mapProperties(list, numToString, 'id', 'val');\n * \n * const listMap = list.map((obj) => ({\n *  ...obj,\n *  id: numToString(obj.val),\n *  age: numToString(obj.val)\n * }));\n * ```\n * \n * @param {Object[]} objCollection - object or multiple objects that should have properties formatted\n * @param {Function} formattingFn - function to apply to all the properties specified\n * @param  {...any} propertiesToFormat - list of properties to apply the formatting function\n * @returns {Object[] - clone of objCollection with properties mapped\n */",
    "meta": {
      "range": [
        38624,
        39345
      ],
      "filename": "object.js",
      "lineno": 1028,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008442",
        "name": "module.exports.mapProperties",
        "type": "FunctionExpression",
        "value": "mapProperties",
        "paramnames": [
          "objCollection",
          "formattingFn",
          "propertiesToFormat"
        ]
      },
      "vars": {
        "cleanCollection": "module:object.mapProperties~cleanCollection",
        "cleanProperties": "module:object.mapProperties~cleanProperties",
        "": null
      }
    },
    "description": "Applies a function to a set of properties on an object, or collection.\n\nThis is shorthand for a mapping function,\nbut useful if doing the same operation (like converting to compactNumbers, converting to string, etc)\n\nFor example, the two are equivalent:\n\n```\nconst list = [\n { id: '100', age: '21', name: 'p1' },\n { id: '200', age: '22', name: 'p2' },\n { id: '300', age: '23', name: 'p3' },\n { id: '400', age: '24', name: 'p4' },\n { id: '500', age: '25', name: 'p5' }\n];\n\nconst numToString = (val) => String(val);\n\nconst listMapProperties = utils.object.mapProperties(list, numToString, 'id', 'val');\n\nconst listMap = list.map((obj) => ({\n ...obj,\n id: numToString(obj.val),\n age: numToString(obj.val)\n}));\n```",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "object or multiple objects that should have properties formatted",
        "name": "objCollection"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function to apply to all the properties specified",
        "name": "formattingFn"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "variable": true,
        "description": "list of properties to apply the formatting function",
        "name": "propertiesToFormat"
      }
    ],
    "returns": [
      {
        "description": "{Object[] - clone of objCollection with properties mapped"
      }
    ],
    "name": "mapProperties",
    "longname": "module:object.mapProperties",
    "kind": "function",
    "memberof": "module:object",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        38740,
        38829
      ],
      "filename": "object.js",
      "lineno": 1029,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008456",
        "name": "cleanCollection",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "module:object.mapProperties~cleanCollection",
    "kind": "constant",
    "memberof": "module:object.mapProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        38840,
        38980
      ],
      "filename": "object.js",
      "lineno": 1033,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008469",
        "name": "cleanProperties",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanProperties",
    "longname": "module:object.mapProperties~cleanProperties",
    "kind": "constant",
    "memberof": "module:object.mapProperties",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        39207,
        39225
      ],
      "filename": "object.js",
      "lineno": 1042,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008508",
        "name": "clone",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "clone",
    "longname": "<anonymous>~clone",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        39273,
        39310
      ],
      "filename": "object.js",
      "lineno": 1044,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008522",
        "name": "clone[undefined]",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "<anonymous>~clone.undefined]",
    "kind": "member",
    "memberof": "<anonymous>~clone",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        151,
        196
      ],
      "filename": "plantuml.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008536",
        "name": "plantUMLEncoder",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "plantUMLEncoder",
    "longname": "plantUMLEncoder",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        237,
        273
      ],
      "filename": "plantuml.js",
      "lineno": 8,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008542",
        "name": "DatasetUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "DatasetUtils",
    "longname": "DatasetUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        326,
        353
      ],
      "filename": "plantuml.js",
      "lineno": 11,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008548",
        "name": "IJSUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "IJSUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * PlantUML Render diagrams in Jupyter Lab\n * Renderer for PlantUML - a rendering engine that converts text to diagrams.\n * \n * ![Screenshot of plantUML](img/plantumlSequence.png)\n * \n * * Setting defaults:\n *   * {@link module:plantuml.protocol|plantuml.protocol} - ex: 'http://'\n *   * {@link module:plantuml.host|plantuml.host} - ex: 'localhost:8080'\n *   * {@link module:plantuml.setDefaultFormat|plantuml.setDefaultFormat(format)} - whether to use 'png' or 'svg' as default\n *   * {@link module:plantuml.getDefaultFormat|plantuml.getDefaultFormat()} - get the current default\n * * rendering\n *   * {@link module:plantuml.generateURL|plantuml.generateURL(string, options)} - determine a url to generate the image\n *   * {@link module:plantuml.render|plantuml.render(string, options)} - render the results in a jupyter cell\n * \n * # Types of Diagrams Supported\n * \n * All PlantUML diagrams are supported - as they are managed by the server.\n * \n * ![Screenshot of types of PlantUML Diagrams](img/plantUmlDiagrams.jpg)\n * \n * Such as:\n * <a href=\"https://plantuml.com/sequence-diagram\">Sequence diagrams</a>,\n * <a href=\"https://plantuml.com/use-case-diagram\">Usecase diagrams</a>,\n * <a href=\"https://plantuml.com/class-diagram\">Class diagrams</a>,\n * <a href=\"https://plantuml.com/object-diagram\">Object diagrams</a>,\n * <a href=\"https://plantuml.com/activity-diagram-beta\">Activity diagrams</a>,\n * <a href=\"https://plantuml.com/component-diagram\">Component diagrams</a>,\n * <a href=\"https://plantuml.com/deployment-diagram\">Deployment diagrams</a>,\n * <a href=\"https://plantuml.com/state-diagram\">State diagrams</a>,\n * <a href=\"https://plantuml.com/timing-diagram\">Timing diagrams</a>,\n * and many others...\n * \n * # Running your own PlantUML Server\n * \n * **This library requires a PlantUML server to render the images,\n * however the images will be preserved upon export.**\n * \n * (We are currently evaluating additional options like [MermaidJS]().\n * They are available still through {@link module:ijs.htmlScript|ijs.htmlScript},\n * but are still determining a sufficient option)\n * \n * [PlantUML PicoWeb](https://plantuml.com/picoweb) is a very simple PlantUML Server.\n * \n * [Learn more here](https://plantuml.com/picoweb)\n * \n * @module plantuml\n * @exports plantuml\n */",
    "meta": {
      "filename": "plantuml.js",
      "lineno": 13,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "PlantUML Render diagrams in Jupyter Lab\nRenderer for PlantUML - a rendering engine that converts text to diagrams.\n\n![Screenshot of plantUML](img/plantumlSequence.png)\n\n* Setting defaults:\n  * {@link module:plantuml.protocol|plantuml.protocol} - ex: 'http://'\n  * {@link module:plantuml.host|plantuml.host} - ex: 'localhost:8080'\n  * {@link module:plantuml.setDefaultFormat|plantuml.setDefaultFormat(format)} - whether to use 'png' or 'svg' as default\n  * {@link module:plantuml.getDefaultFormat|plantuml.getDefaultFormat()} - get the current default\n* rendering\n  * {@link module:plantuml.generateURL|plantuml.generateURL(string, options)} - determine a url to generate the image\n  * {@link module:plantuml.render|plantuml.render(string, options)} - render the results in a jupyter cell\n\n# Types of Diagrams Supported\n\nAll PlantUML diagrams are supported - as they are managed by the server.\n\n![Screenshot of types of PlantUML Diagrams](img/plantUmlDiagrams.jpg)\n\nSuch as:\n<a href=\"https://plantuml.com/sequence-diagram\">Sequence diagrams</a>,\n<a href=\"https://plantuml.com/use-case-diagram\">Usecase diagrams</a>,\n<a href=\"https://plantuml.com/class-diagram\">Class diagrams</a>,\n<a href=\"https://plantuml.com/object-diagram\">Object diagrams</a>,\n<a href=\"https://plantuml.com/activity-diagram-beta\">Activity diagrams</a>,\n<a href=\"https://plantuml.com/component-diagram\">Component diagrams</a>,\n<a href=\"https://plantuml.com/deployment-diagram\">Deployment diagrams</a>,\n<a href=\"https://plantuml.com/state-diagram\">State diagrams</a>,\n<a href=\"https://plantuml.com/timing-diagram\">Timing diagrams</a>,\nand many others...\n\n# Running your own PlantUML Server\n\n**This library requires a PlantUML server to render the images,\nhowever the images will be preserved upon export.**\n\n(We are currently evaluating additional options like [MermaidJS]().\nThey are available still through {@link module:ijs.htmlScript|ijs.htmlScript},\nbut are still determining a sufficient option)\n\n[PlantUML PicoWeb](https://plantuml.com/picoweb) is a very simple PlantUML Server.\n\n[Learn more here](https://plantuml.com/picoweb)",
    "kind": "module",
    "name": "plantuml",
    "alias": "plantuml",
    "longname": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2644,
        2663
      ],
      "filename": "plantuml.js",
      "lineno": 62,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008554",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:plantuml",
    "longname": "module:plantuml",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2671,
        2696
      ],
      "filename": "plantuml.js",
      "lineno": 63,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008560",
        "name": "PlantUML",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "PlantUML",
    "longname": "module:plantuml~PlantUML",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:plantuml",
    "params": []
  },
  {
    "comment": "/**\n * simple / empty plantuml diagram\n * @private\n */",
    "meta": {
      "range": [
        2792,
        2828
      ],
      "filename": "plantuml.js",
      "lineno": 71,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008566",
        "name": "emptyPlantUML",
        "type": "Literal",
        "value": "@startuml\n@enduml"
      }
    },
    "description": "simple / empty plantuml diagram",
    "access": "private",
    "name": "emptyPlantUML",
    "longname": "module:plantuml~emptyPlantUML",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:plantuml",
    "params": []
  },
  {
    "comment": "/**\n * default format for retrieving values\n * @default\n * @private\n*/",
    "meta": {
      "range": [
        2906,
        2927
      ],
      "filename": "plantuml.js",
      "lineno": 78,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008570",
        "name": "defaultFormat",
        "type": "Literal",
        "value": "svg"
      }
    },
    "description": "default format for retrieving values",
    "defaultvalue": "svg",
    "access": "private",
    "name": "defaultFormat",
    "longname": "module:plantuml~defaultFormat",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml",
    "params": []
  },
  {
    "comment": "/**\n * The protocol used to access the PlantUML results\n * @type {String}\n * @default\n */",
    "meta": {
      "range": [
        3020,
        3055
      ],
      "filename": "plantuml.js",
      "lineno": 85,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008574",
        "name": "module.exports.protocol",
        "type": "Literal",
        "value": "http://",
        "paramnames": []
      }
    },
    "description": "The protocol used to access the PlantUML results",
    "type": {
      "names": [
        "String"
      ]
    },
    "defaultvalue": "http://",
    "name": "protocol",
    "longname": "module:plantuml.protocol",
    "kind": "member",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "/**\n * The host domain of the PlantUML server\n * @type {String}\n * @default\n */",
    "meta": {
      "range": [
        3138,
        3176
      ],
      "filename": "plantuml.js",
      "lineno": 92,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008582",
        "name": "module.exports.host",
        "type": "Literal",
        "value": "localhost:8080",
        "paramnames": []
      }
    },
    "description": "The host domain of the PlantUML server",
    "type": {
      "names": [
        "String"
      ]
    },
    "defaultvalue": "localhost:8080",
    "name": "host",
    "longname": "module:plantuml.host",
    "kind": "member",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "/**\n * Resets the defaults\n * \n * * format\n * * protocol\n * * host\n */",
    "meta": {
      "range": [
        3250,
        3396
      ],
      "filename": "plantuml.js",
      "lineno": 101,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008590",
        "name": "module.exports.reset",
        "type": "FunctionExpression",
        "value": "reset",
        "paramnames": []
      },
      "vars": {
        "PlantUML.defaultFormat": "module:plantuml~PlantUML.defaultFormat",
        "PlantUML.protocol": "module:plantuml~PlantUML.protocol",
        "PlantUML.host": "module:plantuml~PlantUML.host"
      }
    },
    "description": "Resets the defaults\n\n* format\n* protocol\n* host",
    "name": "reset",
    "longname": "module:plantuml.reset",
    "kind": "function",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3294,
        3324
      ],
      "filename": "plantuml.js",
      "lineno": 102,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008600",
        "name": "PlantUML.defaultFormat",
        "type": "Literal",
        "value": "svg",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "defaultFormat",
    "longname": "module:plantuml~PlantUML.defaultFormat",
    "kind": "member",
    "memberof": "module:plantuml~PlantUML",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3328,
        3357
      ],
      "filename": "plantuml.js",
      "lineno": 103,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008606",
        "name": "PlantUML.protocol",
        "type": "Literal",
        "value": "http://",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "protocol",
    "longname": "module:plantuml~PlantUML.protocol",
    "kind": "member",
    "memberof": "module:plantuml~PlantUML",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3361,
        3393
      ],
      "filename": "plantuml.js",
      "lineno": 104,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008612",
        "name": "PlantUML.host",
        "type": "Literal",
        "value": "localhost:8080",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "host",
    "longname": "module:plantuml~PlantUML.host",
    "kind": "member",
    "memberof": "module:plantuml~PlantUML",
    "scope": "static"
  },
  {
    "comment": "/**\n * Verify that a format is acceptable\n * @param {String} format\n * @throws {Error} - if the format is not acceptable\n * @private\n */",
    "meta": {
      "range": [
        3542,
        3764
      ],
      "filename": "plantuml.js",
      "lineno": 113,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008618",
        "name": "checkFormat",
        "type": "FunctionExpression",
        "value": "checkFormat"
      }
    },
    "description": "Verify that a format is acceptable",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "name": "format"
      }
    ],
    "exceptions": [
      {
        "type": {
          "names": [
            "Error"
          ]
        },
        "description": "- if the format is not acceptable"
      }
    ],
    "access": "private",
    "name": "checkFormat",
    "longname": "module:plantuml~checkFormat",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "/**\n * Determines the default format to retrieve\n * @returns {String} [svg | png]\n */",
    "meta": {
      "range": [
        3853,
        3942
      ],
      "filename": "plantuml.js",
      "lineno": 126,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008645",
        "name": "module.exports.getDefaultFormat",
        "type": "FunctionExpression",
        "value": "getDefaultFormat",
        "paramnames": []
      }
    },
    "description": "Determines the default format to retrieve",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "[svg | png]"
      }
    ],
    "name": "getDefaultFormat",
    "longname": "module:plantuml.getDefaultFormat",
    "kind": "function",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "/**\n * Sets the default format to retrieve\n * @param {('svg'|'png')} format - which format to default from now on \n */",
    "meta": {
      "range": [
        4064,
        4174
      ],
      "filename": "plantuml.js",
      "lineno": 134,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008657",
        "name": "module.exports.setDefaultFormat",
        "type": "FunctionExpression",
        "value": "setDefaultFormat",
        "paramnames": [
          "format"
        ]
      },
      "vars": {
        "defaultFormat": "module:plantuml~defaultFormat.defaultFormat"
      }
    },
    "description": "Sets the default format to retrieve",
    "params": [
      {
        "type": {
          "names": [
            "'svg'",
            "'png'"
          ]
        },
        "description": "which format to default from now on",
        "name": "format"
      }
    ],
    "name": "setDefaultFormat",
    "longname": "module:plantuml.setDefaultFormat",
    "kind": "function",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4136,
        4171
      ],
      "filename": "plantuml.js",
      "lineno": 135,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008668",
        "name": "defaultFormat",
        "type": "CallExpression",
        "funcscope": "module:plantuml.setDefaultFormat",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "defaultFormat",
    "longname": "module:plantuml~defaultFormat.defaultFormat",
    "kind": "member",
    "memberof": "module:plantuml~defaultFormat",
    "scope": "static"
  },
  {
    "comment": "/**\n * Generates a URL for a given plantUMLText\n * \n * ```\n * //-- note there should be no space after '@' character\n * //-- ex: '@' + 'startuml' and '@' + 'enduml' \n * utils.plantuml.generateURL(`@ startuml\n *   Alice -> Bob: Authentication Request\n *   Bob --> Alice: Authentication Response\n *   \n *   Alice -> Bob: Another authentication Request\n *   Alice <-- Bob: Another authentication Response\n *   @ enduml`);\n * // 'http://localhost:8080/plantuml/svg/SoWkIImgAStDuNBCoKnELT2rKt3AJx9IS2mjo...'\n * ```\n * \n * @param {String} plantUMLText - the text to render\n * @param {Object} plantUMLOptions - the options to use\n * @param {('svg'|'png')} [plantUMLOptions.format = 'svg'] - the format to use for this render\n */",
    "meta": {
      "range": [
        4899,
        5311
      ],
      "filename": "plantuml.js",
      "lineno": 158,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008674",
        "name": "module.exports.generateURL",
        "type": "FunctionExpression",
        "value": "generateURL",
        "paramnames": [
          "plantUMLText",
          "plantUMLOptions"
        ]
      },
      "vars": {
        "cleanOptions": "module:plantuml.generateURL~cleanOptions",
        "undefined": null,
        "format": "module:plantuml~format",
        "plantUMLTextStr": "module:plantuml.generateURL~plantUMLTextStr",
        "encodedStr": "module:plantuml.generateURL~encodedStr"
      }
    },
    "description": "Generates a URL for a given plantUMLText\n\n```\n//-- note there should be no space after '@' character\n//-- ex: '@' + 'startuml' and '@' + 'enduml' \nutils.plantuml.generateURL(`@ startuml\n  Alice -> Bob: Authentication Request\n  Bob --> Alice: Authentication Response\n  \n  Alice -> Bob: Another authentication Request\n  Alice <-- Bob: Another authentication Response\n  @ enduml`);\n// 'http://localhost:8080/plantuml/svg/SoWkIImgAStDuNBCoKnELT2rKt3AJx9IS2mjo...'\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the text to render",
        "name": "plantUMLText"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options to use",
        "name": "plantUMLOptions"
      },
      {
        "type": {
          "names": [
            "'svg'",
            "'png'"
          ]
        },
        "optional": true,
        "defaultvalue": "'svg'",
        "description": "the format to use for this render",
        "name": "plantUMLOptions.format"
      }
    ],
    "name": "generateURL",
    "longname": "module:plantuml.generateURL",
    "kind": "function",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4990,
        5026
      ],
      "filename": "plantuml.js",
      "lineno": 159,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008686",
        "name": "cleanOptions",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:plantuml.generateURL~cleanOptions",
    "kind": "constant",
    "memberof": "module:plantuml.generateURL",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5040,
        5054
      ],
      "filename": "plantuml.js",
      "lineno": 161,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008694",
        "name": "format",
        "type": "AssignmentPattern",
        "value": "format"
      }
    },
    "undocumented": true,
    "name": "format",
    "longname": "module:plantuml~format",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5077,
        5105
      ],
      "filename": "plantuml.js",
      "lineno": 163,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008700",
        "name": "format",
        "type": "CallExpression",
        "funcscope": "module:plantuml.generateURL",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "format",
    "longname": "module:plantuml~format",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5115,
        5162
      ],
      "filename": "plantuml.js",
      "lineno": 164,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008706",
        "name": "plantUMLTextStr",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "plantUMLTextStr",
    "longname": "module:plantuml.generateURL~plantUMLTextStr",
    "kind": "constant",
    "memberof": "module:plantuml.generateURL",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5173,
        5225
      ],
      "filename": "plantuml.js",
      "lineno": 166,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008712",
        "name": "encodedStr",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "encodedStr",
    "longname": "module:plantuml.generateURL~encodedStr",
    "kind": "constant",
    "memberof": "module:plantuml.generateURL",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Renders a PlantUML Text\n * \n * ![Screenshot of plantUML](img/plantumlSequence.png)\n * \n * ```\n * //-- note there should be no space after '@' character\n * //-- ex: '@' + 'startuml' and '@' + 'enduml' \n * utils.plantuml.render(`@ startuml\n *   Alice -> Bob: Authentication Request\n *   Bob --> Alice: Authentication Response\n *   \n *   Alice -> Bob: Another authentication Request\n *   Alice <-- Bob: Another authentication Response\n *   @ enduml`)\n * ```\n * \n * @param {String} plantUMLText - the text to render\n * @param {Object} plantUMLOptions - the options to use\n * @param {('svg'|'png')} [plantUMLOptions.format = 'svg'] - the format to use for this render\n * @param {Boolean} [showURL = false] - whether to show the URL at the bottom\n * @param {Boolean} [debug = false] - whether to provide debugging information\n */",
    "meta": {
      "range": [
        6145,
        7070
      ],
      "filename": "plantuml.js",
      "lineno": 194,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008735",
        "name": "module.exports.render",
        "type": "FunctionExpression",
        "value": "render",
        "paramnames": [
          "plantUMLText",
          "plantUMLOptions"
        ]
      },
      "vars": {
        "cleanOptions": "module:plantuml.render~cleanOptions",
        "undefined": null,
        "format": "module:plantuml~format",
        "": null
      }
    },
    "description": "Renders a PlantUML Text\n\n![Screenshot of plantUML](img/plantumlSequence.png)\n\n```\n//-- note there should be no space after '@' character\n//-- ex: '@' + 'startuml' and '@' + 'enduml' \nutils.plantuml.render(`@ startuml\n  Alice -> Bob: Authentication Request\n  Bob --> Alice: Authentication Response\n  \n  Alice -> Bob: Another authentication Request\n  Alice <-- Bob: Another authentication Response\n  @ enduml`)\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the text to render",
        "name": "plantUMLText"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options to use",
        "name": "plantUMLOptions"
      },
      {
        "type": {
          "names": [
            "'svg'",
            "'png'"
          ]
        },
        "optional": true,
        "defaultvalue": "'svg'",
        "description": "the format to use for this render",
        "name": "plantUMLOptions.format"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "whether to show the URL at the bottom",
        "name": "showURL"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "whether to provide debugging information",
        "name": "debug"
      }
    ],
    "name": "render",
    "longname": "module:plantuml.render",
    "kind": "function",
    "memberof": "module:plantuml",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6226,
        6262
      ],
      "filename": "plantuml.js",
      "lineno": 195,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008747",
        "name": "cleanOptions",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:plantuml.render~cleanOptions",
    "kind": "constant",
    "memberof": "module:plantuml.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6464,
        6478
      ],
      "filename": "plantuml.js",
      "lineno": 202,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008755",
        "name": "format",
        "type": "AssignmentPattern",
        "value": "format"
      }
    },
    "undocumented": true,
    "name": "format",
    "longname": "module:plantuml~format",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6516,
        6531
      ],
      "filename": "plantuml.js",
      "lineno": 206,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008763",
        "name": "showURL",
        "type": "AssignmentPattern",
        "value": "showURL"
      }
    },
    "undocumented": true,
    "name": "showURL",
    "longname": "module:plantuml~showURL",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6537,
        6550
      ],
      "filename": "plantuml.js",
      "lineno": 207,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008767",
        "name": "debug",
        "type": "AssignmentPattern",
        "value": "debug"
      }
    },
    "undocumented": true,
    "name": "debug",
    "longname": "module:plantuml~debug",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6574,
        6602
      ],
      "filename": "plantuml.js",
      "lineno": 210,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008773",
        "name": "format",
        "type": "CallExpression",
        "funcscope": "module:plantuml.render",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "format",
    "longname": "module:plantuml~format",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:plantuml"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6690,
        6749
      ],
      "filename": "plantuml.js",
      "lineno": 215,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008793",
        "name": "targetURL",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetURL",
    "longname": "<anonymous>~targetURL",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6821,
        6852
      ],
      "filename": "plantuml.js",
      "lineno": 218,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008815",
        "name": "result",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6895,
        6922
      ],
      "filename": "plantuml.js",
      "lineno": 221,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008827",
        "name": "buf",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "buf",
    "longname": "<anonymous>~buf",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7013,
        7041
      ],
      "filename": "plantuml.js",
      "lineno": 227,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008846",
        "name": "svgStr",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgStr",
    "longname": "<anonymous>~svgStr",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        999,
        13387
      ],
      "filename": "random_simplex.js",
      "lineno": 28,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008861",
        "name": "generateSimplexInstance",
        "type": "FunctionDeclaration",
        "paramnames": [
          "seedValue"
        ]
      },
      "vars": {
        "F2": "generateSimplexInstance~F2",
        "G2": "generateSimplexInstance~G2",
        "F3": "generateSimplexInstance~F3",
        "G3": "generateSimplexInstance~G3",
        "SimplexGenerator": "generateSimplexInstance~SimplexGenerator",
        "SimplexGenerator.prototype.seed": "generateSimplexInstance~SimplexGenerator#seed",
        "": null,
        "SimplexGenerator.prototype.simplex2d": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "SimplexGenerator.prototype.simplex3d": "generateSimplexInstance~SimplexGenerator#simplex3d"
      }
    },
    "undocumented": true,
    "name": "generateSimplexInstance",
    "longname": "generateSimplexInstance",
    "kind": "function",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1186,
        1215
      ],
      "filename": "random_simplex.js",
      "lineno": 32,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008866",
        "name": "F2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "F2",
    "longname": "generateSimplexInstance~F2",
    "kind": "constant",
    "memberof": "generateSimplexInstance",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1225,
        1252
      ],
      "filename": "random_simplex.js",
      "lineno": 33,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008878",
        "name": "G2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "G2",
    "longname": "generateSimplexInstance~G2",
    "kind": "constant",
    "memberof": "generateSimplexInstance",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1263,
        1273
      ],
      "filename": "random_simplex.js",
      "lineno": 35,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008890",
        "name": "F3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "F3",
    "longname": "generateSimplexInstance~F3",
    "kind": "constant",
    "memberof": "generateSimplexInstance",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1283,
        1293
      ],
      "filename": "random_simplex.js",
      "lineno": 36,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008896",
        "name": "G3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "G3",
    "longname": "generateSimplexInstance~G3",
    "kind": "constant",
    "memberof": "generateSimplexInstance",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Simplex Generator that can generate random numbers\n   * in multiple dimensions with zero \"jutter\" between intervals.\n   * \n   * It works very similar to [Perlin Noise](https://en.wikipedia.org/wiki/Perlin_noise)\n   * but has much less complexity (O(N^2)) and easier to work in higher dimensions.\n   * \n   * For more please see the {@tutorial noiseVisualization} tutorial.\n   * \n   * ---\n   * \n   * Simple example:\n   * \n   * ```\n   * const generator = utils.random.simplexGenerator();\n   * generator.simplex(0.1, 0.2); // (some number between -1 and 1)\n   * ```\n   * \n   * More Complex Example:\n   * \n   * ![screenshot](img/simplexNoiseAnim.gif)\n   * \n   * ```\n   * utils.ijs.htmlScript({\n   *     width: 400,\n   *     height: 400,\n   *     data: { cellSize: 150 },\n   *     utilityFunctions: ({ simplex: utils.random.simplexGenerator }),\n   *     html: '<canvas id=\"draw-target\" />',\n   *     onReady: ({ rootEl, options, utilityFunctions, data }) => {\n   *         const canvas = rootEl.querySelector('canvas#draw-target');\n   *         \n   *         const noise = utilityFunctions.simplex();\n   *         \n   *         canvas.width = parseInt(options.width);\n   *         canvas.height = parseInt(options.height);\n   * \n   *         var ctx = canvas.getContext('2d');\n   * \n   *         var image = ctx.createImageData(canvas.width, canvas.height);\n   *         var imageData = image.data;\n   *         \n   *         function setCanvasColor(index, { red, green, blue, alpha }) {\n   *             imageData[index + 0] = red;\n   *             imageData[index + 1] = green;\n   *             imageData[index + 2] = blue;\n   *             imageData[index + 3] = alpha;\n   *         }\n   * \n   *         for (var x = 0; x < canvas.width; x++) {\n   *           for (var y = 0; y < canvas.height; y++) {\n   *             var value = noise.simplex2d(x / data.cellSize, y / data.cellSize) * 256;\n   *               \n   *             var cell = (x + y * canvas.width) * 4;\n   * \n   *             //-- cells are for each pixel\n   *             //-- and in sets of 4: [red, green, blue, alpha]\n   *             setCanvasColor(\n   *               cell,\n   *               {\n   *                 red: value < 0 ? Math.abs(value) : 0,\n   *                 green: value > 0 ? value : 0,\n   *                 blue: 0,\n   *                 alpha: 255\n   *               }\n   *             );\n   *           }\n   *         }\n   *         \n   *         ctx.fillColor = 'black';\n   *         ctx.fillRect(0, 0, 100, 100);\n   *         ctx.putImageData(image, 0, 0);\n   *     }\n   * });\n   * ```\n   * \n   * @class SimplexGenerator\n   * @param {Number} innerSeed - seed to use from now on\n   * @name SimplexGenerator\n   * @see {@link SimplexGenerator.seed}\n   */",
    "meta": {
      "filename": "random_simplex.js",
      "lineno": 38,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Simplex Generator that can generate random numbers\nin multiple dimensions with zero \"jutter\" between intervals.\n\nIt works very similar to [Perlin Noise](https://en.wikipedia.org/wiki/Perlin_noise)\nbut has much less complexity (O(N^2)) and easier to work in higher dimensions.\n\nFor more please see the {@tutorial noiseVisualization} tutorial.\n\n---\n\nSimple example:\n\n```\nconst generator = utils.random.simplexGenerator();\ngenerator.simplex(0.1, 0.2); // (some number between -1 and 1)\n```\n\nMore Complex Example:\n\n![screenshot](img/simplexNoiseAnim.gif)\n\n```\nutils.ijs.htmlScript({\n    width: 400,\n    height: 400,\n    data: { cellSize: 150 },\n    utilityFunctions: ({ simplex: utils.random.simplexGenerator }),\n    html: '<canvas id=\"draw-target\" />',\n    onReady: ({ rootEl, options, utilityFunctions, data }) => {\n        const canvas = rootEl.querySelector('canvas#draw-target');\n        \n        const noise = utilityFunctions.simplex();\n        \n        canvas.width = parseInt(options.width);\n        canvas.height = parseInt(options.height);\n\n        var ctx = canvas.getContext('2d');\n\n        var image = ctx.createImageData(canvas.width, canvas.height);\n        var imageData = image.data;\n        \n        function setCanvasColor(index, { red, green, blue, alpha }) {\n            imageData[index + 0] = red;\n            imageData[index + 1] = green;\n            imageData[index + 2] = blue;\n            imageData[index + 3] = alpha;\n        }\n\n        for (var x = 0; x < canvas.width; x++) {\n          for (var y = 0; y < canvas.height; y++) {\n            var value = noise.simplex2d(x / data.cellSize, y / data.cellSize) * 256;\n              \n            var cell = (x + y * canvas.width) * 4;\n\n            //-- cells are for each pixel\n            //-- and in sets of 4: [red, green, blue, alpha]\n            setCanvasColor(\n              cell,\n              {\n                red: value < 0 ? Math.abs(value) : 0,\n                green: value > 0 ? value : 0,\n                blue: 0,\n                alpha: 255\n              }\n            );\n          }\n        }\n        \n        ctx.fillColor = 'black';\n        ctx.fillRect(0, 0, 100, 100);\n        ctx.putImageData(image, 0, 0);\n    }\n});\n```",
    "kind": "class",
    "name": "SimplexGenerator",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "seed to use from now on",
        "name": "innerSeed"
      }
    ],
    "see": [
      "{@link SimplexGenerator.seed}"
    ],
    "longname": "SimplexGenerator",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4051,
        6100
      ],
      "filename": "random_simplex.js",
      "lineno": 119,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008901",
        "name": "SimplexGenerator",
        "type": "FunctionDeclaration",
        "paramnames": [
          "innerSeed"
        ]
      },
      "vars": {
        "Grad": "generateSimplexInstance~SimplexGenerator~Grad",
        "Grad.prototype.dot2": "generateSimplexInstance~SimplexGenerator~Grad#dot2",
        "": null,
        "Grad.prototype.dot3": "generateSimplexInstance~SimplexGenerator~Grad#dot3",
        "this.grad3": "generateSimplexInstance~SimplexGenerator#grad3",
        "this.p": "generateSimplexInstance~SimplexGenerator#p",
        "this.perm": "generateSimplexInstance~SimplexGenerator#perm",
        "this.gradP": "generateSimplexInstance~SimplexGenerator#gradP"
      }
    },
    "undocumented": true,
    "name": "SimplexGenerator",
    "longname": "generateSimplexInstance~SimplexGenerator",
    "kind": "function",
    "memberof": "generateSimplexInstance",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4094,
        4166
      ],
      "filename": "random_simplex.js",
      "lineno": 120,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008905",
        "name": "Grad",
        "type": "FunctionDeclaration",
        "paramnames": [
          "x",
          "y",
          "z"
        ]
      },
      "vars": {
        "this.x": "generateSimplexInstance~SimplexGenerator~Grad#x",
        "this.y": "generateSimplexInstance~SimplexGenerator~Grad#y",
        "this.z": "generateSimplexInstance~SimplexGenerator~Grad#z"
      }
    },
    "undocumented": true,
    "name": "Grad",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4125,
        4135
      ],
      "filename": "random_simplex.js",
      "lineno": 121,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008912",
        "name": "this.x",
        "type": "Identifier",
        "value": "x",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "x",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad#x",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator~Grad",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4137,
        4147
      ],
      "filename": "random_simplex.js",
      "lineno": 121,
      "columnno": 18,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008918",
        "name": "this.y",
        "type": "Identifier",
        "value": "y",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "y",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad#y",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator~Grad",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4149,
        4159
      ],
      "filename": "random_simplex.js",
      "lineno": 121,
      "columnno": 30,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008924",
        "name": "this.z",
        "type": "Identifier",
        "value": "z",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "z",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad#z",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator~Grad",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4172,
        4259
      ],
      "filename": "random_simplex.js",
      "lineno": 124,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008930",
        "name": "Grad.prototype.dot2",
        "type": "FunctionExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator",
        "value": "dot2",
        "paramnames": [
          "x",
          "y"
        ]
      }
    },
    "undocumented": true,
    "name": "dot2",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad#dot2",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator~Grad",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4266,
        4369
      ],
      "filename": "random_simplex.js",
      "lineno": 128,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008954",
        "name": "Grad.prototype.dot3",
        "type": "FunctionExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator",
        "value": "dot3",
        "paramnames": [
          "x",
          "y",
          "z"
        ]
      }
    },
    "undocumented": true,
    "name": "dot3",
    "longname": "generateSimplexInstance~SimplexGenerator~Grad#dot3",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator~Grad",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4376,
        4643
      ],
      "filename": "random_simplex.js",
      "lineno": 132,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100008985",
        "name": "this.grad3",
        "type": "ArrayExpression",
        "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "grad3",
    "longname": "generateSimplexInstance~SimplexGenerator#grad3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4650,
        5916
      ],
      "filename": "random_simplex.js",
      "lineno": 136,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009063",
        "name": "this.p",
        "type": "ArrayExpression",
        "value": "[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "p",
    "longname": "generateSimplexInstance~SimplexGenerator#p",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6004,
        6030
      ],
      "filename": "random_simplex.js",
      "lineno": 150,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009325",
        "name": "this.perm",
        "type": "NewExpression",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "perm",
    "longname": "generateSimplexInstance~SimplexGenerator#perm",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6036,
        6063
      ],
      "filename": "random_simplex.js",
      "lineno": 151,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009333",
        "name": "this.gradP",
        "type": "NewExpression",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "gradP",
    "longname": "generateSimplexInstance~SimplexGenerator#gradP",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Specifies a new seed to use.\n   * \n   * Note, that this currently supports 2^16 different seed values,\n   * but repeats seeds above and below based on a pattern.\n   * \n   * @param {Number} innerSeed - integer seed to use\n   * @method seed\n   * @instance\n   * @memberof SimplexGenerator\n   * @example\n   * const generator = utils.random.simplexGenerator(2);\n   * generator.seed(4);\n   * //-- will now use that seed from now on.\n   */",
    "meta": {
      "filename": "random_simplex.js",
      "lineno": 159,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Specifies a new seed to use.\n\nNote, that this currently supports 2^16 different seed values,\nbut repeats seeds above and below based on a pattern.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "integer seed to use",
        "name": "innerSeed"
      }
    ],
    "kind": "function",
    "name": "seed",
    "scope": "instance",
    "memberof": "SimplexGenerator",
    "examples": [
      "const generator = utils.random.simplexGenerator(2);\ngenerator.seed(4);\n//-- will now use that seed from now on."
    ],
    "longname": "SimplexGenerator#seed"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6704,
        7264
      ],
      "filename": "random_simplex.js",
      "lineno": 174,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009349",
        "name": "SimplexGenerator.prototype.seed",
        "type": "FunctionExpression",
        "funcscope": "generateSimplexInstance",
        "value": "seed",
        "paramnames": [
          "newSeed"
        ]
      },
      "vars": {
        "newSeed": "generateSimplexInstance~SimplexGenerator#seed~newSeed",
        "i": "generateSimplexInstance~SimplexGenerator#seed~i",
        "v": "generateSimplexInstance~SimplexGenerator#seed~v",
        "this.perm[undefined]": "generateSimplexInstance~SimplexGenerator#seed#perm[undefined]",
        "this.gradP[undefined]": "generateSimplexInstance~SimplexGenerator#seed#gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "seed",
    "longname": "generateSimplexInstance~SimplexGenerator#seed",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6838,
        6854
      ],
      "filename": "random_simplex.js",
      "lineno": 177,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009369",
        "name": "newSeed",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": 65536,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "newSeed",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~newSeed",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6867,
        6896
      ],
      "filename": "random_simplex.js",
      "lineno": 180,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009373",
        "name": "newSeed",
        "type": "CallExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "newSeed",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~newSeed",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6930,
        6953
      ],
      "filename": "random_simplex.js",
      "lineno": 183,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009386",
        "name": "newSeed",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "newSeed",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~newSeed",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6975,
        6980
      ],
      "filename": "random_simplex.js",
      "lineno": 186,
      "columnno": 13,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009393",
        "name": "i",
        "type": "Literal",
        "value": 0
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6991,
        6997
      ],
      "filename": "random_simplex.js",
      "lineno": 186,
      "columnno": 29,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009399",
        "name": "i",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7011,
        7012
      ],
      "filename": "random_simplex.js",
      "lineno": 187,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009404",
        "name": "v"
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~v",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7041,
        7072
      ],
      "filename": "random_simplex.js",
      "lineno": 189,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009412",
        "name": "v",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~v",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7097,
        7135
      ],
      "filename": "random_simplex.js",
      "lineno": 191,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009425",
        "name": "v",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#seed",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "generateSimplexInstance~SimplexGenerator#seed~v",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7152,
        7189
      ],
      "filename": "random_simplex.js",
      "lineno": 194,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009439",
        "name": "this.perm[undefined]",
        "type": "AssignmentExpression",
        "value": "this.perm[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "perm[undefined]",
    "longname": "generateSimplexInstance~SimplexGenerator#seed#perm[undefined]",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7167,
        7189
      ],
      "filename": "random_simplex.js",
      "lineno": 194,
      "columnno": 21,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009445",
        "name": "this.perm[undefined]",
        "type": "Identifier",
        "value": "v",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "perm[undefined]",
    "longname": "generateSimplexInstance~SimplexGenerator#seed#perm[undefined]",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7197,
        7253
      ],
      "filename": "random_simplex.js",
      "lineno": 195,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009455",
        "name": "this.gradP[undefined]",
        "type": "AssignmentExpression",
        "value": "this.gradP[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "gradP[undefined]",
    "longname": "generateSimplexInstance~SimplexGenerator#seed#gradP[undefined]",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7213,
        7253
      ],
      "filename": "random_simplex.js",
      "lineno": 195,
      "columnno": 22,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009461",
        "name": "this.gradP[undefined]",
        "type": "MemberExpression",
        "value": "this.grad3[undefined]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "gradP[undefined]",
    "longname": "generateSimplexInstance~SimplexGenerator#seed#gradP[undefined]",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#seed",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * 2d Simplex Noise value\n   * @param {Number} xin - position along the x axis\n   * @param {Number} yin - position along the y axis\n   * @returns {Number} - [0-1] exclusive \n   * @method simplex2d\n   * @memberof SimplexGenerator\n   * @example\n   * const generator = utils.random.simplexGenerator();\n   */",
    "meta": {
      "filename": "random_simplex.js",
      "lineno": 199,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "2d Simplex Noise value",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "position along the x axis",
        "name": "xin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "position along the y axis",
        "name": "yin"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- [0-1] exclusive"
      }
    ],
    "kind": "function",
    "name": "simplex2d",
    "memberof": "SimplexGenerator",
    "examples": [
      "const generator = utils.random.simplexGenerator();"
    ],
    "scope": "static",
    "longname": "SimplexGenerator.simplex2d"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7582,
        9779
      ],
      "filename": "random_simplex.js",
      "lineno": 209,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009477",
        "name": "SimplexGenerator.prototype.simplex2d",
        "type": "FunctionExpression",
        "funcscope": "generateSimplexInstance",
        "value": "simplex2d",
        "paramnames": [
          "xin",
          "yin"
        ]
      },
      "vars": {
        "n0": "generateSimplexInstance~SimplexGenerator#simplex2d~n0",
        "n1": "generateSimplexInstance~SimplexGenerator#simplex2d~n1",
        "n2": "generateSimplexInstance~SimplexGenerator#simplex2d~n2",
        "s": "generateSimplexInstance~SimplexGenerator#simplex2d~s",
        "i": "generateSimplexInstance~SimplexGenerator#simplex2d~i",
        "j": "generateSimplexInstance~SimplexGenerator#simplex2d~j",
        "t": "generateSimplexInstance~SimplexGenerator#simplex2d~t",
        "x0": "generateSimplexInstance~SimplexGenerator#simplex2d~x0",
        "y0": "generateSimplexInstance~SimplexGenerator#simplex2d~y0",
        "i1": "generateSimplexInstance~SimplexGenerator#simplex2d~i1",
        "j1": "generateSimplexInstance~SimplexGenerator#simplex2d~j1",
        "x1": "generateSimplexInstance~SimplexGenerator#simplex2d~x1",
        "y1": "generateSimplexInstance~SimplexGenerator#simplex2d~y1",
        "x2": "generateSimplexInstance~SimplexGenerator#simplex2d~x2",
        "y2": "generateSimplexInstance~SimplexGenerator#simplex2d~y2",
        "gi0": "generateSimplexInstance~SimplexGenerator#simplex2d~gi0",
        "gi1": "generateSimplexInstance~SimplexGenerator#simplex2d~gi1",
        "gi2": "generateSimplexInstance~SimplexGenerator#simplex2d~gi2",
        "t0": "generateSimplexInstance~SimplexGenerator#simplex2d~t0",
        "t1": "generateSimplexInstance~SimplexGenerator#simplex2d~t1",
        "t2": "generateSimplexInstance~SimplexGenerator#simplex2d~t2"
      }
    },
    "undocumented": true,
    "name": "simplex2d",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7660,
        7662
      ],
      "filename": "random_simplex.js",
      "lineno": 210,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009489",
        "name": "n0"
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7664,
        7666
      ],
      "filename": "random_simplex.js",
      "lineno": 210,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009491",
        "name": "n1"
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7668,
        7670
      ],
      "filename": "random_simplex.js",
      "lineno": 210,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009493",
        "name": "n2"
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7795,
        7815
      ],
      "filename": "random_simplex.js",
      "lineno": 212,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009496",
        "name": "s",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "s",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~s",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7848,
        7871
      ],
      "filename": "random_simplex.js",
      "lineno": 213,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009504",
        "name": "i",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7881,
        7904
      ],
      "filename": "random_simplex.js",
      "lineno": 214,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009514",
        "name": "j",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "j",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~j",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7914,
        7930
      ],
      "filename": "random_simplex.js",
      "lineno": 215,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009524",
        "name": "t",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7940,
        7956
      ],
      "filename": "random_simplex.js",
      "lineno": 216,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009532",
        "name": "x0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~x0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8019,
        8035
      ],
      "filename": "random_simplex.js",
      "lineno": 217,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009540",
        "name": "y0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~y0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8157,
        8159
      ],
      "filename": "random_simplex.js",
      "lineno": 220,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009548",
        "name": "i1"
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8161,
        8163
      ],
      "filename": "random_simplex.js",
      "lineno": 220,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009550",
        "name": "j1"
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8308,
        8314
      ],
      "filename": "random_simplex.js",
      "lineno": 222,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009558",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8316,
        8322
      ],
      "filename": "random_simplex.js",
      "lineno": 222,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009562",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8399,
        8405
      ],
      "filename": "random_simplex.js",
      "lineno": 224,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009567",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8407,
        8413
      ],
      "filename": "random_simplex.js",
      "lineno": 224,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009571",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8608,
        8625
      ],
      "filename": "random_simplex.js",
      "lineno": 229,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009575",
        "name": "x1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~x1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8689,
        8706
      ],
      "filename": "random_simplex.js",
      "lineno": 230,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009583",
        "name": "y1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~y1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8716,
        8736
      ],
      "filename": "random_simplex.js",
      "lineno": 231,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009591",
        "name": "x2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~x2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8798,
        8818
      ],
      "filename": "random_simplex.js",
      "lineno": 232,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009601",
        "name": "y2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~y2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8897,
        8905
      ],
      "filename": "random_simplex.js",
      "lineno": 234,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009611",
        "name": "i",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 255,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8911,
        8919
      ],
      "filename": "random_simplex.js",
      "lineno": 235,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009615",
        "name": "j",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 255,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~j",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8930,
        8964
      ],
      "filename": "random_simplex.js",
      "lineno": 237,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009619",
        "name": "gi0",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~gi0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8974,
        9018
      ],
      "filename": "random_simplex.js",
      "lineno": 238,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009633",
        "name": "gi1",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~gi1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9028,
        9070
      ],
      "filename": "random_simplex.js",
      "lineno": 239,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009651",
        "name": "gi2",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~gi2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9137,
        9165
      ],
      "filename": "random_simplex.js",
      "lineno": 241,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009669",
        "name": "t0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9191,
        9197
      ],
      "filename": "random_simplex.js",
      "lineno": 243,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009686",
        "name": "n0",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9218,
        9226
      ],
      "filename": "random_simplex.js",
      "lineno": 245,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009691",
        "name": "t0",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "t0",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9234,
        9265
      ],
      "filename": "random_simplex.js",
      "lineno": 246,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009695",
        "name": "n0",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9321,
        9349
      ],
      "filename": "random_simplex.js",
      "lineno": 248,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009708",
        "name": "t1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9375,
        9381
      ],
      "filename": "random_simplex.js",
      "lineno": 250,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009725",
        "name": "n1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9402,
        9410
      ],
      "filename": "random_simplex.js",
      "lineno": 252,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009730",
        "name": "t1",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "t1",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9418,
        9449
      ],
      "filename": "random_simplex.js",
      "lineno": 253,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009734",
        "name": "n1",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9465,
        9493
      ],
      "filename": "random_simplex.js",
      "lineno": 255,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009747",
        "name": "t2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9519,
        9525
      ],
      "filename": "random_simplex.js",
      "lineno": 257,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009764",
        "name": "n2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9546,
        9554
      ],
      "filename": "random_simplex.js",
      "lineno": 259,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009769",
        "name": "t2",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "t2",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~t2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9562,
        9593
      ],
      "filename": "random_simplex.js",
      "lineno": 260,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009773",
        "name": "n2",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex2d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex2d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex2d",
    "scope": "inner"
  },
  {
    "comment": "/**\n   * 3d Simplex Noise value\n   * @param {Number} xin - position along the x axis\n   * @param {Number} yin - position along the y axis\n   * @param {Number} zin - position along the z axis\n   * @returns {Number} - [0-1] exclusive \n   * @method simplex3d\n   * @memberof SimplexGenerator\n   */",
    "meta": {
      "filename": "random_simplex.js",
      "lineno": 267,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "3d Simplex Noise value",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "position along the x axis",
        "name": "xin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "position along the y axis",
        "name": "yin"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "position along the z axis",
        "name": "zin"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- [0-1] exclusive"
      }
    ],
    "kind": "function",
    "name": "simplex3d",
    "memberof": "SimplexGenerator",
    "scope": "static",
    "longname": "SimplexGenerator.simplex3d"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10080,
        13341
      ],
      "filename": "random_simplex.js",
      "lineno": 276,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009794",
        "name": "SimplexGenerator.prototype.simplex3d",
        "type": "FunctionExpression",
        "funcscope": "generateSimplexInstance",
        "value": "simplex3d",
        "paramnames": [
          "xin",
          "yin",
          "zin"
        ]
      },
      "vars": {
        "n0": "generateSimplexInstance~SimplexGenerator#simplex3d~n0",
        "n1": "generateSimplexInstance~SimplexGenerator#simplex3d~n1",
        "n2": "generateSimplexInstance~SimplexGenerator#simplex3d~n2",
        "n3": "generateSimplexInstance~SimplexGenerator#simplex3d~n3",
        "s": "generateSimplexInstance~SimplexGenerator#simplex3d~s",
        "i": "generateSimplexInstance~SimplexGenerator#simplex3d~i",
        "j": "generateSimplexInstance~SimplexGenerator#simplex3d~j",
        "k": "generateSimplexInstance~SimplexGenerator#simplex3d~k",
        "t": "generateSimplexInstance~SimplexGenerator#simplex3d~t",
        "x0": "generateSimplexInstance~SimplexGenerator#simplex3d~x0",
        "y0": "generateSimplexInstance~SimplexGenerator#simplex3d~y0",
        "z0": "generateSimplexInstance~SimplexGenerator#simplex3d~z0",
        "i1": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
        "j1": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
        "k1": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
        "i2": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
        "j2": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
        "k2": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
        "x1": "generateSimplexInstance~SimplexGenerator#simplex3d~x1",
        "y1": "generateSimplexInstance~SimplexGenerator#simplex3d~y1",
        "z1": "generateSimplexInstance~SimplexGenerator#simplex3d~z1",
        "x2": "generateSimplexInstance~SimplexGenerator#simplex3d~x2",
        "y2": "generateSimplexInstance~SimplexGenerator#simplex3d~y2",
        "z2": "generateSimplexInstance~SimplexGenerator#simplex3d~z2",
        "x3": "generateSimplexInstance~SimplexGenerator#simplex3d~x3",
        "y3": "generateSimplexInstance~SimplexGenerator#simplex3d~y3",
        "z3": "generateSimplexInstance~SimplexGenerator#simplex3d~z3",
        "gi0": "generateSimplexInstance~SimplexGenerator#simplex3d~gi0",
        "gi1": "generateSimplexInstance~SimplexGenerator#simplex3d~gi1",
        "gi2": "generateSimplexInstance~SimplexGenerator#simplex3d~gi2",
        "gi3": "generateSimplexInstance~SimplexGenerator#simplex3d~gi3",
        "t0": "generateSimplexInstance~SimplexGenerator#simplex3d~t0",
        "t1": "generateSimplexInstance~SimplexGenerator#simplex3d~t1",
        "t2": "generateSimplexInstance~SimplexGenerator#simplex3d~t2",
        "t3": "generateSimplexInstance~SimplexGenerator#simplex3d~t3"
      }
    },
    "undocumented": true,
    "name": "simplex3d",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "kind": "function",
    "memberof": "generateSimplexInstance~SimplexGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10163,
        10165
      ],
      "filename": "random_simplex.js",
      "lineno": 277,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009807",
        "name": "n0"
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10167,
        10169
      ],
      "filename": "random_simplex.js",
      "lineno": 277,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009809",
        "name": "n1"
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10171,
        10173
      ],
      "filename": "random_simplex.js",
      "lineno": 277,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009811",
        "name": "n2"
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10175,
        10177
      ],
      "filename": "random_simplex.js",
      "lineno": 277,
      "columnno": 20,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009813",
        "name": "n3"
      }
    },
    "undocumented": true,
    "name": "n3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10302,
        10328
      ],
      "filename": "random_simplex.js",
      "lineno": 280,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009816",
        "name": "s",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "s",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~s",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10361,
        10384
      ],
      "filename": "random_simplex.js",
      "lineno": 281,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009826",
        "name": "i",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10394,
        10417
      ],
      "filename": "random_simplex.js",
      "lineno": 282,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009836",
        "name": "j",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "j",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10427,
        10450
      ],
      "filename": "random_simplex.js",
      "lineno": 283,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009846",
        "name": "k",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "k",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10461,
        10481
      ],
      "filename": "random_simplex.js",
      "lineno": 285,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009856",
        "name": "t",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10491,
        10507
      ],
      "filename": "random_simplex.js",
      "lineno": 286,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009866",
        "name": "x0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~x0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10570,
        10586
      ],
      "filename": "random_simplex.js",
      "lineno": 287,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009874",
        "name": "y0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~y0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10596,
        10612
      ],
      "filename": "random_simplex.js",
      "lineno": 288,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009882",
        "name": "z0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "z0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~z0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10744,
        10746
      ],
      "filename": "random_simplex.js",
      "lineno": 292,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009890",
        "name": "i1"
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10748,
        10750
      ],
      "filename": "random_simplex.js",
      "lineno": 292,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009892",
        "name": "j1"
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10752,
        10754
      ],
      "filename": "random_simplex.js",
      "lineno": 292,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009894",
        "name": "k1"
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10822,
        10824
      ],
      "filename": "random_simplex.js",
      "lineno": 293,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009897",
        "name": "i2"
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10826,
        10828
      ],
      "filename": "random_simplex.js",
      "lineno": 293,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009899",
        "name": "j2"
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10830,
        10832
      ],
      "filename": "random_simplex.js",
      "lineno": 293,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009901",
        "name": "k2"
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10938,
        10944
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009914",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10946,
        10952
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009918",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10954,
        10960
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009922",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10962,
        10968
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009926",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10970,
        10976
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009930",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10978,
        10984
      ],
      "filename": "random_simplex.js",
      "lineno": 295,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009934",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11015,
        11021
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009943",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11023,
        11029
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009947",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11031,
        11037
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009951",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11039,
        11045
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009955",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11047,
        11053
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009959",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11055,
        11061
      ],
      "filename": "random_simplex.js",
      "lineno": 296,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009963",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11092,
        11098
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009968",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11100,
        11106
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009972",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11108,
        11114
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009976",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11116,
        11122
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009980",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11124,
        11130
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009984",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11132,
        11138
      ],
      "filename": "random_simplex.js",
      "lineno": 297,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009988",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11182,
        11188
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100009998",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11190,
        11196
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010002",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11198,
        11204
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010006",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11206,
        11212
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010010",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11214,
        11220
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010014",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11222,
        11228
      ],
      "filename": "random_simplex.js",
      "lineno": 299,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010018",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11259,
        11265
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010027",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11267,
        11273
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010031",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11275,
        11281
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010035",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11283,
        11289
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010039",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11291,
        11297
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010043",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11299,
        11305
      ],
      "filename": "random_simplex.js",
      "lineno": 300,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010047",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11336,
        11342
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010052",
        "name": "i1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11344,
        11350
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 35,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010056",
        "name": "j1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11352,
        11358
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010060",
        "name": "k1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11360,
        11366
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010064",
        "name": "i2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11368,
        11374
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010068",
        "name": "j2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 1,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11376,
        11382
      ],
      "filename": "random_simplex.js",
      "lineno": 301,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010072",
        "name": "k2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11672,
        11689
      ],
      "filename": "random_simplex.js",
      "lineno": 307,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010076",
        "name": "x1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~x1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11728,
        11745
      ],
      "filename": "random_simplex.js",
      "lineno": 308,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010084",
        "name": "y1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~y1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11755,
        11772
      ],
      "filename": "random_simplex.js",
      "lineno": 309,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010092",
        "name": "z1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "z1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~z1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11783,
        11804
      ],
      "filename": "random_simplex.js",
      "lineno": 311,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010100",
        "name": "x2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~x2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11842,
        11863
      ],
      "filename": "random_simplex.js",
      "lineno": 312,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010110",
        "name": "y2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~y2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11873,
        11894
      ],
      "filename": "random_simplex.js",
      "lineno": 313,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010120",
        "name": "z2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "z2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~z2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11905,
        11925
      ],
      "filename": "random_simplex.js",
      "lineno": 315,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010130",
        "name": "x3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "x3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~x3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11964,
        11984
      ],
      "filename": "random_simplex.js",
      "lineno": 316,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010140",
        "name": "y3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "y3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~y3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11994,
        12014
      ],
      "filename": "random_simplex.js",
      "lineno": 317,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010150",
        "name": "z3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "z3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~z3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12093,
        12101
      ],
      "filename": "random_simplex.js",
      "lineno": 320,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010160",
        "name": "i",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 255,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "i",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~i",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12107,
        12115
      ],
      "filename": "random_simplex.js",
      "lineno": 321,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010164",
        "name": "j",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 255,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "j",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~j",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12121,
        12129
      ],
      "filename": "random_simplex.js",
      "lineno": 322,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010168",
        "name": "k",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 255,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "k",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~k",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12140,
        12204
      ],
      "filename": "random_simplex.js",
      "lineno": 324,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010172",
        "name": "gi0",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~gi0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12214,
        12278
      ],
      "filename": "random_simplex.js",
      "lineno": 325,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010192",
        "name": "gi1",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~gi1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12288,
        12352
      ],
      "filename": "random_simplex.js",
      "lineno": 326,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010218",
        "name": "gi2",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~gi2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12362,
        12427
      ],
      "filename": "random_simplex.js",
      "lineno": 327,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010244",
        "name": "gi3",
        "type": "MemberExpression",
        "value": "this.gradP[undefined]"
      }
    },
    "undocumented": true,
    "name": "gi3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~gi3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12494,
        12532
      ],
      "filename": "random_simplex.js",
      "lineno": 330,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010270",
        "name": "t0",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12558,
        12564
      ],
      "filename": "random_simplex.js",
      "lineno": 332,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010291",
        "name": "n0",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12585,
        12593
      ],
      "filename": "random_simplex.js",
      "lineno": 334,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010296",
        "name": "t0",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "t0",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12601,
        12636
      ],
      "filename": "random_simplex.js",
      "lineno": 335,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010300",
        "name": "n0",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n0",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n0",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12692,
        12730
      ],
      "filename": "random_simplex.js",
      "lineno": 337,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010314",
        "name": "t1",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12756,
        12762
      ],
      "filename": "random_simplex.js",
      "lineno": 339,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010335",
        "name": "n1",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12783,
        12791
      ],
      "filename": "random_simplex.js",
      "lineno": 341,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010340",
        "name": "t1",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "t1",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12799,
        12834
      ],
      "filename": "random_simplex.js",
      "lineno": 342,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010344",
        "name": "n1",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n1",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n1",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12850,
        12888
      ],
      "filename": "random_simplex.js",
      "lineno": 344,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010358",
        "name": "t2",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12914,
        12920
      ],
      "filename": "random_simplex.js",
      "lineno": 346,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010379",
        "name": "n2",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12941,
        12949
      ],
      "filename": "random_simplex.js",
      "lineno": 348,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010384",
        "name": "t2",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "t2",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12957,
        12992
      ],
      "filename": "random_simplex.js",
      "lineno": 349,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010388",
        "name": "n2",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n2",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n2",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13008,
        13046
      ],
      "filename": "random_simplex.js",
      "lineno": 351,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010402",
        "name": "t3",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "t3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13072,
        13078
      ],
      "filename": "random_simplex.js",
      "lineno": 353,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010423",
        "name": "n3",
        "type": "Literal",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13099,
        13107
      ],
      "filename": "random_simplex.js",
      "lineno": 355,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010428",
        "name": "t3",
        "type": "Identifier",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "t3",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "t3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~t3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13115,
        13150
      ],
      "filename": "random_simplex.js",
      "lineno": 356,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010432",
        "name": "n3",
        "type": "BinaryExpression",
        "funcscope": "generateSimplexInstance~SimplexGenerator#simplex3d",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "n3",
    "longname": "generateSimplexInstance~SimplexGenerator#simplex3d~n3",
    "kind": "member",
    "memberof": "generateSimplexInstance~SimplexGenerator#simplex3d",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13389,
        13429
      ],
      "filename": "random_simplex.js",
      "lineno": 366,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010460",
        "name": "module.exports",
        "type": "Identifier",
        "value": "generateSimplexInstance",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        158,
        201
      ],
      "filename": "random.js",
      "lineno": 4,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010468",
        "name": "SimplexModule",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "SimplexModule",
    "longname": "SimplexModule",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Generating and picking random values.\n * \n * * Managing Seed Values\n *     * {@link module:random.seed|seed(number)} - specifies the seed that all following random calls will use\n * * Generating Random Numbers\n *     * {@link module:random.randomInteger|randomInteger(min, max)} - inclusive integer between min and max values\n *     * {@link module:random.random|randomInteger(min, max)} - inclusive float between min and max values\n * * Working with Arrays\n *     * {@link module:random.pickRandom|pickRandom(array)} - picks a value at random from the list\n *     * {@link module:random.randomArray|randomArray(size, fn)} - creates an array of size length, with each value generated from fn\n * * Simplex Noise\n *     * {@link module:random.simplexGenerator|simplexGenerator(seed)} - Number generator between -1 and 1 given an x/y/z coordinate\n * \n * While generating a simple number between two values is common, it is very important - and useful in generating fake data.\n * \n * ```\n * const firstNames = ['jane', 'john', 'paul', 'ringo'];\n * const lastNames = ['do', 'doe', 'dough', 'doh'];\n * fakeName = `${utils.random.pickRandom(firstNames)} ${utils.random.pickRandom(lastNames)}`;\n * // 'john dough'\n * ```\n * \n * Additionally, there are so many different ways of generating visualizations\n * based on simplex noise.\n * \n * From straight (red - negative / green - positive)\n * \n * ![Screenshot of animation](img/simplexNoiseAnim.gif)\n * \n * To indicators with length, and rotation (negative ccw / positive cw)\n * \n * ![Screenshot of animation](img/noiseFinal.gif)\n * \n * The possibilities are endless.\n * \n * @module random\n */",
    "meta": {
      "filename": "random.js",
      "lineno": 6,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Generating and picking random values.\n\n* Managing Seed Values\n    * {@link module:random.seed|seed(number)} - specifies the seed that all following random calls will use\n* Generating Random Numbers\n    * {@link module:random.randomInteger|randomInteger(min, max)} - inclusive integer between min and max values\n    * {@link module:random.random|randomInteger(min, max)} - inclusive float between min and max values\n* Working with Arrays\n    * {@link module:random.pickRandom|pickRandom(array)} - picks a value at random from the list\n    * {@link module:random.randomArray|randomArray(size, fn)} - creates an array of size length, with each value generated from fn\n* Simplex Noise\n    * {@link module:random.simplexGenerator|simplexGenerator(seed)} - Number generator between -1 and 1 given an x/y/z coordinate\n\nWhile generating a simple number between two values is common, it is very important - and useful in generating fake data.\n\n```\nconst firstNames = ['jane', 'john', 'paul', 'ringo'];\nconst lastNames = ['do', 'doe', 'dough', 'doh'];\nfakeName = `${utils.random.pickRandom(firstNames)} ${utils.random.pickRandom(lastNames)}`;\n// 'john dough'\n```\n\nAdditionally, there are so many different ways of generating visualizations\nbased on simplex noise.\n\nFrom straight (red - negative / green - positive)\n\n![Screenshot of animation](img/simplexNoiseAnim.gif)\n\nTo indicators with length, and rotation (negative ccw / positive cw)\n\n![Screenshot of animation](img/noiseFinal.gif)\n\nThe possibilities are endless.",
    "kind": "module",
    "name": "random",
    "longname": "module:random"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1851,
        1878
      ],
      "filename": "random.js",
      "lineno": 44,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010474",
        "name": "RandomUtil",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "RandomUtil",
    "longname": "module:random~RandomUtil",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:random",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1881,
        1926
      ],
      "filename": "random.js",
      "lineno": 46,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010480",
        "name": "module.exports.seedValue",
        "type": "BinaryExpression",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "seedValue",
    "longname": "module:random.seedValue",
    "kind": "member",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "/**\n * Specifies a new seed to be used in upcoming random calls.\n * @param {Number} newSeedValue - new seed to use in following random calls\n * @example\n * utils.random.seed(12345);\n * utils.random.randomInteger(); // 55\n */",
    "meta": {
      "range": [
        2154,
        2246
      ],
      "filename": "random.js",
      "lineno": 55,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010493",
        "name": "module.exports.seed",
        "type": "FunctionExpression",
        "value": "seed",
        "paramnames": [
          "newSeedValue"
        ]
      },
      "vars": {
        "RandomUtil.seedValue": "module:random~RandomUtil.seedValue"
      }
    },
    "description": "Specifies a new seed to be used in upcoming random calls.",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "new seed to use in following random calls",
        "name": "newSeedValue"
      }
    ],
    "examples": [
      "utils.random.seed(12345);\nutils.random.randomInteger(); // 55"
    ],
    "name": "seed",
    "longname": "module:random.seed",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2208,
        2243
      ],
      "filename": "random.js",
      "lineno": 56,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010504",
        "name": "RandomUtil.seedValue",
        "type": "Identifier",
        "value": "newSeedValue",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "seedValue",
    "longname": "module:random~RandomUtil.seedValue",
    "kind": "member",
    "memberof": "module:random~RandomUtil",
    "scope": "static"
  },
  {
    "comment": "/**\n * Used only for testing\n * @private\n */",
    "meta": {
      "range": [
        2294,
        2372
      ],
      "filename": "random.js",
      "lineno": 63,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010510",
        "name": "module.exports.getSeed",
        "type": "FunctionExpression",
        "value": "getSeed",
        "paramnames": []
      }
    },
    "description": "Used only for testing",
    "access": "private",
    "name": "getSeed",
    "longname": "module:random.getSeed",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "/**\n * Generate a random integer \n * @param {Number} [min = 0] - Minimum integer (inclusive) that could be generated\n * @param {Number} [max = 100] - Maximum integer (inclusive) number that could be generated\n * @returns {Number} - number between (and including) min and max\n * @example\n * utils.random.randomInteger(0, 100) // 40\n * utils.random.randomInteger(0, 100) // 96\n */",
    "meta": {
      "range": [
        2754,
        3175
      ],
      "filename": "random.js",
      "lineno": 76,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010524",
        "name": "module.exports.randomInteger",
        "type": "FunctionExpression",
        "value": "randomInteger",
        "paramnames": [
          "min",
          "max"
        ]
      },
      "vars": {
        "seed": "module:random.randomInteger~seed",
        "min": "module:random~min",
        "max": "module:random~max"
      }
    },
    "description": "Generate a random integer",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Minimum integer (inclusive) that could be generated",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 100,
        "description": "Maximum integer (inclusive) number that could be generated",
        "name": "max"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- number between (and including) min and max"
      }
    ],
    "examples": [
      "utils.random.randomInteger(0, 100) // 40\nutils.random.randomInteger(0, 100) // 96"
    ],
    "name": "randomInteger",
    "longname": "module:random.randomInteger",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2923,
        3002
      ],
      "filename": "random.js",
      "lineno": 79,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010540",
        "name": "seed",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "seed",
    "longname": "module:random.randomInteger~seed",
    "kind": "constant",
    "memberof": "module:random.randomInteger",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3007,
        3027
      ],
      "filename": "random.js",
      "lineno": 81,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010552",
        "name": "min",
        "type": "CallExpression",
        "funcscope": "module:random.randomInteger",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "min",
    "longname": "module:random~min",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:random"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3031,
        3052
      ],
      "filename": "random.js",
      "lineno": 82,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010560",
        "name": "max",
        "type": "CallExpression",
        "funcscope": "module:random.randomInteger",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "max",
    "longname": "module:random~max",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:random"
  },
  {
    "comment": "/**\n * Generates a random floating point number\n * @param {Number} [min = 0] - Minimum float (inclusive) that could be generated\n * @param {Number} [max = 100] - Maximum float (inclusive) number that the value will be less than\n * @returns {Number} - number between (and including) min and max\n * utils.random.randomInteger(0, 1) // 0.224223\n */",
    "meta": {
      "range": [
        3524,
        3874
      ],
      "filename": "random.js",
      "lineno": 93,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010586",
        "name": "module.exports.random",
        "type": "FunctionExpression",
        "value": "random",
        "paramnames": [
          "min",
          "max"
        ]
      },
      "vars": {
        "seed": "module:random.random~seed"
      }
    },
    "description": "Generates a random floating point number",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Minimum float (inclusive) that could be generated",
        "name": "min"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 100,
        "description": "Maximum float (inclusive) number that the value will be less than",
        "name": "max"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "- number between (and including) min and max\nutils.random.randomInteger(0, 1) // 0.224223"
      }
    ],
    "name": "random",
    "longname": "module:random.random",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3677,
        3756
      ],
      "filename": "random.js",
      "lineno": 96,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010602",
        "name": "seed",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "seed",
    "longname": "module:random.random~seed",
    "kind": "constant",
    "memberof": "module:random.random",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Picks a random value from an array of values\n * @param {Array} targetArray - Array of values to pick from\n * @returns {any} - one of the values picked at random from the target array\n * @example\n * utils.random.pickRandom(['apple', 'orange', 'pear']); // 'pear'\n */",
    "meta": {
      "range": [
        4150,
        4892
      ],
      "filename": "random.js",
      "lineno": 111,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010641",
        "name": "module.exports.pickRandom",
        "type": "FunctionExpression",
        "value": "pickRandom",
        "paramnames": [
          "targetArray"
        ]
      },
      "vars": {
        "seed": "module:random.pickRandom~seed",
        "min": "module:random.pickRandom~min",
        "max": "module:random.pickRandom~max"
      }
    },
    "description": "Picks a random value from an array of values",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Array of values to pick from",
        "name": "targetArray"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "- one of the values picked at random from the target array"
      }
    ],
    "examples": [
      "utils.random.pickRandom(['apple', 'orange', 'pear']); // 'pear'"
    ],
    "name": "pickRandom",
    "longname": "module:random.pickRandom",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4451,
        4530
      ],
      "filename": "random.js",
      "lineno": 118,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010667",
        "name": "seed",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "seed",
    "longname": "module:random.pickRandom~seed",
    "kind": "constant",
    "memberof": "module:random.pickRandom",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4774,
        4781
      ],
      "filename": "random.js",
      "lineno": 128,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010699",
        "name": "min",
        "type": "Literal",
        "value": 0
      }
    },
    "undocumented": true,
    "name": "min",
    "longname": "module:random.pickRandom~min",
    "kind": "constant",
    "memberof": "module:random.pickRandom",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4791,
        4815
      ],
      "filename": "random.js",
      "lineno": 129,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010703",
        "name": "max",
        "type": "MemberExpression",
        "value": "targetArray.length"
      }
    },
    "undocumented": true,
    "name": "max",
    "longname": "module:random.pickRandom~max",
    "kind": "constant",
    "memberof": "module:random.pickRandom",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Generates an array of random values\n * @param {Number} arraySize - length of the array to return\n * @param {Function} [generatingFunction = null] - function to use to generate or number 0-1\n * @returns {Array} - array of size arraysize\n * @example\n * utils.random.randomArray(4); // [0.23, 0.56, 0.87, 0.77];\n * utils.random.randomArray(4, () => utils.random.randomInteger(1, 100)); // [22, 11, 99, 32]\n */",
    "meta": {
      "range": [
        5309,
        5825
      ],
      "filename": "random.js",
      "lineno": 143,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010727",
        "name": "module.exports.randomArray",
        "type": "FunctionExpression",
        "value": "randomArray",
        "paramnames": [
          "arraySize",
          "generatingFunction"
        ]
      },
      "vars": {
        "seed": "module:random.randomArray~seed",
        "cleanFn": "module:random.randomArray~cleanFn",
        "": null
      }
    },
    "description": "Generates an array of random values",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "length of the array to return",
        "name": "arraySize"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "function to use to generate or number 0-1",
        "name": "generatingFunction"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- array of size arraysize"
      }
    ],
    "examples": [
      "utils.random.randomArray(4); // [0.23, 0.56, 0.87, 0.77];\nutils.random.randomArray(4, () => utils.random.randomInteger(1, 100)); // [22, 11, 99, 32]"
    ],
    "name": "randomArray",
    "longname": "module:random.randomArray",
    "kind": "function",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5596,
        5675
      ],
      "filename": "random.js",
      "lineno": 150,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010748",
        "name": "seed",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "seed",
    "longname": "module:random.randomArray~seed",
    "kind": "constant",
    "memberof": "module:random.randomArray",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5686,
        5743
      ],
      "filename": "random.js",
      "lineno": 152,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010760",
        "name": "cleanFn",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanFn",
    "longname": "module:random.randomArray~cleanFn",
    "kind": "constant",
    "memberof": "module:random.randomArray",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Returns a new Simplex Generator\n * @function simplexGenerator\n * @static\n * @param {Number} [seed] - seed to use for the generator (or null for random)\n * @returns {SimplexGenerator} - Simplex Generator that can generate in multiple dimensions\n */",
    "meta": {
      "filename": "random.js",
      "lineno": 159,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Returns a new Simplex Generator",
    "kind": "function",
    "name": "simplexGenerator",
    "scope": "static",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "seed to use for the generator (or null for random)",
        "name": "seed"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "SimplexGenerator"
          ]
        },
        "description": "- Simplex Generator that can generate in multiple dimensions"
      }
    ],
    "longname": "module:random.simplexGenerator",
    "memberof": "module:random"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6118,
        6165
      ],
      "filename": "random.js",
      "lineno": 166,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010787",
        "name": "module.exports.simplexGenerator",
        "type": "Identifier",
        "value": "SimplexModule",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "simplexGenerator",
    "longname": "module:random.simplexGenerator",
    "kind": "member",
    "memberof": "module:random",
    "scope": "static"
  },
  {
    "comment": "/**\n * Utilities / Functional methods for manipulating JavaScript sets.\n * \n * * Add Values \n *   * {@link module:set.add|add(set?, value, ...)} - add specific values to a set\n *   * {@link module:set.union|union(set, list|set|iterable)} - combine two arrays\n * * common values\n *   * {@link module:set.intersection|intersection(set, list|set|iterable)} - items in both of the lists\n * * Remove values\n *   * {@link module:set.remove|remove(set, value, ...)} - remove specific values from set and return set\n *   * {@link module:set.difference|difference(set, list|set|iteratable)} - remove set values from another  \n * * unique\n *   * new Set([ ...utils.difference(setA, setB), ...utils.difference(setB, setA)])\n * \n * Note that the EcmaScript is catching up and union, difference, etc. will be supported soon.\n * \n * However, this library removes a value and returns the set - which can be very helpful for functional programming.\n * \n * @module set\n * @exports set\n */",
    "meta": {
      "filename": "set.js",
      "lineno": 1,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Utilities / Functional methods for manipulating JavaScript sets.\n\n* Add Values \n  * {@link module:set.add|add(set?, value, ...)} - add specific values to a set\n  * {@link module:set.union|union(set, list|set|iterable)} - combine two arrays\n* common values\n  * {@link module:set.intersection|intersection(set, list|set|iterable)} - items in both of the lists\n* Remove values\n  * {@link module:set.remove|remove(set, value, ...)} - remove specific values from set and return set\n  * {@link module:set.difference|difference(set, list|set|iteratable)} - remove set values from another  \n* unique\n  * new Set([ ...utils.difference(setA, setB), ...utils.difference(setB, setA)])\n\nNote that the EcmaScript is catching up and union, difference, etc. will be supported soon.\n\nHowever, this library removes a value and returns the set - which can be very helpful for functional programming.",
    "kind": "module",
    "name": "set",
    "alias": "set",
    "longname": "module:set"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        972,
        991
      ],
      "filename": "set.js",
      "lineno": 22,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010797",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:set",
    "longname": "module:set",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1043,
        1068
      ],
      "filename": "set.js",
      "lineno": 25,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010803",
        "name": "SetUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "SetUtils",
    "longname": "module:set~SetUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:set",
    "params": []
  },
  {
    "comment": "/**\n * Mutably adds a value to a set, and then returns the set. (Allowing Chaining)\n * \n * (If you wish to immutably, use ES6: `{...setA, value1, value2, ...setB, etc...}`)\n * \n * @param {set} setTarget - set to add values to\n * @param {any} val - value to add to the set\n * @returns {set} setTarget\n * @example\n * setA = new Set([1, 2, 3]);\n * utils.array.add(setA, 4, 5, 6); // Set([1, 2, 3, 4, 5, 6])\n */",
    "meta": {
      "range": [
        1479,
        1603
      ],
      "filename": "set.js",
      "lineno": 39,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010809",
        "name": "module.exports.add",
        "type": "FunctionExpression",
        "value": "add",
        "paramnames": [
          "setTarget",
          "rest"
        ]
      },
      "vars": {
        "target": "module:set.add~target"
      }
    },
    "description": "Mutably adds a value to a set, and then returns the set. (Allowing Chaining)\n\n(If you wish to immutably, use ES6: `{...setA, value1, value2, ...setB, etc...}`)",
    "params": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "set to add values to",
        "name": "setTarget"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to add to the set",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "setTarget"
      }
    ],
    "examples": [
      "setA = new Set([1, 2, 3]);\nutils.array.add(setA, 4, 5, 6); // Set([1, 2, 3, 4, 5, 6])"
    ],
    "name": "add",
    "longname": "module:set.add",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1543,
        1583
      ],
      "filename": "set.js",
      "lineno": 40,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010822",
        "name": "target",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "module:set.add~target",
    "kind": "constant",
    "memberof": "module:set.add",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Mutably Adds all the values from a target into a set. (Allowing Chaining)\n * \n * (If you wish to union immutably, use ES6: `{...setA, ...setB}`)\n * \n * **Note**: this works with Arrays and other things iteratable\n *\n * @param {set} setTarget - set to add values to\n * @param {iteratable} iteratable - iteratable that can be unioned into the set.\n * @returns {set} setTarget\n * @example\n * \n * setA = new Set([1, 2, 3]);\n * setB = new Set([4, 5, 6];\n * array.union(setA, setB) // Set([1, 2, 3, 4, 5, 6])\n * \n * setA = new Set([1, 2, 3]);\n * listB = [4, 5, 6];\n * array.union(setA, listB) // Set([1, 2, 3, 4, 5, 6])\n * \n */",
    "meta": {
      "range": [
        2235,
        2507
      ],
      "filename": "set.js",
      "lineno": 65,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010833",
        "name": "module.exports.union",
        "type": "FunctionExpression",
        "value": "union",
        "paramnames": [
          "setTarget",
          "iteratable"
        ]
      },
      "vars": {
        "target": "module:set.union~target",
        "v": "module:set.union~v"
      }
    },
    "description": "Mutably Adds all the values from a target into a set. (Allowing Chaining)\n\n(If you wish to union immutably, use ES6: `{...setA, ...setB}`)\n\n**Note**: this works with Arrays and other things iteratable",
    "params": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "set to add values to",
        "name": "setTarget"
      },
      {
        "type": {
          "names": [
            "iteratable"
          ]
        },
        "description": "iteratable that can be unioned into the set.",
        "name": "iteratable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "setTarget"
      }
    ],
    "examples": [
      "setA = new Set([1, 2, 3]);\nsetB = new Set([4, 5, 6];\narray.union(setA, setB) // Set([1, 2, 3, 4, 5, 6])\n\nsetA = new Set([1, 2, 3]);\nlistB = [4, 5, 6];\narray.union(setA, listB) // Set([1, 2, 3, 4, 5, 6])"
    ],
    "name": "union",
    "longname": "module:set.union",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2306,
        2372
      ],
      "filename": "set.js",
      "lineno": 66,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010845",
        "name": "target",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "module:set.union~target",
    "kind": "constant",
    "memberof": "module:set.union",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2439,
        2440
      ],
      "filename": "set.js",
      "lineno": 69,
      "columnno": 13,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010860",
        "name": "v"
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "module:set.union~v",
    "kind": "member",
    "memberof": "module:set.union",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Immutably identify all items that are common in two sets of iterable items\n * \n * **Note**: this works with Arrays and other things iteratable\n * \n * @param {Set} sourceA - the set to check for common items\n * @param {Set} sourceB - another set to check for common items\n * @returns {Set} - set of items that are in both sourceA and sourceB\n * @example\n * setA = new Set([1, 2, 3, 4]);\n * setB = new Set([3, 4, 5, 6]);\n * utils.set.intersection(setA, setB); // Set([3, 4])\n * \n * // Note that you can use other iteratable things too\n * utils.set.intersection([1, 2, 3, 4], [3, 4, 5, 6]); // Set([3, 4])\n */",
    "meta": {
      "range": [
        3124,
        3361
      ],
      "filename": "set.js",
      "lineno": 92,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010873",
        "name": "module.exports.intersection",
        "type": "FunctionExpression",
        "value": "intersection",
        "paramnames": [
          "sourceA",
          "sourceB"
        ]
      },
      "vars": {
        "targetA": "module:set.intersection~targetA",
        "results": "module:set.intersection~results",
        "": null
      }
    },
    "description": "Immutably identify all items that are common in two sets of iterable items\n\n**Note**: this works with Arrays and other things iteratable",
    "params": [
      {
        "type": {
          "names": [
            "Set"
          ]
        },
        "description": "the set to check for common items",
        "name": "sourceA"
      },
      {
        "type": {
          "names": [
            "Set"
          ]
        },
        "description": "another set to check for common items",
        "name": "sourceB"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Set"
          ]
        },
        "description": "- set of items that are in both sourceA and sourceB"
      }
    ],
    "examples": [
      "setA = new Set([1, 2, 3, 4]);\nsetB = new Set([3, 4, 5, 6]);\nutils.set.intersection(setA, setB); // Set([3, 4])\n\n// Note that you can use other iteratable things too\nutils.set.intersection([1, 2, 3, 4], [3, 4, 5, 6]); // Set([3, 4])"
    ],
    "name": "intersection",
    "longname": "module:set.intersection",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3204,
        3265
      ],
      "filename": "set.js",
      "lineno": 93,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010885",
        "name": "targetA",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "targetA",
    "longname": "module:set.intersection~targetA",
    "kind": "constant",
    "memberof": "module:set.intersection",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3275,
        3340
      ],
      "filename": "set.js",
      "lineno": 94,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010896",
        "name": "results",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "module:set.intersection~results",
    "kind": "constant",
    "memberof": "module:set.intersection",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Mutably removes a value to a set, and then returns the set. (Allowing for chaining)\n * \n * @param {set} setTarget - set to remove values from\n * @param {any} val - value to remove from the set\n * @returns {set} setTarget\n * @example\n * setA = new Set([1, 2, 3, 4, 5])\n * utils.set.remove(setA, 4, 5); // Set([1, 2, 3])\n */",
    "meta": {
      "range": [
        3694,
        3829
      ],
      "filename": "set.js",
      "lineno": 108,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010916",
        "name": "module.exports.remove",
        "type": "FunctionExpression",
        "value": "remove",
        "paramnames": [
          "setTarget",
          "rest"
        ]
      },
      "vars": {
        "target": "module:set.remove~target"
      }
    },
    "description": "Mutably removes a value to a set, and then returns the set. (Allowing for chaining)",
    "params": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "set to remove values from",
        "name": "setTarget"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "value to remove from the set",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "setTarget"
      }
    ],
    "examples": [
      "setA = new Set([1, 2, 3, 4, 5])\nutils.set.remove(setA, 4, 5); // Set([1, 2, 3])"
    ],
    "name": "remove",
    "longname": "module:set.remove",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3764,
        3809
      ],
      "filename": "set.js",
      "lineno": 109,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010929",
        "name": "target",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "module:set.remove~target",
    "kind": "constant",
    "memberof": "module:set.remove",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Mutably removes all the values from one set in another\n * \n * @param {set} setTarget - set to remove values from\n * @param {iteratable} iteratable - iteratable that can be removed from the set.\n * @returns {set} setTarget\n * @example\n * setA = new Set([1, 2, 3, 4, 5, 6])\n * setB = new Set([4, 5, 6])\n * utils.set.difference(setA, setB) // Set([1, 2, 3])\n */",
    "meta": {
      "range": [
        4198,
        4483
      ],
      "filename": "set.js",
      "lineno": 124,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010940",
        "name": "module.exports.difference",
        "type": "FunctionExpression",
        "value": "difference",
        "paramnames": [
          "setTarget",
          "iteratable"
        ]
      },
      "vars": {
        "target": "module:set.difference~target",
        "v": "module:set.difference~v"
      }
    },
    "description": "Mutably removes all the values from one set in another",
    "params": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "set to remove values from",
        "name": "setTarget"
      },
      {
        "type": {
          "names": [
            "iteratable"
          ]
        },
        "description": "iteratable that can be removed from the set.",
        "name": "iteratable"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "setTarget"
      }
    ],
    "examples": [
      "setA = new Set([1, 2, 3, 4, 5, 6])\nsetB = new Set([4, 5, 6])\nutils.set.difference(setA, setB) // Set([1, 2, 3])"
    ],
    "name": "difference",
    "longname": "module:set.difference",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4279,
        4345
      ],
      "filename": "set.js",
      "lineno": 125,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010952",
        "name": "target",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "module:set.difference~target",
    "kind": "constant",
    "memberof": "module:set.difference",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4412,
        4413
      ],
      "filename": "set.js",
      "lineno": 128,
      "columnno": 13,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010967",
        "name": "v"
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "module:set.difference~v",
    "kind": "member",
    "memberof": "module:set.difference",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Immutably verifies the superset contains all items in iteratable,\n * and returns the set of items not found in the superset.\n * \n * @param {set} superSet - set to check it contains all iteratable items\n * @param {iteratable} iteratableWithAllValues - iteratable with all items\n * @returns {Set} - set with items not in setToCheck (or an empty set if all contained)\n * @example\n * \n * const possibeSuperSet = new Set([1,2,3,4,5,6]);\n * const subset = new Set([4,5,6,7]);\n * set.findItemsNotContained(possibleSuperSet, subset); // Set([7]);\n */",
    "meta": {
      "range": [
        5036,
        5372
      ],
      "filename": "set.js",
      "lineno": 148,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010980",
        "name": "module.exports.findItemsNotContained",
        "type": "FunctionExpression",
        "value": "findItemsNotContained",
        "paramnames": [
          "superSet",
          "iteratable"
        ]
      },
      "vars": {
        "target": "module:set.findItemsNotContained~target",
        "result": "module:set.findItemsNotContained~result",
        "v": "module:set.findItemsNotContained~v"
      }
    },
    "description": "Immutably verifies the superset contains all items in iteratable,\nand returns the set of items not found in the superset.",
    "params": [
      {
        "type": {
          "names": [
            "set"
          ]
        },
        "description": "set to check it contains all iteratable items",
        "name": "superSet"
      },
      {
        "type": {
          "names": [
            "iteratable"
          ]
        },
        "description": "iteratable with all items",
        "name": "iteratableWithAllValues"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Set"
          ]
        },
        "description": "- set with items not in setToCheck (or an empty set if all contained)"
      }
    ],
    "examples": [
      "const possibeSuperSet = new Set([1,2,3,4,5,6]);\nconst subset = new Set([4,5,6,7]);\nset.findItemsNotContained(possibleSuperSet, subset); // Set([7]);"
    ],
    "name": "findItemsNotContained",
    "longname": "module:set.findItemsNotContained",
    "kind": "function",
    "memberof": "module:set",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5138,
        5201
      ],
      "filename": "set.js",
      "lineno": 149,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100010992",
        "name": "target",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "target",
    "longname": "module:set.findItemsNotContained~target",
    "kind": "constant",
    "memberof": "module:set.findItemsNotContained",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5211,
        5229
      ],
      "filename": "set.js",
      "lineno": 150,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011003",
        "name": "result",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "module:set.findItemsNotContained~result",
    "kind": "constant",
    "memberof": "module:set.findItemsNotContained",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5266,
        5267
      ],
      "filename": "set.js",
      "lineno": 152,
      "columnno": 15,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011012",
        "name": "v"
      }
    },
    "undocumented": true,
    "name": "v",
    "longname": "module:set.findItemsNotContained~v",
    "kind": "constant",
    "memberof": "module:set.findItemsNotContained",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6,
        142
      ],
      "filename": "SourceMap.js",
      "lineno": 1,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011035",
        "name": "addObjectProperty",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "obj[undefined]": null
      }
    },
    "undocumented": true,
    "name": "addObjectProperty",
    "longname": "addObjectProperty",
    "kind": "function",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        104,
        125
      ],
      "filename": "SourceMap.js",
      "lineno": 3,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011043",
        "name": "obj[undefined]",
        "type": "Identifier",
        "value": "value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "obj[undefined]",
    "longname": "obj[undefined]",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n * Simple class that extends Map - to include a source and toString fixes.\n * \n * Specifically generated from {@link module:group.by|group.by(collection, ...)}\n * \n * * Reduce Group Magic\n *   * {@link SourceMap#reduce|SourceMap.reduce(fn)} - Reduce the groups held within to objects - for reports\n *   * {@link SourceMap#reduceSeparate|SourceMap.reduceSeparate(fn)} - Reduce the groups to objects - for charts\n *   * {@link SourceMap#map|SourceMap.map(fn)} - Map the leaf (array) collection to allow for sorting, filtering, reducing, etc.\n * * Source functionality\n *   * {@link SourceMap#getSource|SourceMap.getSource} - specify the source of how the group was made\n *   * {@link SourceMap#setSource|SourceMap.setSource} - get the source of how the group was made\n * * Fixing Map toString / JSON.Stringify common issues\n *   * {@link SourceMap.stringifyReducer|SourceMap.stringifyReducer} - JSON.stringify(map, reducer) - to allow maps to convert\n *   * {@link SourceMap#toJSON|SourceMap.toJSON} - Corrected toJSON functionality, so it works as expected\n *   * {@link SourceMap#toString|SourceMap.toString} - Corrected toString functionality, so it works as expected\n */",
    "meta": {
      "range": [
        1322,
        21078
      ],
      "filename": "SourceMap.js",
      "lineno": 24,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011050",
        "name": "SourceMap",
        "type": "ClassDeclaration",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "classdesc": "Simple class that extends Map - to include a source and toString fixes.\n\nSpecifically generated from {@link module:group.by|group.by(collection, ...)}\n\n* Reduce Group Magic\n  * {@link SourceMap#reduce|SourceMap.reduce(fn)} - Reduce the groups held within to objects - for reports\n  * {@link SourceMap#reduceSeparate|SourceMap.reduceSeparate(fn)} - Reduce the groups to objects - for charts\n  * {@link SourceMap#map|SourceMap.map(fn)} - Map the leaf (array) collection to allow for sorting, filtering, reducing, etc.\n* Source functionality\n  * {@link SourceMap#getSource|SourceMap.getSource} - specify the source of how the group was made\n  * {@link SourceMap#setSource|SourceMap.setSource} - get the source of how the group was made\n* Fixing Map toString / JSON.Stringify common issues\n  * {@link SourceMap.stringifyReducer|SourceMap.stringifyReducer} - JSON.stringify(map, reducer) - to allow maps to convert\n  * {@link SourceMap#toJSON|SourceMap.toJSON} - Corrected toJSON functionality, so it works as expected\n  * {@link SourceMap#toString|SourceMap.toString} - Corrected toString functionality, so it works as expected",
    "name": "SourceMap",
    "longname": "SourceMap",
    "kind": "class",
    "scope": "global"
  },
  {
    "comment": "/**\n   * The property the map was sourced from\n   * @type {String}\n   */",
    "meta": {
      "range": [
        1429,
        1436
      ],
      "filename": "SourceMap.js",
      "lineno": 29,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011054",
        "name": "source",
        "type": "ClassProperty"
      }
    },
    "description": "The property the map was sourced from",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "source",
    "longname": "SourceMap#source",
    "kind": "member",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Specify the source\n   * @param {Strinng} source -\n   */",
    "meta": {
      "range": [
        1507,
        1556
      ],
      "filename": "SourceMap.js",
      "lineno": 35,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011055",
        "name": "SourceMap#setSource",
        "type": "MethodDefinition",
        "paramnames": [
          "source"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Specify the source",
    "params": [
      {
        "type": {
          "names": [
            "Strinng"
          ]
        },
        "description": "-",
        "name": "source"
      }
    ],
    "name": "setSource",
    "longname": "SourceMap#setSource",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        1531,
        1551
      ],
      "filename": "SourceMap.js",
      "lineno": 36,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011061",
        "name": "this.source",
        "type": "Identifier",
        "value": "source",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "source",
    "longname": "SourceMap#source",
    "kind": "member",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Getter for the source\n   * @returns {String}\n   */",
    "meta": {
      "range": [
        1622,
        1663
      ],
      "filename": "SourceMap.js",
      "lineno": 43,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011066",
        "name": "SourceMap#getSource",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Getter for the source",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "name": "getSource",
    "longname": "SourceMap#getSource",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "/**\n   * Use this for a reducer for Maps if ever needed.\n   * \n   * (NOTE: SourceMap already uses this where needed, you only would use this for normal maps)\n   * \n   * `JSON.stringify(new Map())` doesn't work well, it just returns `Map()`\n   * - regardless of what it contains\n   * \n   * instead use something like this:\n   * \n   * ```\n   * //-- can be a map, or any object, even one including a map\n   * const toBeStringified = { value: 'a', map: new Map() };\n   * \n   * //-- simple destructure to make it easier to access\n   * const stringifyReducer = utils.SourceMap.stringifyReducer;\n   * \n   * //-- pass it in as the second argument\n   * JSON.stringify(toBeStringified, stringifyReducer);\n   * \n   * // returns\n   * {\"value\":\"a\",\"map\":{\"dataType\":\"Map\",\"value\":[[\"A\",1],[\"B\",2]]}}\n   * \n   * //-- or on a traditional map\n   * const standardMap = new Map([['a', 1], ['b', 2]]);\n   * \n   * JSON.stringify(standardMap, stringifyReducer);\n   * \n   * // returns\n   * {\"dataType\":\"Map\",\"value\":[[\"a\",1],[\"b\",2]]}\n   * ```\n   * \n   * @param {String} key - the name of the property\n   * @param {any} value -\n   * @returns {Object}\n   */",
    "meta": {
      "range": [
        2804,
        3203
      ],
      "filename": "SourceMap.js",
      "lineno": 83,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011074",
        "name": "SourceMap.stringifyReducer",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Use this for a reducer for Maps if ever needed.\n\n(NOTE: SourceMap already uses this where needed, you only would use this for normal maps)\n\n`JSON.stringify(new Map())` doesn't work well, it just returns `Map()`\n- regardless of what it contains\n\ninstead use something like this:\n\n```\n//-- can be a map, or any object, even one including a map\nconst toBeStringified = { value: 'a', map: new Map() };\n\n//-- simple destructure to make it easier to access\nconst stringifyReducer = utils.SourceMap.stringifyReducer;\n\n//-- pass it in as the second argument\nJSON.stringify(toBeStringified, stringifyReducer);\n\n// returns\n{\"value\":\"a\",\"map\":{\"dataType\":\"Map\",\"value\":[[\"A\",1],[\"B\",2]]}}\n\n//-- or on a traditional map\nconst standardMap = new Map([['a', 1], ['b', 2]]);\n\nJSON.stringify(standardMap, stringifyReducer);\n\n// returns\n{\"dataType\":\"Map\",\"value\":[[\"a\",1],[\"b\",2]]}\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "the name of the property",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "-",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "name": "stringifyReducer",
    "longname": "SourceMap.stringifyReducer",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2903,
        2924
      ],
      "filename": "SourceMap.js",
      "lineno": 86,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011087",
        "name": "dataType",
        "type": "Literal",
        "value": "SourceMap"
      }
    },
    "undocumented": true,
    "name": "dataType",
    "longname": "dataType",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2934,
        2954
      ],
      "filename": "SourceMap.js",
      "lineno": 87,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011089",
        "name": "source",
        "type": "MemberExpression",
        "value": "value.source"
      }
    },
    "undocumented": true,
    "name": "source",
    "longname": "source",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        2964,
        2997
      ],
      "filename": "SourceMap.js",
      "lineno": 88,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011093",
        "name": "data",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3069,
        3084
      ],
      "filename": "SourceMap.js",
      "lineno": 92,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011109",
        "name": "dataType",
        "type": "Literal",
        "value": "Map"
      }
    },
    "undocumented": true,
    "name": "dataType",
    "longname": "dataType",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3094,
        3128
      ],
      "filename": "SourceMap.js",
      "lineno": 93,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011111",
        "name": "value",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "value",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n   * toString() override to use the stringify reducer.\n   * \n   * Now you can use `String(sourceMapInstance)` and it will work correctly.\n   * \n   * ```\n   * //-- for instance\n   * String(sourceMapInstance)\n   * ```\n   * \n   * provides\n   * \n   * ```\n   * {\"dataType\":\"SourceMap\",\"source\":\"city\",\"data\":\n   * [[\"Seattle\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n   * [[\"Aug\",[{\"id\":1,\"city\":\"Seattle\",\"month\":\"Aug\",\"precip\":0.87}]],\n   * [\"Apr\",[{\"id\":0,\"city\":\"Seattle\",\"month\":\"Apr\",\"precip\":2.68}]],\n   * [\"Dec\",[{\"id\":2,\"city\":\"Seattle\",\"month\":\"Dec\",\"precip\":5.31}]]]}],\n   * [\"New York\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n   * [[\"Apr\",[{\"id\":3,\"city\":\"New York\",\"month\":\"Apr\",\"precip\":3.94}]],\n   * [\"Aug\",[{\"id\":4,\"city\":\"New York\",\"month\":\"Aug\",\"precip\":4.13}]],\n   * [\"Dec\",[{\"id\":5,\"city\":\"New York\",\"month\":\"Dec\",\"precip\":3.58}]]]}],\n   * [\"Chicago\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n   * [[\"Apr\",[{\"id\":6,\"city\":\"Chicago\",\"month\":\"Apr\",\"precip\":3.62}]],\n   * [\"Dec\",[{\"id\":8,\"city\":\"Chicago\",\"month\":\"Dec\",\"precip\":2.56}]],\n   * [\"Aug\",[{\"id\":7,\"city\":\"Chicago\",\"month\":\"Aug\",\"precip\":3.98}]]]}]]}\n   * ```\n   * \n   * @returns {String}\n   */",
    "meta": {
      "range": [
        4404,
        4481
      ],
      "filename": "SourceMap.js",
      "lineno": 129,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011122",
        "name": "SourceMap#toString",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "toString() override to use the stringify reducer.\n\nNow you can use `String(sourceMapInstance)` and it will work correctly.\n\n```\n//-- for instance\nString(sourceMapInstance)\n```\n\nprovides\n\n```\n{\"dataType\":\"SourceMap\",\"source\":\"city\",\"data\":\n[[\"Seattle\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n[[\"Aug\",[{\"id\":1,\"city\":\"Seattle\",\"month\":\"Aug\",\"precip\":0.87}]],\n[\"Apr\",[{\"id\":0,\"city\":\"Seattle\",\"month\":\"Apr\",\"precip\":2.68}]],\n[\"Dec\",[{\"id\":2,\"city\":\"Seattle\",\"month\":\"Dec\",\"precip\":5.31}]]]}],\n[\"New York\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n[[\"Apr\",[{\"id\":3,\"city\":\"New York\",\"month\":\"Apr\",\"precip\":3.94}]],\n[\"Aug\",[{\"id\":4,\"city\":\"New York\",\"month\":\"Aug\",\"precip\":4.13}]],\n[\"Dec\",[{\"id\":5,\"city\":\"New York\",\"month\":\"Dec\",\"precip\":3.58}]]]}],\n[\"Chicago\",{\"dataType\":\"SourceMap\",\"source\":\"month\",\"data\":\n[[\"Apr\",[{\"id\":6,\"city\":\"Chicago\",\"month\":\"Apr\",\"precip\":3.62}]],\n[\"Dec\",[{\"id\":8,\"city\":\"Chicago\",\"month\":\"Dec\",\"precip\":2.56}]],\n[\"Aug\",[{\"id\":7,\"city\":\"Chicago\",\"month\":\"Aug\",\"precip\":3.98}]]]}]]}\n```",
    "returns": [
      {
        "type": {
          "names": [
            "String"
          ]
        }
      }
    ],
    "name": "toString",
    "longname": "SourceMap#toString",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "/**\n   * `toJSON()` override.\n   * \n   * Now you can use `JSON.stringify(sourceMapInstance)` and it will work correctly\n   * \n   * or within Jupyter / iJavaScript:\n   * \n   * ```\n   * $$.json(sourceMapInstance)\n   * ```\n   * \n   * and you can explore the values in collapsing folders\n   * \n   * ![Screenshot using $$.json](img/SourceMap_jsonExplore.png)\n   * \n   * @returns {Object}\n   */",
    "meta": {
      "range": [
        4876,
        5005
      ],
      "filename": "SourceMap.js",
      "lineno": 150,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011135",
        "name": "SourceMap#toJSON",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "`toJSON()` override.\n\nNow you can use `JSON.stringify(sourceMapInstance)` and it will work correctly\n\nor within Jupyter / iJavaScript:\n\n```\n$$.json(sourceMapInstance)\n```\n\nand you can explore the values in collapsing folders\n\n![Screenshot using $$.json](img/SourceMap_jsonExplore.png)",
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "name": "toJSON",
    "longname": "SourceMap#toJSON",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4906,
        4927
      ],
      "filename": "SourceMap.js",
      "lineno": 152,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011141",
        "name": "dataType",
        "type": "Literal",
        "value": "SourceMap"
      }
    },
    "undocumented": true,
    "name": "dataType",
    "longname": "dataType",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4935,
        4954
      ],
      "filename": "SourceMap.js",
      "lineno": 153,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011143",
        "name": "source",
        "type": "MemberExpression",
        "value": "this.source"
      }
    },
    "undocumented": true,
    "name": "source",
    "longname": "source",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4962,
        4994
      ],
      "filename": "SourceMap.js",
      "lineno": 154,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011147",
        "name": "data",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n   * Reduces a SourceMap by groups, to a collection of objects that can be printed.\n   * \n   * Note that the ReduceFn is called at the grouped collection of records level,\n   * not the entire collection.\n   * \n   * This can be very helpful when working with tables.\n   * \n   * ```\n   * new utils.TableGenerator(\n   *   utils.group.by(weather, 'city')\n   *     .reduce((group) => ({\n   *       min: utils.agg.min(group, 'precip'),\n   *       max: utils.agg.max(group, 'precip'),\n   *       avg: utils.agg.avgMean(group, 'precip')\n   *     }))\n   * )\n   *   .render()\n   * ```\n   * \n   * ![Screenshot of reduce with table](img/aggregateReduceTable.png)\n   * \n   * @param {Function} reduceFn - (collection, props) => {Object} - Function that reduces the collection to an object\n   * @param {Array} reduceFn.collection - the collection of records in the group\n   * @param {Object} reduceFn.collectionProps - the properties and values the collection was grouped by\n   * @returns {Array} - Array of objects merged with the parent group attributes and reduceFn result\n   * @see {@link SourceMap#reduceSeparate|reduceSeparate()} - for separate objects - useful for vega charts\n   * @example\n   * collection = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n   * ];\n   * utils.group.by(collection, 'city')\n   *    .reduce((records) => {\n   *      min: utils.aggregate.min('precip'),\n   *      max: utils.aggregate.min('precip'),\n   *      avg: utils.aggregate.avgMean('precip')\n   *    });\n   * //-- results\n   * [{ city: 'Seattle', min: 0.87, max: 2.68, avg: 1.78 },\n   *  { city: 'New York', min: 3.94, max: 4.13, avg: 4.06 }];\n   */",
    "meta": {
      "range": [
        6851,
        6927
      ],
      "filename": "SourceMap.js",
      "lineno": 202,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011156",
        "name": "SourceMap#reduce",
        "type": "MethodDefinition",
        "paramnames": [
          "reduceFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Reduces a SourceMap by groups, to a collection of objects that can be printed.\n\nNote that the ReduceFn is called at the grouped collection of records level,\nnot the entire collection.\n\nThis can be very helpful when working with tables.\n\n```\nnew utils.TableGenerator(\n  utils.group.by(weather, 'city')\n    .reduce((group) => ({\n      min: utils.agg.min(group, 'precip'),\n      max: utils.agg.max(group, 'precip'),\n      avg: utils.agg.avgMean(group, 'precip')\n    }))\n)\n  .render()\n```\n\n![Screenshot of reduce with table](img/aggregateReduceTable.png)",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(collection, props) => {Object} - Function that reduces the collection to an object",
        "name": "reduceFn"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the collection of records in the group",
        "name": "reduceFn.collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the properties and values the collection was grouped by",
        "name": "reduceFn.collectionProps"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of objects merged with the parent group attributes and reduceFn result"
      }
    ],
    "see": [
      "{@link SourceMap#reduceSeparate|reduceSeparate()} - for separate objects - useful for vega charts"
    ],
    "examples": [
      "collection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n];\nutils.group.by(collection, 'city')\n   .reduce((records) => {\n     min: utils.aggregate.min('precip'),\n     max: utils.aggregate.min('precip'),\n     avg: utils.aggregate.avgMean('precip')\n   });\n//-- results\n[{ city: 'Seattle', min: 0.87, max: 2.68, avg: 1.78 },\n { city: 'New York', min: 3.94, max: 4.13, avg: 4.06 }];"
    ],
    "name": "reduce",
    "longname": "SourceMap#reduce",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Reduces a SourceMap by groups, to a collection of objects that can be printed.\n   * \n   * **This can be very helpful when working with tables.**\n   * \n   * ```\n   * new utils.TableGenerator(\n   *   utils.group.by(weather, 'city')\n   *     .reduce((group) => ({\n   *       min: utils.agg.min(group, 'precip'),\n   *       max: utils.agg.max(group, 'precip'),\n   *       avg: utils.agg.avgMean(group, 'precip')\n   *     }))\n   * )\n   *   .render()\n   * ```\n   * \n   * ![Screenshot of reduce with table](img/aggregateReduceTable.png)\n   * \n   * @param {Function} reduceFn - (collection, props) => {Object} - Function that reduces the collection to an object\n   * @param {Array} reduceFn.collection - the collection of records in the group\n   * @param {Object} reduceFn.collectionProps - the properties and values the collection was grouped by\n   * @returns {Array} - Array of objects merged with the parent group attributes and reduceFn result\n   * @see {@link SourceMap#reduce|reduce()} - to call this method from an instance\n   * @private\n   * @example\n   * collection = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n   * ];\n   * utils.group.by(collection, 'city')\n   *    .reduce((records) => ({\n   *      min: utils.aggregate.min('precip'),\n   *      max: utils.aggregate.min('precip'),\n   *      avg: utils.aggregate.avgMean('precip')\n   *    }));\n   * //-- results\n   * [{ city: 'Seattle', min: 0.87, max: 2.68, avg: 1.78 },\n   *  { city: 'New York', min: 3.94, max: 4.13, avg: 4.06 }];\n   */",
    "meta": {
      "range": [
        8648,
        9458
      ],
      "filename": "SourceMap.js",
      "lineno": 248,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011169",
        "name": "SourceMap.reduceGroup",
        "type": "MethodDefinition",
        "paramnames": [
          "sourceMap",
          "reduceFn",
          "currentObj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Reduces a SourceMap by groups, to a collection of objects that can be printed.\n\n**This can be very helpful when working with tables.**\n\n```\nnew utils.TableGenerator(\n  utils.group.by(weather, 'city')\n    .reduce((group) => ({\n      min: utils.agg.min(group, 'precip'),\n      max: utils.agg.max(group, 'precip'),\n      avg: utils.agg.avgMean(group, 'precip')\n    }))\n)\n  .render()\n```\n\n![Screenshot of reduce with table](img/aggregateReduceTable.png)",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(collection, props) => {Object} - Function that reduces the collection to an object",
        "name": "reduceFn"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the collection of records in the group",
        "name": "reduceFn.collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the properties and values the collection was grouped by",
        "name": "reduceFn.collectionProps"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of objects merged with the parent group attributes and reduceFn result"
      }
    ],
    "see": [
      "{@link SourceMap#reduce|reduce()} - to call this method from an instance"
    ],
    "access": "private",
    "examples": [
      "collection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n];\nutils.group.by(collection, 'city')\n   .reduce((records) => ({\n     min: utils.aggregate.min('precip'),\n     max: utils.aggregate.min('precip'),\n     avg: utils.aggregate.avgMean('precip')\n   }));\n//-- results\n[{ city: 'Seattle', min: 0.87, max: 2.68, avg: 1.78 },\n { city: 'New York', min: 3.94, max: 4.13, avg: 4.06 }];"
    ],
    "name": "reduceGroup",
    "longname": "SourceMap.reduceGroup",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8802,
        9014
      ],
      "filename": "SourceMap.js",
      "lineno": 251,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011184",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9301,
        9368
      ],
      "filename": "SourceMap.js",
      "lineno": 264,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011227",
        "name": "results",
        "type": "ArrayExpression",
        "value": "[\"{}\"]"
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Reduces, but puts each aggregate value on a separate record.\n   * \n   * **This is particularly useful for charting vega, as series must be on separate objects.**\n   * \n   * Each object then made per group leaf collection, preserving the groups used to make it.\n   * \n   * The object generated by the function is then merged.\n   * \n   * ```\n   * utils.vega.svg((vl) => vl.markLine()\n   *     .data(\n   *         utils.group.by(weather, 'city')\n   *             .reduceSeparate((group) => ({\n   *                 min: utils.agg.min(group, 'precip'),\n   *                 max: utils.agg.max(group, 'precip'),\n   *                 avg: utils.agg.avgMean(group, 'precip')\n   *             }))\n   *     )\n   *     .width(200)\n   *     .encode(\n   *         vl.x().fieldN('city'),\n   *         vl.y().fieldQ('_aggregateValue'),\n   *         vl.color().fieldN('_aggregateKey')\n   * ));\n   * ```\n   * \n   * ![Screenshot of reduce with chart](img/aggregateReduceSeparateChart.png)\n   * \n   * @param {Function} reduceFn - (collection, props) => {Object} - Function that reduces the collection to an object\n   * @param {Array} reduceFn.collection - the collection of records in the group\n   * @param {Object} reduceFn.collectionProps - the properties and values the collection was grouped by\n   * @returns {Array}\n   * @see {@link SourceMap#reduce|reduce()} - for a compact object with multiple aggregate values, useful for tables\n   * @example\n   * utils.group.by(weather, 'city')\n   *   .reduceSeparate((group) => ({\n   *     min: utils.agg.min(group, 'precip'),\n   *     max: utils.agg.max(group, 'precip'),\n   *     avg: utils.agg.avgMean(group, 'precip')\n   *   }));\n   * \n   * //-- results\n   * [\n   *   { city: 'Seattle', _aggregateKey: 'min', _aggregateValue: 0.87 },\n   *   { city: 'Seattle', _aggregateKey: 'max', _aggregateValue: 5.31 },\n   *   { city: 'Seattle', _aggregateKey: 'avg', _aggregateValue: 2.953 },\n   *   { city: 'New York', _aggregateKey: 'min', _aggregateValue: 3.58 },\n   *   { city: 'New York', _aggregateKey: 'max', _aggregateValue: 4.13 },\n   *   { city: 'New York', _aggregateKey: 'avg', _aggregateValue: 3.883 },\n   *   { city: 'Chicago', _aggregateKey: 'min', _aggregateValue: 2.56 },\n   *   { city: 'Chicago', _aggregateKey: 'max', _aggregateValue: 3.98 },\n   *   { city: 'Chicago', _aggregateKey: 'avg', _aggregateValue: 3.387 }\n   * ]\n   */",
    "meta": {
      "range": [
        11839,
        11931
      ],
      "filename": "SourceMap.js",
      "lineno": 324,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011240",
        "name": "SourceMap#reduceSeparate",
        "type": "MethodDefinition",
        "paramnames": [
          "reduceFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Reduces, but puts each aggregate value on a separate record.\n\n**This is particularly useful for charting vega, as series must be on separate objects.**\n\nEach object then made per group leaf collection, preserving the groups used to make it.\n\nThe object generated by the function is then merged.\n\n```\nutils.vega.svg((vl) => vl.markLine()\n    .data(\n        utils.group.by(weather, 'city')\n            .reduceSeparate((group) => ({\n                min: utils.agg.min(group, 'precip'),\n                max: utils.agg.max(group, 'precip'),\n                avg: utils.agg.avgMean(group, 'precip')\n            }))\n    )\n    .width(200)\n    .encode(\n        vl.x().fieldN('city'),\n        vl.y().fieldQ('_aggregateValue'),\n        vl.color().fieldN('_aggregateKey')\n));\n```\n\n![Screenshot of reduce with chart](img/aggregateReduceSeparateChart.png)",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(collection, props) => {Object} - Function that reduces the collection to an object",
        "name": "reduceFn"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the collection of records in the group",
        "name": "reduceFn.collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the properties and values the collection was grouped by",
        "name": "reduceFn.collectionProps"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "see": [
      "{@link SourceMap#reduce|reduce()} - for a compact object with multiple aggregate values, useful for tables"
    ],
    "examples": [
      "utils.group.by(weather, 'city')\n  .reduceSeparate((group) => ({\n    min: utils.agg.min(group, 'precip'),\n    max: utils.agg.max(group, 'precip'),\n    avg: utils.agg.avgMean(group, 'precip')\n  }));\n\n//-- results\n[\n  { city: 'Seattle', _aggregateKey: 'min', _aggregateValue: 0.87 },\n  { city: 'Seattle', _aggregateKey: 'max', _aggregateValue: 5.31 },\n  { city: 'Seattle', _aggregateKey: 'avg', _aggregateValue: 2.953 },\n  { city: 'New York', _aggregateKey: 'min', _aggregateValue: 3.58 },\n  { city: 'New York', _aggregateKey: 'max', _aggregateValue: 4.13 },\n  { city: 'New York', _aggregateKey: 'avg', _aggregateValue: 3.883 },\n  { city: 'Chicago', _aggregateKey: 'min', _aggregateValue: 2.56 },\n  { city: 'Chicago', _aggregateKey: 'max', _aggregateValue: 3.98 },\n  { city: 'Chicago', _aggregateKey: 'avg', _aggregateValue: 3.387 }\n]"
    ],
    "name": "reduceSeparate",
    "longname": "SourceMap#reduceSeparate",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Reduces, but puts each aggregate value on a separate record.\n   * \n   * This is particularly useful for charting vega, as series must be on separate objects.\n   * \n   * ```\n   * utils.vega.svg((vl) => vl.markLine()\n   *     .data(\n   *         utils.group.by(weather, 'city')\n   *             .reduceSeparate((group) => ({\n   *                 min: utils.agg.min(group, 'precip'),\n   *                 max: utils.agg.max(group, 'precip'),\n   *                 avg: utils.agg.avgMean(group, 'precip')\n   *             }))\n   *     )\n   *     .width(200)\n   *     .encode(\n   *         vl.x().fieldN('city'),\n   *         vl.y().fieldQ('_aggregateValue'),\n   *         vl.color().fieldN('_aggregateKey')\n   * ));\n   * ```\n   * \n   * ![Screenshot of reduce with chart](img/aggregateReduceSeparateChart.png)\n   * \n   * @param {SourceMap} sourceMap -\n   * @param {Function} reduceFn - (collection, props) => {Object} - Function that reduces the collection to an object\n   * @param {Array} reduceFn.collection - the collection of records in the group\n   * @param {Object} reduceFn.collectionProps - the properties and values the collection was grouped by\n   * @param {Object} currentObj - values to inject into the results\n   * @returns {Array}\n   * @see {@link SourceMap#reduce|reduceSeparate()} - to call this method from an instance\n   * @private\n   * @example\n   * utils.group.by(weather, 'city')\n   *   .reduceSeparate((group) => ({\n   *     min: utils.agg.min(group, 'precip'),\n   *     max: utils.agg.max(group, 'precip'),\n   *     avg: utils.agg.avgMean(group, 'precip')\n   *   }));\n   * \n   * //-- results\n   * [\n   *   { city: 'Seattle', _aggregateKey: 'min', _aggregateValue: 0.87 },\n   *   { city: 'Seattle', _aggregateKey: 'max', _aggregateValue: 5.31 },\n   *   { city: 'Seattle', _aggregateKey: 'avg', _aggregateValue: 2.953 },\n   *   { city: 'New York', _aggregateKey: 'min', _aggregateValue: 3.58 },\n   *   { city: 'New York', _aggregateKey: 'max', _aggregateValue: 4.13 },\n   *   { city: 'New York', _aggregateKey: 'avg', _aggregateValue: 3.883 },\n   *   { city: 'Chicago', _aggregateKey: 'min', _aggregateValue: 2.56 },\n   *   { city: 'Chicago', _aggregateKey: 'max', _aggregateValue: 3.98 },\n   *   { city: 'Chicago', _aggregateKey: 'avg', _aggregateValue: 3.387 }\n   * ]\n   */",
    "meta": {
      "range": [
        14237,
        15104
      ],
      "filename": "SourceMap.js",
      "lineno": 382,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011253",
        "name": "reduceGroupSeparate",
        "type": "ClassProperty"
      }
    },
    "description": "Reduces, but puts each aggregate value on a separate record.\n\nThis is particularly useful for charting vega, as series must be on separate objects.\n\n```\nutils.vega.svg((vl) => vl.markLine()\n    .data(\n        utils.group.by(weather, 'city')\n            .reduceSeparate((group) => ({\n                min: utils.agg.min(group, 'precip'),\n                max: utils.agg.max(group, 'precip'),\n                avg: utils.agg.avgMean(group, 'precip')\n            }))\n    )\n    .width(200)\n    .encode(\n        vl.x().fieldN('city'),\n        vl.y().fieldQ('_aggregateValue'),\n        vl.color().fieldN('_aggregateKey')\n));\n```\n\n![Screenshot of reduce with chart](img/aggregateReduceSeparateChart.png)",
    "params": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "-",
        "name": "sourceMap"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(collection, props) => {Object} - Function that reduces the collection to an object",
        "name": "reduceFn"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the collection of records in the group",
        "name": "reduceFn.collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the properties and values the collection was grouped by",
        "name": "reduceFn.collectionProps"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "values to inject into the results",
        "name": "currentObj"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        }
      }
    ],
    "see": [
      "{@link SourceMap#reduce|reduceSeparate()} - to call this method from an instance"
    ],
    "access": "private",
    "examples": [
      "utils.group.by(weather, 'city')\n  .reduceSeparate((group) => ({\n    min: utils.agg.min(group, 'precip'),\n    max: utils.agg.max(group, 'precip'),\n    avg: utils.agg.avgMean(group, 'precip')\n  }));\n\n//-- results\n[\n  { city: 'Seattle', _aggregateKey: 'min', _aggregateValue: 0.87 },\n  { city: 'Seattle', _aggregateKey: 'max', _aggregateValue: 5.31 },\n  { city: 'Seattle', _aggregateKey: 'avg', _aggregateValue: 2.953 },\n  { city: 'New York', _aggregateKey: 'min', _aggregateValue: 3.58 },\n  { city: 'New York', _aggregateKey: 'max', _aggregateValue: 4.13 },\n  { city: 'New York', _aggregateKey: 'avg', _aggregateValue: 3.883 },\n  { city: 'Chicago', _aggregateKey: 'min', _aggregateValue: 2.56 },\n  { city: 'Chicago', _aggregateKey: 'max', _aggregateValue: 3.98 },\n  { city: 'Chicago', _aggregateKey: 'avg', _aggregateValue: 3.387 }\n]"
    ],
    "name": "reduceGroupSeparate",
    "longname": "SourceMap#reduceGroupSeparate",
    "kind": "member",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14404,
        14624
      ],
      "filename": "SourceMap.js",
      "lineno": 385,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011267",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14855,
        15014
      ],
      "filename": "SourceMap.js",
      "lineno": 397,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011310",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14980,
        14993
      ],
      "filename": "SourceMap.js",
      "lineno": 398,
      "columnno": 67,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011328",
        "name": "_aggregateKey",
        "type": "Identifier",
        "value": "_aggregateKey"
      }
    },
    "undocumented": true,
    "name": "_aggregateKey",
    "longname": "_aggregateKey",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14995,
        15010
      ],
      "filename": "SourceMap.js",
      "lineno": 398,
      "columnno": 82,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011330",
        "name": "_aggregateValue",
        "type": "Identifier",
        "value": "_aggregateValue"
      }
    },
    "undocumented": true,
    "name": "_aggregateValue",
    "longname": "_aggregateValue",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n   * Convenience function for reduceGroup.\n   * \n   * Instead of providing a function to reduce, provide an object\n   * \n   * @param {SourceMap} sourceMap - source to be reduced by group\n   * @param {Object} obj - each property as {(collection) => result}\n   * @returns {Array} - Array of objects merged with the parent group attributes and reduceFn result\n   * @see SourceMap.reduceGroup\n   * @deprecated - not as much of a convenience, and causes confusion\n   * @private\n   * @example\n   * collection = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n   * ];\n   * \n   * //-- provides\n   * [\n   *   { city: 'Seattle', month: 'Aug', precipitation: 0.87, numReports: 1 },\n   *   { city: 'Seattle', month: 'Apr', precipitation: 2.68, numReports: 1 },\n   *   { city: 'New York', month: 'Apr', precipitation: 3.94, numReports: 1 },\n   *   { city: 'New York', month: 'Aug', precipitation: 4.13, numReports: 1 }\n   * ]\n   */",
    "meta": {
      "range": [
        16242,
        16335
      ],
      "filename": "SourceMap.js",
      "lineno": 430,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011334",
        "name": "SourceMap#objectReduce",
        "type": "MethodDefinition",
        "paramnames": [
          "reductionObject"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Convenience function for reduceGroup.\n\nInstead of providing a function to reduce, provide an object",
    "params": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "source to be reduced by group",
        "name": "sourceMap"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "each property as {(collection) => result}",
        "name": "obj"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of objects merged with the parent group attributes and reduceFn result"
      }
    ],
    "see": [
      "SourceMap.reduceGroup"
    ],
    "deprecated": "- not as much of a convenience, and causes confusion",
    "access": "private",
    "examples": [
      "collection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n];\n\n//-- provides\n[\n  { city: 'Seattle', month: 'Aug', precipitation: 0.87, numReports: 1 },\n  { city: 'Seattle', month: 'Apr', precipitation: 2.68, numReports: 1 },\n  { city: 'New York', month: 'Apr', precipitation: 3.94, numReports: 1 },\n  { city: 'New York', month: 'Aug', precipitation: 4.13, numReports: 1 }\n]"
    ],
    "name": "objectReduce",
    "longname": "SourceMap#objectReduce",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Convenience function for reduceGroup.\n   * \n   * Instead of providing a function to reduce, provide an object\n   * \n   * @param {SourceMap} sourceMap - source to be reduced by group\n   * @param {Object} obj - each property as {(collection) => result}\n   * @returns {Array} - Array of objects merged with the parent group attributes and reduceFn result\n   * @see SourceMap.reduceGroup\n   * @deprecated - not as much of a convenience, and causes confusion\n   * @private\n   * @example\n   * collection = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n   * ];\n   * \n   * //-- provides\n   * [\n   *   { city: 'Seattle', month: 'Aug', precipitation: 0.87, numReports: 1 },\n   *   { city: 'Seattle', month: 'Apr', precipitation: 2.68, numReports: 1 },\n   *   { city: 'New York', month: 'Apr', precipitation: 3.94, numReports: 1 },\n   *   { city: 'New York', month: 'Aug', precipitation: 4.13, numReports: 1 }\n   * ]\n   */",
    "meta": {
      "range": [
        17473,
        18063
      ],
      "filename": "SourceMap.js",
      "lineno": 461,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011346",
        "name": "SourceMap.objectReduce",
        "type": "MethodDefinition",
        "paramnames": [
          "sourceMap",
          "obj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Convenience function for reduceGroup.\n\nInstead of providing a function to reduce, provide an object",
    "params": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "source to be reduced by group",
        "name": "sourceMap"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "each property as {(collection) => result}",
        "name": "obj"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "- Array of objects merged with the parent group attributes and reduceFn result"
      }
    ],
    "see": [
      "SourceMap.reduceGroup"
    ],
    "deprecated": "- not as much of a convenience, and causes confusion",
    "access": "private",
    "examples": [
      "collection = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 }\n];\n\n//-- provides\n[\n  { city: 'Seattle', month: 'Aug', precipitation: 0.87, numReports: 1 },\n  { city: 'Seattle', month: 'Apr', precipitation: 2.68, numReports: 1 },\n  { city: 'New York', month: 'Apr', precipitation: 3.94, numReports: 1 },\n  { city: 'New York', month: 'Aug', precipitation: 4.13, numReports: 1 }\n]"
    ],
    "name": "objectReduce",
    "longname": "SourceMap.objectReduce",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17637,
        17876
      ],
      "filename": "SourceMap.js",
      "lineno": 465,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011363",
        "name": "entities",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "entities",
    "longname": "<anonymous>~entities",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17893,
        18002
      ],
      "filename": "SourceMap.js",
      "lineno": 473,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011389",
        "name": "reduceFn",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "reduceFn",
    "longname": "<anonymous>~reduceFn",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Maps a collection within the sourceMap by a function.\n   * \n   * Note that this only maps the leaf collection of values, not the intermediary levels.\n   * \n   * This can be useful from everything from:\n   * * sorting the leaf collections,\n   * * filtering the results to only those that meet certain criteria,\n   * * to an alternative form of reducing the values,\n   * * or even combinations of the three or more:\n   * \n   * @param {Function} mapFn - {(array) => any} Function to apply to the leaf collections (arrays)\n   * @param {Array} mapFn.collection - the collection of records in the group\n   * @param {Object} mapFn.collectionProps - the properties and values the collection was grouped by\n   * @returns {SourceMap} - New SourceMap with the leaf collections updated to the results from mapFn\n   * \n   * @example\n   * const data = [\n   * weather = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, dateTime: new Date(2020, 7, 1)  , year: 2020},\n   *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31, dateTime: new Date(2020, 11, 1) , year: 2020},\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68, dateTime: new Date(2021, 3, 1)  , year: 2021},\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13, dateTime: new Date(2020, 7, 1)  , year: 2020},\n   *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58, dateTime: new Date(2020, 11, 1) , year: 2020},\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94, dateTime: new Date(2021, 3, 1)  , year: 2021},\n   *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98, dateTime: new Date(2020, 7, 1)  , year: 2020},\n   *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56, dateTime: new Date(2020, 11, 1) , year: 2020},\n   *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, dateTime: new Date(2021, 3, 1)  , year: 2021}\n   * ];\n   * \n   * utils.group.by(weather, 'city')\n   *   .map(collection => collection.length);\n   * \n   * // SourceMap(3) [Map] {\n   * //   'Seattle' => 3,\n   * //   'New York' => 3,\n   * //   'Chicago' => 3,\n   * //   source: 'city'\n   * // }\n   * \n   * utils.group.by(weather, 'city')\n   *     .map(collection => collection.filter(r => r.year === 2020))\n   *     .map(collection => collection.length);\n   * \n   * // SourceMap(3) [Map] {\n   * //   'Seattle' => 2,\n   * //   'New York' => 2,\n   * //   'Chicago' => 2,\n   * //   source: 'city'\n   * // }\n   */",
    "meta": {
      "range": [
        20476,
        20541
      ],
      "filename": "SourceMap.js",
      "lineno": 531,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011415",
        "name": "SourceMap#map",
        "type": "MethodDefinition",
        "paramnames": [
          "mapFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Maps a collection within the sourceMap by a function.\n\nNote that this only maps the leaf collection of values, not the intermediary levels.\n\nThis can be useful from everything from:\n* sorting the leaf collections,\n* filtering the results to only those that meet certain criteria,\n* to an alternative form of reducing the values,\n* or even combinations of the three or more:",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "{(array) => any} Function to apply to the leaf collections (arrays)",
        "name": "mapFn"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "the collection of records in the group",
        "name": "mapFn.collection"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the properties and values the collection was grouped by",
        "name": "mapFn.collectionProps"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "SourceMap"
          ]
        },
        "description": "- New SourceMap with the leaf collections updated to the results from mapFn"
      }
    ],
    "examples": [
      "const data = [\nweather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68, dateTime: new Date(2021, 3, 1)  , year: 2021},\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94, dateTime: new Date(2021, 3, 1)  , year: 2021},\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98, dateTime: new Date(2020, 7, 1)  , year: 2020},\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56, dateTime: new Date(2020, 11, 1) , year: 2020},\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62, dateTime: new Date(2021, 3, 1)  , year: 2021}\n];\n\nutils.group.by(weather, 'city')\n  .map(collection => collection.length);\n\n// SourceMap(3) [Map] {\n//   'Seattle' => 3,\n//   'New York' => 3,\n//   'Chicago' => 3,\n//   source: 'city'\n// }\n\nutils.group.by(weather, 'city')\n    .map(collection => collection.filter(r => r.year === 2020))\n    .map(collection => collection.length);\n\n// SourceMap(3) [Map] {\n//   'Seattle' => 2,\n//   'New York' => 2,\n//   'Chicago' => 2,\n//   source: 'city'\n// }"
    ],
    "name": "map",
    "longname": "SourceMap#map",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "instance"
  },
  {
    "comment": "/**\n   * Implementatin for map.\n   * @private\n   */",
    "meta": {
      "range": [
        20599,
        21076
      ],
      "filename": "SourceMap.js",
      "lineno": 539,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011427",
        "name": "SourceMap.mapCollection",
        "type": "MethodDefinition",
        "paramnames": [
          "sourceMap",
          "mapFn",
          "currentObj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Implementatin for map.",
    "access": "private",
    "name": "mapCollection",
    "longname": "SourceMap.mapCollection",
    "kind": "function",
    "memberof": "SourceMap",
    "scope": "static",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20667,
        20691
      ],
      "filename": "SourceMap.js",
      "lineno": 540,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011437",
        "name": "result",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "result",
    "longname": "<anonymous>~result",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        20697,
        20729
      ],
      "filename": "SourceMap.js",
      "lineno": 541,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011442",
        "name": "result.source",
        "type": "MemberExpression",
        "funcscope": "<anonymous>",
        "value": "sourceMap.source",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "source",
    "longname": "<anonymous>~result.source",
    "kind": "member",
    "memberof": "<anonymous>~result",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21080,
        21106
      ],
      "filename": "SourceMap.js",
      "lineno": 557,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011496",
        "name": "module.exports",
        "type": "Identifier",
        "value": "SourceMap",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static"
  },
  {
    "comment": "/**\n * JavaScript side function to use when embedding / creating svgs client side.\n * \n * @module svg/utilityFunctions\n * @exports svg/utilityFunctions\n */",
    "meta": {
      "filename": "svg_utilityFunctions.js",
      "lineno": 3,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "JavaScript side function to use when embedding / creating svgs client side.",
    "kind": "module",
    "name": "svg/utilityFunctions",
    "alias": "svg/utilityFunctions",
    "longname": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        178,
        197
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 9,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011504",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:svg/utilityFunctions",
    "longname": "module:svg/utilityFunctions",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        205,
        230
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 10,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011510",
        "name": "SvgUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "SvgUtils",
    "longname": "module:svg/utilityFunctions~SvgUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions",
    "params": []
  },
  {
    "comment": "/**\n * @typedef {Object} AnimationFrame\n * @property {Function} requestAnimationFrame - one of the different\n *  [requestAnimationFrame implementations](https://caniuse.com/requestanimationframe)\n *     ( window.requestAnimationFrame\n *       || window.mozRequestAnimationFrame\n *       || window.webkitRequestAnimationFrame\n *       || window.msRequestAnimationFrame )\n * \n * @property {Function} requestAnimationFrame - one of the different\n *  [cancelAnimationFrame implementations](https://caniuse.com/mdn-api_window_cancelanimationframe)\n *     ( window.cancelAnimationFrame || window.mozCancelAnimationFrame )\n * \n * @property {Function} stopOtherAnimations - () => void - stops animations currently running, but still allows this one to run.\n * \n * @property {Function} checkAnimationsAllowed - () => Boolean, true - unless all animations have been stopped\n * \n * @property {Function} nextAnimationFrame - (function) => void - runs function on next animation frame\n * \n * @property {Function} stopAllAnimations - () => void, stops all animations and disallows future animations.\n * \n * @property {Function} allowAnimations - () => void, allows future animations\n */",
    "meta": {
      "filename": "svg_utilityFunctions.js",
      "lineno": 12,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "kind": "typedef",
    "name": "AnimationFrame",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "one of the different\n [requestAnimationFrame implementations](https://caniuse.com/requestanimationframe)\n    ( window.requestAnimationFrame\n      || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame\n      || window.msRequestAnimationFrame )",
        "name": "requestAnimationFrame"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "one of the different\n [cancelAnimationFrame implementations](https://caniuse.com/mdn-api_window_cancelanimationframe)\n    ( window.cancelAnimationFrame || window.mozCancelAnimationFrame )",
        "name": "requestAnimationFrame"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "() => void - stops animations currently running, but still allows this one to run.",
        "name": "stopOtherAnimations"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "() => Boolean, true - unless all animations have been stopped",
        "name": "checkAnimationsAllowed"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(function) => void - runs function on next animation frame",
        "name": "nextAnimationFrame"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "() => void, stops all animations and disallows future animations.",
        "name": "stopAllAnimations"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "() => void, allows future animations",
        "name": "allowAnimations"
      }
    ],
    "longname": "module:svg/utilityFunctions~AnimationFrame",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "/**\n * JavaScript to allow for simpler animations in browser\n * \n * Example:\n * \n * ```\n * utils.svg.embed({\n *     width: 200, height: 200, debug: false,\n *     \n *     //-- node functions to make available in javascript\n *     utilityFunctions: { ...utils.svg.utilityFunctions },\n *     \n *     //-- executed in javascript\n *     onReady: ({el, SVG, width, height, utilityFunctions }) => {\n *         const center = { x: width / 2, y: height / 2 };\n *         const period = 6000;\n *         const halfPeriod = period / 2;\n *         const bounceHeight = 100;\n *         \n *         const box = el.rect(100, 100)\n *             .center(center.x, center.y)\n *         \n *         const anim = utilityFunctions.animationFrameCalls();\n *         \n *         anim.stopOtherAnimations();\n *         \n *         const bounceBox = function bounceBox(timeElapsed) {\n *             const now = new Date().getTime() % period;\n *             const phase = (now / (period / 2)) * Math.PI;\n *             box.y(center.y + Math.sin(phase) * bounceHeight);\n *             \n *             if (anim.checkAnimationsAllowed()) {\n *                 anim.nextAnimationFrame(bounceBox);\n *             }\n *         }\n *         bounceBox(0);\n *     }\n * });\n * ```\n * \n * * requestAnimationFrame - one of the different [requestAnimationFrame implementations](https://caniuse.com/requestanimationframe)\n *     * window.requestAnimationFrame\n *       || window.mozRequestAnimationFrame\n *       || window.webkitRequestAnimationFrame\n *       || window.msRequestAnimationFrame\n * \n * * requestAnimationFrame - one of the different [cancelAnimationFrame implementations](https://caniuse.com/mdn-api_window_cancelanimationframe)\n *     * window.cancelAnimationFrame\n *       || window.mozCancelAnimationFrame\n * \n * * {Function} stopOtherAnimations - () => void - stops animations currently running, but still allows this one to run.\n * \n * * {Function} checkAnimationsAllowed - () => Boolean, true - unless all animations have been stopped\n * \n * * {Function} nextAnimationFrame - (function) => void - runs function on next animation frame\n * \n * * {Function} stopAllAnimations - () => void, stops all animations and disallows future animations.\n * \n * * {Function} allowAnimations - () => void, allows future animations\n *  \n * @returns {AnimationFrame} - { requestAnimationFame, cancelAnimationFrame, stopOtherAnimations,\n *  nextAnimationFrame, checkStopAnimation, stopAllAnimations, allowAnimations }\n */",
    "meta": {
      "range": [
        3930,
        5404
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 99,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011516",
        "name": "module.exports.animationFrameCalls",
        "type": "FunctionExpression",
        "value": "animationFrameCalls",
        "paramnames": []
      },
      "vars": {
        "requestAnimationFrame": "module:svg/utilityFunctions.animationFrameCalls~requestAnimationFrame",
        "cancelAnimationFrame": "module:svg/utilityFunctions.animationFrameCalls~cancelAnimationFrame",
        "stopOtherAnimations": "module:svg/utilityFunctions.animationFrameCalls~stopOtherAnimations",
        "": null,
        "resetAllAnimations": "module:svg/utilityFunctions.animationFrameCalls~resetAllAnimations",
        "allowAnimations": "module:svg/utilityFunctions.animationFrameCalls~allowAnimations",
        "nextAnimationFrame": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame",
        "checkAnimationsAllowed": "module:svg/utilityFunctions.animationFrameCalls~checkAnimationsAllowed"
      }
    },
    "description": "JavaScript to allow for simpler animations in browser\n\nExample:\n\n```\nutils.svg.embed({\n    width: 200, height: 200, debug: false,\n    \n    //-- node functions to make available in javascript\n    utilityFunctions: { ...utils.svg.utilityFunctions },\n    \n    //-- executed in javascript\n    onReady: ({el, SVG, width, height, utilityFunctions }) => {\n        const center = { x: width / 2, y: height / 2 };\n        const period = 6000;\n        const halfPeriod = period / 2;\n        const bounceHeight = 100;\n        \n        const box = el.rect(100, 100)\n            .center(center.x, center.y)\n        \n        const anim = utilityFunctions.animationFrameCalls();\n        \n        anim.stopOtherAnimations();\n        \n        const bounceBox = function bounceBox(timeElapsed) {\n            const now = new Date().getTime() % period;\n            const phase = (now / (period / 2)) * Math.PI;\n            box.y(center.y + Math.sin(phase) * bounceHeight);\n            \n            if (anim.checkAnimationsAllowed()) {\n                anim.nextAnimationFrame(bounceBox);\n            }\n        }\n        bounceBox(0);\n    }\n});\n```\n\n* requestAnimationFrame - one of the different [requestAnimationFrame implementations](https://caniuse.com/requestanimationframe)\n    * window.requestAnimationFrame\n      || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame\n      || window.msRequestAnimationFrame\n\n* requestAnimationFrame - one of the different [cancelAnimationFrame implementations](https://caniuse.com/mdn-api_window_cancelanimationframe)\n    * window.cancelAnimationFrame\n      || window.mozCancelAnimationFrame\n\n* {Function} stopOtherAnimations - () => void - stops animations currently running, but still allows this one to run.\n\n* {Function} checkAnimationsAllowed - () => Boolean, true - unless all animations have been stopped\n\n* {Function} nextAnimationFrame - (function) => void - runs function on next animation frame\n\n* {Function} stopAllAnimations - () => void, stops all animations and disallows future animations.\n\n* {Function} allowAnimations - () => void, allows future animations",
    "returns": [
      {
        "type": {
          "names": [
            "AnimationFrame"
          ]
        },
        "description": "- { requestAnimationFame, cancelAnimationFrame, stopOtherAnimations,\n nextAnimationFrame, checkStopAnimation, stopAllAnimations, allowAnimations }"
      }
    ],
    "name": "animationFrameCalls",
    "longname": "module:svg/utilityFunctions.animationFrameCalls",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4008,
        4145
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 100,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011526",
        "name": "requestAnimationFrame",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "requestAnimationFrame",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~requestAnimationFrame",
    "kind": "constant",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4158,
        4248
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 104,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011540",
        "name": "cancelAnimationFrame",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cancelAnimationFrame",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~cancelAnimationFrame",
    "kind": "constant",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4261,
        4405
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 107,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011550",
        "name": "stopOtherAnimations",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "window.animation": "module:svg/utilityFunctions~window.animation"
      }
    },
    "undocumented": true,
    "name": "stopOtherAnimations",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~stopOtherAnimations",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4371,
        4394
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 110,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011566",
        "name": "window.animation",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "animation",
    "longname": "module:svg/utilityFunctions~window.animation",
    "kind": "member",
    "scope": "static",
    "memberof": "module:svg/utilityFunctions~window"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4416,
        4560
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 114,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011572",
        "name": "resetAllAnimations",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "window.stopAnimation": "module:svg/utilityFunctions~window.stopAnimation",
        "": null
      }
    },
    "undocumented": true,
    "name": "resetAllAnimations",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~resetAllAnimations",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4449,
        4476
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 115,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011577",
        "name": "window.stopAnimation",
        "type": "Literal",
        "value": true,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "stopAnimation",
    "longname": "module:svg/utilityFunctions~window.stopAnimation",
    "kind": "member",
    "scope": "static",
    "memberof": "module:svg/utilityFunctions~window"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4514,
        4542
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 117,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011590",
        "name": "window.stopAnimation",
        "type": "Literal",
        "value": false,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "stopAnimation",
    "longname": "module:svg/utilityFunctions~window.stopAnimation",
    "kind": "member",
    "scope": "static",
    "memberof": "module:svg/utilityFunctions~window"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4571,
        4654
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 121,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011597",
        "name": "allowAnimations",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "window.stopAnimation": "module:svg/utilityFunctions~window.stopAnimation"
      }
    },
    "undocumented": true,
    "name": "allowAnimations",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~allowAnimations",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4617,
        4649
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 122,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011605",
        "name": "window.stopAnimation",
        "type": "Identifier",
        "value": "isAllowed",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "stopAnimation",
    "longname": "module:svg/utilityFunctions~window.stopAnimation",
    "kind": "member",
    "scope": "static",
    "memberof": "module:svg/utilityFunctions~window"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4667,
        5037
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 125,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011611",
        "name": "nextAnimationFrame",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "requestFn": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame~requestFn",
        "": null,
        "animationId": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame~animationId",
        "window.animation": "module:svg/utilityFunctions~window.animation"
      }
    },
    "undocumented": true,
    "name": "nextAnimationFrame",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4712,
        4938
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 126,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011618",
        "name": "requestFn",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "requestFn",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame~requestFn",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4950,
        4996
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 133,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011651",
        "name": "animationId",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "animationId",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame~animationId",
    "kind": "constant",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls~nextAnimationFrame",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5002,
        5032
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 134,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011657",
        "name": "window.animation",
        "type": "Identifier",
        "value": "animationId",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "animation",
    "longname": "module:svg/utilityFunctions~window.animation",
    "kind": "member",
    "scope": "static",
    "memberof": "module:svg/utilityFunctions~window"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5050,
        5208
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 137,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011663",
        "name": "checkAnimationsAllowed",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "checkAnimationsAllowed",
    "longname": "module:svg/utilityFunctions.animationFrameCalls~checkAnimationsAllowed",
    "kind": "function",
    "memberof": "module:svg/utilityFunctions.animationFrameCalls",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5228,
        5249
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 146,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011684",
        "name": "requestAnimationFrame",
        "type": "Identifier",
        "value": "requestAnimationFrame"
      }
    },
    "undocumented": true,
    "name": "requestAnimationFrame",
    "longname": "module:svg/utilityFunctions~requestAnimationFrame",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5255,
        5275
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 147,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011686",
        "name": "cancelAnimationFrame",
        "type": "Identifier",
        "value": "cancelAnimationFrame"
      }
    },
    "undocumented": true,
    "name": "cancelAnimationFrame",
    "longname": "module:svg/utilityFunctions~cancelAnimationFrame",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5281,
        5300
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 148,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011688",
        "name": "stopOtherAnimations",
        "type": "Identifier",
        "value": "stopOtherAnimations"
      }
    },
    "undocumented": true,
    "name": "stopOtherAnimations",
    "longname": "module:svg/utilityFunctions~stopOtherAnimations",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5306,
        5324
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 149,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011690",
        "name": "nextAnimationFrame",
        "type": "Identifier",
        "value": "nextAnimationFrame"
      }
    },
    "undocumented": true,
    "name": "nextAnimationFrame",
    "longname": "module:svg/utilityFunctions~nextAnimationFrame",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5330,
        5352
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 150,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011692",
        "name": "checkAnimationsAllowed",
        "type": "Identifier",
        "value": "checkAnimationsAllowed"
      }
    },
    "undocumented": true,
    "name": "checkAnimationsAllowed",
    "longname": "module:svg/utilityFunctions~checkAnimationsAllowed",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5358,
        5376
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 151,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011694",
        "name": "resetAllAnimations",
        "type": "Identifier",
        "value": "resetAllAnimations"
      }
    },
    "undocumented": true,
    "name": "resetAllAnimations",
    "longname": "module:svg/utilityFunctions~resetAllAnimations",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5382,
        5397
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 152,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011696",
        "name": "allowAnimations",
        "type": "Identifier",
        "value": "allowAnimations"
      }
    },
    "undocumented": true,
    "name": "allowAnimations",
    "longname": "module:svg/utilityFunctions~allowAnimations",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg/utilityFunctions"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        5407,
        5468
      ],
      "filename": "svg_utilityFunctions.js",
      "lineno": 156,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011699",
        "name": "module.exports.animation",
        "type": "MemberExpression",
        "value": "module.exports.animationFrameCalls",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "animation",
    "longname": "module:svg/utilityFunctions.animation",
    "kind": "member",
    "memberof": "module:svg/utilityFunctions",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10,
        25
      ],
      "filename": "svg.js",
      "lineno": 2,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011715",
        "name": "createSVGWindow",
        "type": "Identifier",
        "value": "createSVGWindow"
      }
    },
    "undocumented": true,
    "name": "createSVGWindow",
    "longname": "createSVGWindow",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        56,
        91
      ],
      "filename": "svg.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011721",
        "name": "svgJS",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgJS",
    "longname": "svgJS",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        100,
        155
      ],
      "filename": "svg.js",
      "lineno": 7,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011727",
        "name": "SvgUtilityFunctions",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "SvgUtilityFunctions",
    "longname": "SvgUtilityFunctions",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        164,
        191
      ],
      "filename": "svg.js",
      "lineno": 9,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011733",
        "name": "IJSUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "IJSUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Library for generating SVG programmatically and consistently within Jupyter Lab.\n * \n * ![Screenshot of multiple rectangles expanding](img/svgRender_2.svg)\n * \n * Note that there are a few libraries that provide great SVG programmatic support:\n * \n * * [SVG.js](https://www.npmjs.com/package/@svgdotjs/svg.js)\n * * [Snap.svg](https://www.npmjs.com/package/snapsvg)\n * * [D3.js](https://d3js.org/)\n * * [Processing.org - p5.js](https://p5js.org/)\n * * and a number of others.\n * \n * Unfortunately, most of them require a DOM, and must be run client side -\n * meaning that the results are lost on export.\n * \n * The utility here is a wrapper for [SVG.js](https://svgjs.dev/),\n * so SVGs can be rendered either Server-Side (within the Notebook)\n * or Client Side (within the browser rendering the notebook - but lost on export)\n * \n * **(NOTE: embed is executed client side simply through {@link module:ijs.htmlScript|ijs.htmlScript})**\n * \n * ![Screenshot of dark animation](img/svgAnimation2Dark.gif)\n * ![Screenshot of light animation](img/svgAnimation2Light.gif)\n * \n * # Note on Transforms\n * \n * If you need to combine multiple transforms, we would recommend you use matrices instead, like the following:\n * \n * ```\n * utils.svg.render({ width: 400, height: 200,\n *     onReady: ({el, width, height, SVG }) => {\n *         const yellowTransition = new SVG.Color('#FF0000').to('#00FF00');\n *         for (let i = 0; i <=5; i++){\n *             el.rect(100, 100)\n *                 .fill(yellowTransition.at(i * 0.2).toHex())\n *                 .transform(\n *                     new SVG.Matrix()\n *                         .translate(i * 20, 0)\n *                         .rotate(45)\n *                         .translate(100, 0)\n *                 );\n *         }\n *     }\n * })\n * ```\n * ![Screenshot of multiple transforms](img/svgRender_3.svg)\n * \n * # Alternatives\n * \n * Since many of the libraries require a `window` or `document` instance,\n * you can always do something similar to the following:\n * \n * * create a new `jsdom` window and document \n * * store the window and document to the `global` or `globalThis` scope\n * * create an instance of an [svg element](https://developer.mozilla.org/en-US/docs/Web/SVG)\n * * THEN import the libraries (now window and document are available)\n * * ... manipulate the svg with the library\n * * FINALLY - capture the svg.outerHTML, and render to $$.svg() / mimetype\n * \n * The goal with this library is to provide a simple alternative for common scenarios\n * \n * # P5\n * \n * Note that other great SVG Libraries are always available:\n * \n * * [P5.js](https://p5js.org/)\n * * [D3](https://d3js.org/)\n * * [Snap.svg](http://snapsvg.io/)\n * \n * The simplest is to run them with {@link module:ijs.htmlScript|ijs.htmlScript} and run in the browser,\n * and pull requests are always welcome.\n * \n * Here is an example running P5.js, without even using the svg module:\n * \n * [See here for more on instance mode](https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace)\n * \n * ```\n * utils.ijs.htmlScript({\n *     scripts: [\n *         'https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js'\n *     ],\n *     debug: true,\n *     onReady: ({rootEl}) => {\n *         const p5_Setup = (p) => {\n *             let x = 100;\n *             let y = 100;\n *             \n *             p.setup = function() {\n *                 p.createCanvas(700, 410);\n *             }\n *             \n *             p.draw = function() {\n *                 p.background(0);\n *                 p.fill(255);\n *                 p.rect(x,y,50,50);\n *             }\n *         };\n *         const myP5 = new p5(p5_Setup, rootEl);\n *     }\n * })\n * ```\n * ![Screenshot with p5](img/svgP5Example.png)\n * \n * @module svg\n * @exports svg\n */",
    "meta": {
      "filename": "svg.js",
      "lineno": 11,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Library for generating SVG programmatically and consistently within Jupyter Lab.\n\n![Screenshot of multiple rectangles expanding](img/svgRender_2.svg)\n\nNote that there are a few libraries that provide great SVG programmatic support:\n\n* [SVG.js](https://www.npmjs.com/package/@svgdotjs/svg.js)\n* [Snap.svg](https://www.npmjs.com/package/snapsvg)\n* [D3.js](https://d3js.org/)\n* [Processing.org - p5.js](https://p5js.org/)\n* and a number of others.\n\nUnfortunately, most of them require a DOM, and must be run client side -\nmeaning that the results are lost on export.\n\nThe utility here is a wrapper for [SVG.js](https://svgjs.dev/),\nso SVGs can be rendered either Server-Side (within the Notebook)\nor Client Side (within the browser rendering the notebook - but lost on export)\n\n**(NOTE: embed is executed client side simply through {@link module:ijs.htmlScript|ijs.htmlScript})**\n\n![Screenshot of dark animation](img/svgAnimation2Dark.gif)\n![Screenshot of light animation](img/svgAnimation2Light.gif)\n\n# Note on Transforms\n\nIf you need to combine multiple transforms, we would recommend you use matrices instead, like the following:\n\n```\nutils.svg.render({ width: 400, height: 200,\n    onReady: ({el, width, height, SVG }) => {\n        const yellowTransition = new SVG.Color('#FF0000').to('#00FF00');\n        for (let i = 0; i <=5; i++){\n            el.rect(100, 100)\n                .fill(yellowTransition.at(i * 0.2).toHex())\n                .transform(\n                    new SVG.Matrix()\n                        .translate(i * 20, 0)\n                        .rotate(45)\n                        .translate(100, 0)\n                );\n        }\n    }\n})\n```\n![Screenshot of multiple transforms](img/svgRender_3.svg)\n\n# Alternatives\n\nSince many of the libraries require a `window` or `document` instance,\nyou can always do something similar to the following:\n\n* create a new `jsdom` window and document \n* store the window and document to the `global` or `globalThis` scope\n* create an instance of an [svg element](https://developer.mozilla.org/en-US/docs/Web/SVG)\n* THEN import the libraries (now window and document are available)\n* ... manipulate the svg with the library\n* FINALLY - capture the svg.outerHTML, and render to $$.svg() / mimetype\n\nThe goal with this library is to provide a simple alternative for common scenarios\n\n# P5\n\nNote that other great SVG Libraries are always available:\n\n* [P5.js](https://p5js.org/)\n* [D3](https://d3js.org/)\n* [Snap.svg](http://snapsvg.io/)\n\nThe simplest is to run them with {@link module:ijs.htmlScript|ijs.htmlScript} and run in the browser,\nand pull requests are always welcome.\n\nHere is an example running P5.js, without even using the svg module:\n\n[See here for more on instance mode](https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace)\n\n```\nutils.ijs.htmlScript({\n    scripts: [\n        'https://cdn.jsdelivr.net/npm/p5@1.4.1/lib/p5.js'\n    ],\n    debug: true,\n    onReady: ({rootEl}) => {\n        const p5_Setup = (p) => {\n            let x = 100;\n            let y = 100;\n            \n            p.setup = function() {\n                p.createCanvas(700, 410);\n            }\n            \n            p.draw = function() {\n                p.background(0);\n                p.fill(255);\n                p.rect(x,y,50,50);\n            }\n        };\n        const myP5 = new p5(p5_Setup, rootEl);\n    }\n})\n```\n![Screenshot with p5](img/svgP5Example.png)",
    "kind": "module",
    "name": "svg",
    "alias": "svg",
    "longname": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        3973,
        3992
      ],
      "filename": "svg.js",
      "lineno": 118,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011739",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:svg",
    "longname": "module:svg",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        4043,
        4068
      ],
      "filename": "svg.js",
      "lineno": 120,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011745",
        "name": "SvgUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "SvgUtils",
    "longname": "module:svg~SvgUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:svg",
    "params": []
  },
  {
    "comment": "/**\n * Self-Contained functions - suitable to run client side\n * when running {@link module:svg.embed|svg.embed}\n */",
    "meta": {
      "range": [
        4188,
        4241
      ],
      "filename": "svg.js",
      "lineno": 126,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011751",
        "name": "module.exports.utilityFunctions",
        "type": "Identifier",
        "value": "SvgUtilityFunctions",
        "paramnames": []
      }
    },
    "description": "Self-Contained functions - suitable to run client side\nwhen running {@link module:svg.embed|svg.embed}",
    "name": "utilityFunctions",
    "longname": "module:svg.utilityFunctions",
    "kind": "member",
    "memberof": "module:svg",
    "scope": "static"
  },
  {
    "comment": "/**\n * Renders an SVG through a server side instance of [SVG.js](https://svgjs.dev/)\n * \n * This is a very nice library that generates, modifies and simplifies some aspects\n * of creating your own SVGs.\n * \n * **Note: server side rendering is meant to be interchangable with the embed version,\n * however there are some differences**\n * \n * * SVGs created on the server are often included in exports.\n * * Animations are only possible on `embed` versions -\n *    using [requestAnimationFrame](https://caniuse.com/requestanimationframe)\n *    and [cancelAnimationFrame](https://caniuse.com/mdn-api_window_cancelanimationframe)\n * \n * ## Simple Example\n * \n * ```\n * utils.svg.render(({el, SVG, width, height}) => {\n *     const colorTransition = new SVG.Color('#FF00FF').to('#0FF');\n * \n *     // draw a rectangle\n *     const firstRect = el.rect(100, 100)\n *         .fill('#0FF')\n *         .center(300, 100);\n *     \n *     // clone the rectangle, color it with the color range, and move it relative\n *     const secondRect = firstRect.clone()\n *         .fill(colorTransition.at(0))\n *         .dx(-200)\n *         .addTo(el);\n *     \n *     firstRect.clone()\n *         .fill(colorTransition.at(0.5))\n *         .dx(-100)\n *         .addTo(el);\n * });\n * ```\n * ![Screenshot of three boxes](img/svgRender_1.svg)\n * \n * ## More Complex Example\n * \n * ```\n * //-- use loops and logic to create shapes\n * utils.svg.render({\n *     width: 400, height: 400, debug: false,\n *     onReady: ({ el, SVG, width, height }) => {\n *         const transition = new SVG.Color('#0d4fa6').to('#ffff00');\n *         const colorTransition = (val) => transition.at(val).toHex();\n *                 \n *         const centerBox = el.rect(10, 10)\n *             .center(width / 2, height / 2)\n *             .fill(colorTransition(0));\n *         let currentBox = centerBox;\n *         let beforeBox = centerBox;\n *         \n *         const numSteps = 20;\n *         for (let i = 0; i < numSteps; i++) {\n *             beforeBox = currentBox;\n *             currentBox = beforeBox.clone()\n *                 .insertBefore(beforeBox)\n *                 .fill({ color: colorTransition((1/numSteps) * i) })\n *                 .scale(1.2)\n *                 .rotate(16)\n *         }\n *     }\n * })\n * ```\n * ![Screenshot of multiple rectangles expanding](img/svgRender_2.svg)\n * \n * @param {Object} options - options to use for drawing - or an onReady function\n * @param {Function} options.onReady - the function to call to generate the SVG\n * @param {Element} options.onReady.el - the SVG.js primed element to use for drawing\n * @param {any} options.onReady.SVG - the SVG.js library instance\n * @param {Number} options.onReady.width - the options.width value passed, for positioning\n * @param {Number} options.onReady.height - the options.height value passed, for positioning\n * @param {Object} options.onReady.utilityFunctions - the options.utilityFunctions object\n * @param {Object} options.onReady.options - the options object passed\n * @param {boolean} [options.default = false] - whether to print the svg result text\n * @param {Number} [options.width = 400] - the width of the svg to generate\n * @param {Number} [options.height = 200] - ... height\n * @param {Object} [options.utilityFunctions = {}] - an object for self contained functions that can be used in onReady\n */",
    "meta": {
      "range": [
        7599,
        8965
      ],
      "filename": "svg.js",
      "lineno": 210,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011759",
        "name": "module.exports.render",
        "type": "FunctionExpression",
        "value": "draw",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "cleanOptions": "module:svg.render~cleanOptions",
        "undefined": null,
        "context": "module:svg.render~context",
        "window": "module:svg.render~window",
        "el": "module:svg.render~el",
        "svgBody": "module:svg.render~svgBody"
      }
    },
    "description": "Renders an SVG through a server side instance of [SVG.js](https://svgjs.dev/)\n\nThis is a very nice library that generates, modifies and simplifies some aspects\nof creating your own SVGs.\n\n**Note: server side rendering is meant to be interchangable with the embed version,\nhowever there are some differences**\n\n* SVGs created on the server are often included in exports.\n* Animations are only possible on `embed` versions -\n   using [requestAnimationFrame](https://caniuse.com/requestanimationframe)\n   and [cancelAnimationFrame](https://caniuse.com/mdn-api_window_cancelanimationframe)\n\n## Simple Example\n\n```\nutils.svg.render(({el, SVG, width, height}) => {\n    const colorTransition = new SVG.Color('#FF00FF').to('#0FF');\n\n    // draw a rectangle\n    const firstRect = el.rect(100, 100)\n        .fill('#0FF')\n        .center(300, 100);\n    \n    // clone the rectangle, color it with the color range, and move it relative\n    const secondRect = firstRect.clone()\n        .fill(colorTransition.at(0))\n        .dx(-200)\n        .addTo(el);\n    \n    firstRect.clone()\n        .fill(colorTransition.at(0.5))\n        .dx(-100)\n        .addTo(el);\n});\n```\n![Screenshot of three boxes](img/svgRender_1.svg)\n\n## More Complex Example\n\n```\n//-- use loops and logic to create shapes\nutils.svg.render({\n    width: 400, height: 400, debug: false,\n    onReady: ({ el, SVG, width, height }) => {\n        const transition = new SVG.Color('#0d4fa6').to('#ffff00');\n        const colorTransition = (val) => transition.at(val).toHex();\n                \n        const centerBox = el.rect(10, 10)\n            .center(width / 2, height / 2)\n            .fill(colorTransition(0));\n        let currentBox = centerBox;\n        let beforeBox = centerBox;\n        \n        const numSteps = 20;\n        for (let i = 0; i < numSteps; i++) {\n            beforeBox = currentBox;\n            currentBox = beforeBox.clone()\n                .insertBefore(beforeBox)\n                .fill({ color: colorTransition((1/numSteps) * i) })\n                .scale(1.2)\n                .rotate(16)\n        }\n    }\n})\n```\n![Screenshot of multiple rectangles expanding](img/svgRender_2.svg)",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to use for drawing - or an onReady function",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the function to call to generate the SVG",
        "name": "options.onReady"
      },
      {
        "type": {
          "names": [
            "Element"
          ]
        },
        "description": "the SVG.js primed element to use for drawing",
        "name": "options.onReady.el"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the SVG.js library instance",
        "name": "options.onReady.SVG"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the options.width value passed, for positioning",
        "name": "options.onReady.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the options.height value passed, for positioning",
        "name": "options.onReady.height"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options.utilityFunctions object",
        "name": "options.onReady.utilityFunctions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options object passed",
        "name": "options.onReady.options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "whether to print the svg result text",
        "name": "options.default"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 400,
        "description": "the width of the svg to generate",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "defaultvalue": 200,
        "description": "... height",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "an object for self contained functions that can be used in onReady",
        "name": "options.utilityFunctions"
      }
    ],
    "name": "render",
    "longname": "module:svg.render",
    "kind": "function",
    "memberof": "module:svg",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7656,
        7771
      ],
      "filename": "svg.js",
      "lineno": 211,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011770",
        "name": "cleanOptions",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:svg.render~cleanOptions",
    "kind": "constant",
    "memberof": "module:svg.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7736,
        7752
      ],
      "filename": "svg.js",
      "lineno": 214,
      "columnno": 11,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011782",
        "name": "onReady",
        "type": "Identifier",
        "value": "options"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:svg~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7787,
        7794
      ],
      "filename": "svg.js",
      "lineno": 217,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011788",
        "name": "onReady",
        "type": "Identifier",
        "value": "onReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:svg~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7800,
        7813
      ],
      "filename": "svg.js",
      "lineno": 218,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011790",
        "name": "debug",
        "type": "AssignmentPattern",
        "value": "debug"
      }
    },
    "undocumented": true,
    "name": "debug",
    "longname": "module:svg~debug",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7819,
        7830
      ],
      "filename": "svg.js",
      "lineno": 219,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011794",
        "name": "width",
        "type": "AssignmentPattern",
        "value": "width"
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:svg~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7836,
        7848
      ],
      "filename": "svg.js",
      "lineno": 220,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011798",
        "name": "height",
        "type": "AssignmentPattern",
        "value": "height"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:svg~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7854,
        7858
      ],
      "filename": "svg.js",
      "lineno": 221,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011802",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:svg~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7864,
        7885
      ],
      "filename": "svg.js",
      "lineno": 222,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011804",
        "name": "utilityFunctions",
        "type": "AssignmentPattern",
        "value": "utilityFunctions"
      }
    },
    "undocumented": true,
    "name": "utilityFunctions",
    "longname": "module:svg~utilityFunctions",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7997,
        8031
      ],
      "filename": "svg.js",
      "lineno": 227,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011817",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:svg.render~context",
    "kind": "constant",
    "memberof": "module:svg.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8199,
        8225
      ],
      "filename": "svg.js",
      "lineno": 231,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011831",
        "name": "window",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "window",
    "longname": "module:svg.render~window",
    "kind": "constant",
    "memberof": "module:svg.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8308,
        8355
      ],
      "filename": "svg.js",
      "lineno": 235,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011845",
        "name": "el",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "el",
    "longname": "module:svg.render~el",
    "kind": "constant",
    "memberof": "module:svg.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8407,
        8409
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011869",
        "name": "el",
        "type": "Identifier",
        "value": "el"
      }
    },
    "undocumented": true,
    "name": "el",
    "longname": "module:svg~el",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8411,
        8421
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 18,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011871",
        "name": "SVG",
        "type": "Identifier",
        "value": "svgJS"
      }
    },
    "undocumented": true,
    "name": "SVG",
    "longname": "module:svg~SVG",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8423,
        8427
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 30,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011873",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:svg~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8429,
        8434
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 36,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011875",
        "name": "width",
        "type": "Identifier",
        "value": "width"
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:svg~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8436,
        8442
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 43,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011877",
        "name": "height",
        "type": "Identifier",
        "value": "height"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:svg~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8444,
        8460
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011879",
        "name": "utilityFunctions",
        "type": "Identifier",
        "value": "utilityFunctions"
      }
    },
    "undocumented": true,
    "name": "utilityFunctions",
    "longname": "module:svg~utilityFunctions",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8462,
        8483
      ],
      "filename": "svg.js",
      "lineno": 240,
      "columnno": 69,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011881",
        "name": "options",
        "type": "Identifier",
        "value": "cleanOptions"
      }
    },
    "undocumented": true,
    "name": "options",
    "longname": "module:svg~options",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8724,
        8742
      ],
      "filename": "svg.js",
      "lineno": 250,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011919",
        "name": "svgBody",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgBody",
    "longname": "module:svg.render~svgBody",
    "kind": "constant",
    "memberof": "module:svg.render",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\nRenders an SVG through a browser side instance of [SVG.js](https://svgjs.dev/)\n * \n * This is a very nice library that generates, modifies and simplifies some aspects\n * of creating your own SVGs.\n * \n * **Note: server side rendering is meant to be interchangable with the embed version,\n * however there are some differences**\n * \n * * SVGs created on the server are often included in exports.\n * * Animations are only possible on `embed` versions -\n *    using [requestAnimationFrame](https://caniuse.com/requestanimationframe)\n *    and [cancelAnimationFrame](https://caniuse.com/mdn-api_window_cancelanimationframe)\n * \n * ## Simple Example\n * ```\n * //-- same instance as the svg.render example\n * utils.svg.render(({el, SVG, width, height}) => {\n *     const colorTransition = new SVG.Color('#FF00FF').to('#0FF');\n * \n *     // draw a rectangle\n *     const firstRect = el.rect(100, 100)\n *         .fill('#0FF')\n *         .center(300, 100);\n *     \n *     // clone the rectangle, color it with the color range, and move it relative\n *     const secondRect = firstRect.clone()\n *         .fill(colorTransition.at(0))\n *         .dx(-200)\n *         .addTo(el);\n *     \n *     firstRect.clone()\n *         .fill(colorTransition.at(0.5))\n *         .dx(-100)\n *         .addTo(el);\n * });\n * ```\n * ![Screenshot of the embed example](img/svgEmbed1.png)\n * \n * ## Animation Example\n * \n * ```\n * utils.svg.embed(({ el, SVG, width, height }) => {\n *     var rect1 = el.rect(100, 100)\n *         .move(width/2, 0);\n * \n *     rect1.animate(1000, 0, 'absolute')\n *         .move(width/2, 100)\n *         .loop(true, true);\n * })\n * ```\n * ![Screenshot of animation with SVG.js](img/svgAnimation1.gif)\n * \n * With many other complex animations possible\n * \n * ![Screenshot of dark animation](img/svgAnimation2Dark.gif)\n * \n * @param {Object} options - options to use for drawing - or an onReady function\n * @param {Function} options.onReady - the function to call to generate the SVG\n * @param {Element} options.onReady.el - the SVG.js primed element to use for drawing\n * @param {Object} options.onReady.data - the data object passed - now in javascript\n * @param {any} options.onReady.SVG - the SVG.js library instance\n * @param {Number} options.onReady.width - the options.width value passed, for positioning\n * @param {Number} options.onReady.height - the options.height value passed, for positioning\n * @param {Object} options.onReady.utilityFunctions - the options.utilityFunctions object\n * @param {Object} options.onReady.options - the options object passed\n * @param {Object} options.onReady.animate - alias to requestAnimationFrame with additional checks to avoid leaks\n * @param {boolean} options.debug - default: false - whether to print the svg result text\n * @param {Number} options.width - default: 400 - the width of the svg to generate\n * @param {Number} options.height - default 200 - ... height\n * @param {Object} options.utilityFunctions - optional object for self contained functions that can be used in onReady\n */",
    "meta": {
      "range": [
        12009,
        13089
      ],
      "filename": "svg.js",
      "lineno": 333,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011944",
        "name": "module.exports.embed",
        "type": "FunctionExpression",
        "value": "embed",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "cleanOptions": "module:svg.embed~cleanOptions",
        "undefined": null,
        "context": "module:svg.embed~context"
      }
    },
    "description": "Renders an SVG through a browser side instance of [SVG.js](https://svgjs.dev/)\n\nThis is a very nice library that generates, modifies and simplifies some aspects\nof creating your own SVGs.\n\n**Note: server side rendering is meant to be interchangable with the embed version,\nhowever there are some differences**\n\n* SVGs created on the server are often included in exports.\n* Animations are only possible on `embed` versions -\n   using [requestAnimationFrame](https://caniuse.com/requestanimationframe)\n   and [cancelAnimationFrame](https://caniuse.com/mdn-api_window_cancelanimationframe)\n\n## Simple Example\n```\n//-- same instance as the svg.render example\nutils.svg.render(({el, SVG, width, height}) => {\n    const colorTransition = new SVG.Color('#FF00FF').to('#0FF');\n\n    // draw a rectangle\n    const firstRect = el.rect(100, 100)\n        .fill('#0FF')\n        .center(300, 100);\n    \n    // clone the rectangle, color it with the color range, and move it relative\n    const secondRect = firstRect.clone()\n        .fill(colorTransition.at(0))\n        .dx(-200)\n        .addTo(el);\n    \n    firstRect.clone()\n        .fill(colorTransition.at(0.5))\n        .dx(-100)\n        .addTo(el);\n});\n```\n![Screenshot of the embed example](img/svgEmbed1.png)\n\n## Animation Example\n\n```\nutils.svg.embed(({ el, SVG, width, height }) => {\n    var rect1 = el.rect(100, 100)\n        .move(width/2, 0);\n\n    rect1.animate(1000, 0, 'absolute')\n        .move(width/2, 100)\n        .loop(true, true);\n})\n```\n![Screenshot of animation with SVG.js](img/svgAnimation1.gif)\n\nWith many other complex animations possible\n\n![Screenshot of dark animation](img/svgAnimation2Dark.gif)",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "options to use for drawing - or an onReady function",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "the function to call to generate the SVG",
        "name": "options.onReady"
      },
      {
        "type": {
          "names": [
            "Element"
          ]
        },
        "description": "the SVG.js primed element to use for drawing",
        "name": "options.onReady.el"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the data object passed - now in javascript",
        "name": "options.onReady.data"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the SVG.js library instance",
        "name": "options.onReady.SVG"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the options.width value passed, for positioning",
        "name": "options.onReady.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the options.height value passed, for positioning",
        "name": "options.onReady.height"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options.utilityFunctions object",
        "name": "options.onReady.utilityFunctions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "the options object passed",
        "name": "options.onReady.options"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "alias to requestAnimationFrame with additional checks to avoid leaks",
        "name": "options.onReady.animate"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "default: false - whether to print the svg result text",
        "name": "options.debug"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "default: 400 - the width of the svg to generate",
        "name": "options.width"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "default 200 - ... height",
        "name": "options.height"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "optional object for self contained functions that can be used in onReady",
        "name": "options.utilityFunctions"
      }
    ],
    "name": "embed",
    "longname": "module:svg.embed",
    "kind": "function",
    "memberof": "module:svg",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12066,
        12181
      ],
      "filename": "svg.js",
      "lineno": 334,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011955",
        "name": "cleanOptions",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:svg.embed~cleanOptions",
    "kind": "constant",
    "memberof": "module:svg.embed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12146,
        12162
      ],
      "filename": "svg.js",
      "lineno": 337,
      "columnno": 11,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011967",
        "name": "onReady",
        "type": "Identifier",
        "value": "options"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:svg~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12197,
        12204
      ],
      "filename": "svg.js",
      "lineno": 340,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011973",
        "name": "onReady",
        "type": "Identifier",
        "value": "onReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:svg~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12210,
        12223
      ],
      "filename": "svg.js",
      "lineno": 341,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011975",
        "name": "debug",
        "type": "AssignmentPattern",
        "value": "debug"
      }
    },
    "undocumented": true,
    "name": "debug",
    "longname": "module:svg~debug",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12229,
        12240
      ],
      "filename": "svg.js",
      "lineno": 342,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011979",
        "name": "width",
        "type": "AssignmentPattern",
        "value": "width"
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:svg~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12246,
        12258
      ],
      "filename": "svg.js",
      "lineno": 343,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011983",
        "name": "height",
        "type": "AssignmentPattern",
        "value": "height"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:svg~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12264,
        12279
      ],
      "filename": "svg.js",
      "lineno": 344,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011987",
        "name": "version",
        "type": "AssignmentPattern",
        "value": "version"
      }
    },
    "undocumented": true,
    "name": "version",
    "longname": "module:svg~version",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12285,
        12297
      ],
      "filename": "svg.js",
      "lineno": 345,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100011991",
        "name": "scripts",
        "type": "AssignmentPattern",
        "value": "scripts"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:svg~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12504,
        12538
      ],
      "filename": "svg.js",
      "lineno": 353,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012012",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:svg.embed~context",
    "kind": "constant",
    "memberof": "module:svg.embed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12704,
        12819
      ],
      "filename": "svg.js",
      "lineno": 358,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012033",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"\",\"\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:svg~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12825,
        12830
      ],
      "filename": "svg.js",
      "lineno": 362,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012041",
        "name": "width",
        "type": "Identifier",
        "value": "width"
      }
    },
    "undocumented": true,
    "name": "width",
    "longname": "module:svg~width",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12836,
        12842
      ],
      "filename": "svg.js",
      "lineno": 363,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012043",
        "name": "height",
        "type": "Identifier",
        "value": "height"
      }
    },
    "undocumented": true,
    "name": "height",
    "longname": "module:svg~height",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12848,
        12853
      ],
      "filename": "svg.js",
      "lineno": 364,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012045",
        "name": "debug",
        "type": "Identifier",
        "value": "debug"
      }
    },
    "undocumented": true,
    "name": "debug",
    "longname": "module:svg~debug",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12859,
        13081
      ],
      "filename": "svg.js",
      "lineno": 365,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012047",
        "name": "onReady",
        "type": "TemplateLiteral",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:svg~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:svg"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13092,
        13120
      ],
      "filename": "svg.js",
      "lineno": 376,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012060",
        "name": "module.exports.svgJS",
        "type": "Identifier",
        "value": "svgJS",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "svgJS",
    "longname": "module:svg.svgJS",
    "kind": "member",
    "memberof": "module:svg",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        267,
        277
      ],
      "filename": "TableGenerator.js",
      "lineno": 13,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012072",
        "name": "printValue",
        "type": "Identifier",
        "value": "printValue"
      }
    },
    "undocumented": true,
    "name": "printValue",
    "longname": "printValue",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        400,
        427
      ],
      "filename": "TableGenerator.js",
      "lineno": 17,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012078",
        "name": "IJSUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "IJSUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        436,
        467
      ],
      "filename": "TableGenerator.js",
      "lineno": 19,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012084",
        "name": "ArrayUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ArrayUtils",
    "longname": "ArrayUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        476,
        509
      ],
      "filename": "TableGenerator.js",
      "lineno": 21,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012090",
        "name": "FormatUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "FormatUtils",
    "longname": "FormatUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        518,
        551
      ],
      "filename": "TableGenerator.js",
      "lineno": 23,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012096",
        "name": "ObjectUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "ObjectUtils",
    "longname": "ObjectUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        562,
        572
      ],
      "filename": "TableGenerator.js",
      "lineno": 25,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012104",
        "name": "createSort",
        "type": "Identifier",
        "value": "createSort"
      }
    },
    "undocumented": true,
    "name": "createSort",
    "longname": "createSort",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n * Generates and or Renders Tables (Markdown, CSS, HTML, or plain arrays)\n * \n * For example:\n * \n * ```\n * utils.datasets.fetch('cars.json').then(results => cars = results);\n * ```\n * \n * ```\n * utils.table(cars)\n *    .limit(2)\n *    .render();\n * ```\n * \n * ![Screenshot of simple example](img/TableGenerator_simple.png)\n * \n * ```\n * //-- with many options to tailor and format the table\n * \n * utils.table(cars)\n * \n *    //-- sort by year field (descending), Displacement (descending), Name (ascending)\n *    .sort('-Year', '-Displacement', 'Name')\n *    \n *    //-- limit to only the first 10 records\n *    .limit(10)\n *    \n *    //-- add in a new field / column called Kilometer_per_Litre\n *    .augment({\n *         'Kilometer_per_Litre': (row) => row.Miles_per_Gallon * 0.425144\n *    })\n * \n *    //-- specify the columns to show by list of fields\n *    .columns('Name', 'Kilometer_per_Litre', 'Cylinders', 'Displacement', 'Acceleration', 'Year')\n * \n *    //-- format how a field / column is rendered by ({ property: fn })\n *    .formatter({\n *        Year: (value) => value ? value.slice(0,4) : value\n *    })\n * \n *    //-- make specific column headers more legible with ({ property: header })\n *    .labels({\n *        'Kilometer_per_Litre': 'Km/L'\n *    })\n * \n *    //-- high light rows and cells based on data\n *    .styleCell(({columnIndex, value}) => columnIndex === 1 && value > 10\n *             ? 'background-color: #AAFFAA;' : ''\n *    )\n *    .styleRow(({record}) => record.Name.includes('diesel')\n *             ? 'color: green;' : ''\n *    )\n * \n *    .render()\n * ```\n * \n * ![Screenshot of complex example](img/TableGenerator_complex.png)\n * \n * ```\n * //-- note, `utils.table(...)`\n * //-- is the same as `new utils.TableGenerator(...)`\n * //-- and now available as of `1.12.0`\n * ```\n * \n * # Types of calls:\n * \n * * constructor\n *   * {@link TableGenerator#constructor|new TableGenerator(object[])} - create with data\n * * change the columns and headers\n *   * {@link TableGenerator#columns|columns(field, field, ...)} - specify fields and order\n *   * {@link TableGenerator#columnsToExclude|columnsToExclude(field, ...)} - specify fields not to show\n *   * {@link TableGenerator#labels|lables(obj)} - labels for field headers\n * * augment and change the values (non-destructively)\n *   * {@link TableGenerator#formatter|formatter(obj)} - adjust values of specific fields\n *   * {@link TableGenerator#formatterFn|formatterFn(fn)} - row, column aware adjustment\n *   * {@link TableGenerator#printOptions|printOptions(object)} - options for value rendering\n *   * {@link TableGenerator#augment|augment(obj)} - add fields to table\n * * sort and limit the output\n *   * {@link TableGenerator#filter|filter(fn)} - determine which rows to include or not\n *   * {@link TableGenerator#limit|limit(number)} - limit only specific # of rows\n *   * {@link TableGenerator#sortFn|sortFn(fn)} - Standard Array sort function\n *   * {@link TableGenerator#sort|sort(field, field, ...)} - sorts by fields, or descending with '-'\n * * transpose the output\n *   * {@link TableGenerator#transpose|transpose()} - transposes the output prior to rendering\n * * style the table\n *   * {@link TableGenerator#styleTable|styleTable(string)} - css style for the table\n *   * {@link TableGenerator#styleHeader|styleHeader(string)} - css styles for the header row\n *   * {@link TableGenerator#styleRow|styleRow(fn)} - Function to style rows\n *   * {@link TableGenerator#styleCell|styleCell(fn)} - Function to style cells\n *   * {@link TableGenerator#border|border(string)} - Apply a border to the table data cells\n * * generate output\n *   * {@link TableGenerator#generateHTML|generateHTML()} - returns html table with the results\n *   * {@link TableGenerator#generateMarkdown|generateMarkdown()} - returns markdown with the results\n *   * {@link TableGenerator#generateCSV|generateCSV()} - generates a CSV with the results\n *   * {@link TableGenerator#generateArray|generateArray()} - generates an array of headers and data for further process\n *   * {@link TableGenerator#generateArray2|generateArray2()} - generates a single array for further process\n * * render in jupyter\n *   * {@link TableGenerator#render|render()} - renders the results in a table within jupyter\n * \n */",
    "meta": {
      "range": [
        4883,
        40852
      ],
      "filename": "TableGenerator.js",
      "lineno": 128,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012109",
        "name": "TableGenerator",
        "type": "ClassDeclaration",
        "paramnames": [
          "data"
        ]
      }
    },
    "classdesc": "Generates and or Renders Tables (Markdown, CSS, HTML, or plain arrays)\n\nFor example:\n\n```\nutils.datasets.fetch('cars.json').then(results => cars = results);\n```\n\n```\nutils.table(cars)\n   .limit(2)\n   .render();\n```\n\n![Screenshot of simple example](img/TableGenerator_simple.png)\n\n```\n//-- with many options to tailor and format the table\n\nutils.table(cars)\n\n   //-- sort by year field (descending), Displacement (descending), Name (ascending)\n   .sort('-Year', '-Displacement', 'Name')\n   \n   //-- limit to only the first 10 records\n   .limit(10)\n   \n   //-- add in a new field / column called Kilometer_per_Litre\n   .augment({\n        'Kilometer_per_Litre': (row) => row.Miles_per_Gallon * 0.425144\n   })\n\n   //-- specify the columns to show by list of fields\n   .columns('Name', 'Kilometer_per_Litre', 'Cylinders', 'Displacement', 'Acceleration', 'Year')\n\n   //-- format how a field / column is rendered by ({ property: fn })\n   .formatter({\n       Year: (value) => value ? value.slice(0,4) : value\n   })\n\n   //-- make specific column headers more legible with ({ property: header })\n   .labels({\n       'Kilometer_per_Litre': 'Km/L'\n   })\n\n   //-- high light rows and cells based on data\n   .styleCell(({columnIndex, value}) => columnIndex === 1 && value > 10\n            ? 'background-color: #AAFFAA;' : ''\n   )\n   .styleRow(({record}) => record.Name.includes('diesel')\n            ? 'color: green;' : ''\n   )\n\n   .render()\n```\n\n![Screenshot of complex example](img/TableGenerator_complex.png)\n\n```\n//-- note, `utils.table(...)`\n//-- is the same as `new utils.TableGenerator(...)`\n//-- and now available as of `1.12.0`\n```\n\n# Types of calls:\n\n* constructor\n  * {@link TableGenerator#constructor|new TableGenerator(object[])} - create with data\n* change the columns and headers\n  * {@link TableGenerator#columns|columns(field, field, ...)} - specify fields and order\n  * {@link TableGenerator#columnsToExclude|columnsToExclude(field, ...)} - specify fields not to show\n  * {@link TableGenerator#labels|lables(obj)} - labels for field headers\n* augment and change the values (non-destructively)\n  * {@link TableGenerator#formatter|formatter(obj)} - adjust values of specific fields\n  * {@link TableGenerator#formatterFn|formatterFn(fn)} - row, column aware adjustment\n  * {@link TableGenerator#printOptions|printOptions(object)} - options for value rendering\n  * {@link TableGenerator#augment|augment(obj)} - add fields to table\n* sort and limit the output\n  * {@link TableGenerator#filter|filter(fn)} - determine which rows to include or not\n  * {@link TableGenerator#limit|limit(number)} - limit only specific # of rows\n  * {@link TableGenerator#sortFn|sortFn(fn)} - Standard Array sort function\n  * {@link TableGenerator#sort|sort(field, field, ...)} - sorts by fields, or descending with '-'\n* transpose the output\n  * {@link TableGenerator#transpose|transpose()} - transposes the output prior to rendering\n* style the table\n  * {@link TableGenerator#styleTable|styleTable(string)} - css style for the table\n  * {@link TableGenerator#styleHeader|styleHeader(string)} - css styles for the header row\n  * {@link TableGenerator#styleRow|styleRow(fn)} - Function to style rows\n  * {@link TableGenerator#styleCell|styleCell(fn)} - Function to style cells\n  * {@link TableGenerator#border|border(string)} - Apply a border to the table data cells\n* generate output\n  * {@link TableGenerator#generateHTML|generateHTML()} - returns html table with the results\n  * {@link TableGenerator#generateMarkdown|generateMarkdown()} - returns markdown with the results\n  * {@link TableGenerator#generateCSV|generateCSV()} - generates a CSV with the results\n  * {@link TableGenerator#generateArray|generateArray()} - generates an array of headers and data for further process\n  * {@link TableGenerator#generateArray2|generateArray2()} - generates a single array for further process\n* render in jupyter\n  * {@link TableGenerator#render|render()} - renders the results in a table within jupyter",
    "name": "TableGenerator",
    "longname": "TableGenerator",
    "kind": "class",
    "scope": "global",
    "undocumented": true
  },
  {
    "comment": "/**\n   * Collection of data\n   * @type {Array}\n   */",
    "meta": {
      "range": [
        4963,
        4974
      ],
      "filename": "TableGenerator.js",
      "lineno": 133,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012112",
        "name": "data",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Collection of data",
    "type": {
      "names": [
        "Array"
      ]
    },
    "name": "data",
    "longname": "TableGenerator#data",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Augment Function to append new fields\n   * @type {Function}\n   */",
    "meta": {
      "range": [
        5055,
        5073
      ],
      "filename": "TableGenerator.js",
      "lineno": 139,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012114",
        "name": "augmentFn",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Augment Function to append new fields",
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "augmentFn",
    "longname": "TableGenerator#augmentFn",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Border CSS to also apply to the cells\n   * @type {String}\n   */",
    "meta": {
      "range": [
        5152,
        5168
      ],
      "filename": "TableGenerator.js",
      "lineno": 145,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012116",
        "name": "borderCSS",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Border CSS to also apply to the cells",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "borderCSS",
    "longname": "TableGenerator#borderCSS",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Optional array of exclusive columns to show based on the properties of each row\\n\n   * ex: ['Miles_per_Gallon', 'Name', 'Cylinders', etc]\n   * @type {String[]}\n   **/",
    "meta": {
      "range": [
        5371,
        5387
      ],
      "filename": "TableGenerator.js",
      "lineno": 152,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012118",
        "name": "columns",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Optional array of exclusive columns to show based on the properties of each row\\n\nex: ['Miles_per_Gallon', 'Name', 'Cylinders', etc]",
    "type": {
      "names": [
        "Array.<String>"
      ]
    },
    "name": "columns",
    "longname": "TableGenerator#columns",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Optional array of columns to not show based on the properties of the row\\n\n   * ex: ['Serial_number']\n   * @type {String[]}\n   **/",
    "meta": {
      "range": [
        5533,
        5556
      ],
      "filename": "TableGenerator.js",
      "lineno": 159,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012120",
        "name": "columnsToExclude",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Optional array of columns to not show based on the properties of the row\\n\nex: ['Serial_number']",
    "type": {
      "names": [
        "Array.<String>"
      ]
    },
    "name": "columnsToExclude",
    "longname": "TableGenerator#columnsToExclude",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Map of key:value pairs, where the key is the property and value is dot notation access\n   * (accessing children should use map).\n   * This will always be accessed before any other action.\n   * ex: {parentName:'child.parent.parent.name'}\n   * @type {Object}\n   */",
    "meta": {
      "range": [
        5834,
        5848
      ],
      "filename": "TableGenerator.js",
      "lineno": 168,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012122",
        "name": "fetch",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Map of key:value pairs, where the key is the property and value is dot notation access\n(accessing children should use map).\nThis will always be accessed before any other action.\nex: {parentName:'child.parent.parent.name'}",
    "type": {
      "names": [
        "Object"
      ]
    },
    "name": "fetch",
    "longname": "TableGenerator#fetch",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Function used to determine which rows to include\n   * @type {Function}\n   */",
    "meta": {
      "range": [
        5940,
        5957
      ],
      "filename": "TableGenerator.js",
      "lineno": 174,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012124",
        "name": "filterFn",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Function used to determine which rows to include",
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "filterFn",
    "longname": "TableGenerator#filterFn",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Function to transform the value for a specific cell\n   * @type {Function}\n   */",
    "meta": {
      "range": [
        6052,
        6072
      ],
      "filename": "TableGenerator.js",
      "lineno": 180,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012126",
        "name": "formatterFn",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Function to transform the value for a specific cell",
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "formatterFn",
    "longname": "TableGenerator#formatterFn",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Optional labels for columns by the property Name\n   * ex: {Miles_per_Gallon:'Miles per Gallon'} or {0:'Miles per Gallon'} for arrays\n   * @type {Object}\n   **/",
    "meta": {
      "range": [
        6247,
        6260
      ],
      "filename": "TableGenerator.js",
      "lineno": 187,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012128",
        "name": "labels",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Optional labels for columns by the property Name\nex: {Miles_per_Gallon:'Miles per Gallon'} or {0:'Miles per Gallon'} for arrays",
    "type": {
      "names": [
        "Object"
      ]
    },
    "name": "labels",
    "longname": "TableGenerator#labels",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * The number of rows to limit.\n   * \n   * 10 : means ascending 10 records.\n   * \n   * -10 : means descending 10 records\n   * @type {Number}\n   */",
    "meta": {
      "range": [
        6419,
        6430
      ],
      "filename": "TableGenerator.js",
      "lineno": 197,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012130",
        "name": "limit",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "The number of rows to limit.\n\n10 : means ascending 10 records.\n\n-10 : means descending 10 records",
    "type": {
      "names": [
        "Number"
      ]
    },
    "name": "limit",
    "longname": "TableGenerator#limit",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * PrintValue options to use when rendering the table values\n   * @type {PrintOptions}\n   **/",
    "meta": {
      "range": [
        6536,
        6557
      ],
      "filename": "TableGenerator.js",
      "lineno": 203,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012132",
        "name": "printOptions",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "PrintValue options to use when rendering the table values",
    "type": {
      "names": [
        "PrintOptions"
      ]
    },
    "name": "printOptions",
    "longname": "TableGenerator#printOptions",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Sorting function\n   * \n   * @example utils.array.createSort('index')\n   * \n   * @type {Function}\n   **/",
    "meta": {
      "range": [
        6676,
        6691
      ],
      "filename": "TableGenerator.js",
      "lineno": 212,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012134",
        "name": "sortFn",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Sorting function",
    "examples": [
      "utils.array.createSort('index')"
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "sortFn",
    "longname": "TableGenerator#sortFn",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Style to apply at the table\n   * @type {String}\n   */",
    "meta": {
      "range": [
        6760,
        6777
      ],
      "filename": "TableGenerator.js",
      "lineno": 218,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012136",
        "name": "styleTable",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Style to apply at the table",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "styleTable",
    "longname": "TableGenerator#styleTable",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Style to apply to all the headers\n   * @type {String}\n   */",
    "meta": {
      "range": [
        6852,
        6870
      ],
      "filename": "TableGenerator.js",
      "lineno": 224,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012138",
        "name": "styleHeader",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Style to apply to all the headers",
    "type": {
      "names": [
        "String"
      ]
    },
    "name": "styleHeader",
    "longname": "TableGenerator#styleHeader",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Style to apply at the row\n   * @type {Function}\n   */",
    "meta": {
      "range": [
        6939,
        6956
      ],
      "filename": "TableGenerator.js",
      "lineno": 230,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012140",
        "name": "styleRow",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Style to apply at the row",
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "styleRow",
    "longname": "TableGenerator#styleRow",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Style to apply at the cell\n   * @type {Function}\n   */",
    "meta": {
      "range": [
        7026,
        7044
      ],
      "filename": "TableGenerator.js",
      "lineno": 236,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012142",
        "name": "styleCell",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Style to apply at the cell",
    "type": {
      "names": [
        "function"
      ]
    },
    "name": "styleCell",
    "longname": "TableGenerator#styleCell",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Whether the data should be output transposed\n   * @type {Boolean}\n   */",
    "meta": {
      "range": [
        7131,
        7153
      ],
      "filename": "TableGenerator.js",
      "lineno": 242,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012144",
        "name": "isTransposed",
        "type": "ClassPrivateProperty"
      }
    },
    "description": "Whether the data should be output transposed",
    "type": {
      "names": [
        "Boolean"
      ]
    },
    "name": "isTransposed",
    "longname": "TableGenerator#isTransposed",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "instance",
    "access": "private"
  },
  {
    "comment": "/**\n   * Function to format a value for a cell\n   * \n   * @example\n   * \n   * data = [{temp: 37, type: 'C'}, {temp: 310, type: 'K'}, {temp: 98, type: 'F'}];\n   * \n   * //-- simple example where the temp property is converted, and type property overwritten\n   * new TableGenerator(data)\n   *  .generateMarkdown()\n   * \n   * //-- gives\n   * temp | type\n   * ---- | ----\n   * 37   | C   \n   * 310  | K   \n   * 98   | F   \n   * \n   * @param {Object[]} - collection of objects\n   */",
    "meta": {
      "range": [
        7637,
        7723
      ],
      "filename": "TableGenerator.js",
      "lineno": 264,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012146",
        "name": "TableGenerator",
        "type": "MethodDefinition",
        "paramnames": [
          "data"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Function to format a value for a cell",
    "examples": [
      "data = [{temp: 37, type: 'C'}, {temp: 310, type: 'K'}, {temp: 98, type: 'F'}];\n\n//-- simple example where the temp property is converted, and type property overwritten\nnew TableGenerator(data)\n .generateMarkdown()\n\n//-- gives\ntemp | type\n---- | ----\n37   | C   \n310  | K   \n98   | F   "
    ],
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "data"
      }
    ],
    "name": "TableGenerator",
    "longname": "TableGenerator",
    "kind": "class",
    "scope": "global",
    "undocumented": true
  },
  {
    "comment": "/**\n * Generates and or Renders Tables (Markdown, CSS, HTML, or plain arrays)\n * \n * For example:\n * \n * ```\n * utils.datasets.fetch('cars.json').then(results => cars = results);\n * ```\n * \n * ```\n * utils.table(cars)\n *    .limit(2)\n *    .render();\n * ```\n * \n * ![Screenshot of simple example](img/TableGenerator_simple.png)\n * \n * ```\n * //-- with many options to tailor and format the table\n * \n * utils.table(cars)\n * \n *    //-- sort by year field (descending), Displacement (descending), Name (ascending)\n *    .sort('-Year', '-Displacement', 'Name')\n *    \n *    //-- limit to only the first 10 records\n *    .limit(10)\n *    \n *    //-- add in a new field / column called Kilometer_per_Litre\n *    .augment({\n *         'Kilometer_per_Litre': (row) => row.Miles_per_Gallon * 0.425144\n *    })\n * \n *    //-- specify the columns to show by list of fields\n *    .columns('Name', 'Kilometer_per_Litre', 'Cylinders', 'Displacement', 'Acceleration', 'Year')\n * \n *    //-- format how a field / column is rendered by ({ property: fn })\n *    .formatter({\n *        Year: (value) => value ? value.slice(0,4) : value\n *    })\n * \n *    //-- make specific column headers more legible with ({ property: header })\n *    .labels({\n *        'Kilometer_per_Litre': 'Km/L'\n *    })\n * \n *    //-- high light rows and cells based on data\n *    .styleCell(({columnIndex, value}) => columnIndex === 1 && value > 10\n *             ? 'background-color: #AAFFAA;' : ''\n *    )\n *    .styleRow(({record}) => record.Name.includes('diesel')\n *             ? 'color: green;' : ''\n *    )\n * \n *    .render()\n * ```\n * \n * ![Screenshot of complex example](img/TableGenerator_complex.png)\n * \n * ```\n * //-- note, `utils.table(...)`\n * //-- is the same as `new utils.TableGenerator(...)`\n * //-- and now available as of `1.12.0`\n * ```\n * \n * # Types of calls:\n * \n * * constructor\n *   * {@link TableGenerator#constructor|new TableGenerator(object[])} - create with data\n * * change the columns and headers\n *   * {@link TableGenerator#columns|columns(field, field, ...)} - specify fields and order\n *   * {@link TableGenerator#columnsToExclude|columnsToExclude(field, ...)} - specify fields not to show\n *   * {@link TableGenerator#labels|lables(obj)} - labels for field headers\n * * augment and change the values (non-destructively)\n *   * {@link TableGenerator#formatter|formatter(obj)} - adjust values of specific fields\n *   * {@link TableGenerator#formatterFn|formatterFn(fn)} - row, column aware adjustment\n *   * {@link TableGenerator#printOptions|printOptions(object)} - options for value rendering\n *   * {@link TableGenerator#augment|augment(obj)} - add fields to table\n * * sort and limit the output\n *   * {@link TableGenerator#filter|filter(fn)} - determine which rows to include or not\n *   * {@link TableGenerator#limit|limit(number)} - limit only specific # of rows\n *   * {@link TableGenerator#sortFn|sortFn(fn)} - Standard Array sort function\n *   * {@link TableGenerator#sort|sort(field, field, ...)} - sorts by fields, or descending with '-'\n * * transpose the output\n *   * {@link TableGenerator#transpose|transpose()} - transposes the output prior to rendering\n * * style the table\n *   * {@link TableGenerator#styleTable|styleTable(string)} - css style for the table\n *   * {@link TableGenerator#styleHeader|styleHeader(string)} - css styles for the header row\n *   * {@link TableGenerator#styleRow|styleRow(fn)} - Function to style rows\n *   * {@link TableGenerator#styleCell|styleCell(fn)} - Function to style cells\n *   * {@link TableGenerator#border|border(string)} - Apply a border to the table data cells\n * * generate output\n *   * {@link TableGenerator#generateHTML|generateHTML()} - returns html table with the results\n *   * {@link TableGenerator#generateMarkdown|generateMarkdown()} - returns markdown with the results\n *   * {@link TableGenerator#generateCSV|generateCSV()} - generates a CSV with the results\n *   * {@link TableGenerator#generateArray|generateArray()} - generates an array of headers and data for further process\n *   * {@link TableGenerator#generateArray2|generateArray2()} - generates a single array for further process\n * * render in jupyter\n *   * {@link TableGenerator#render|render()} - renders the results in a table within jupyter\n * \n */",
    "meta": {
      "range": [
        4883,
        40852
      ],
      "filename": "TableGenerator.js",
      "lineno": 128,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012109",
        "name": "TableGenerator",
        "type": "ClassDeclaration",
        "paramnames": [
          "data"
        ]
      }
    },
    "name": "TableGenerator",
    "longname": "TableGenerator",
    "kind": "class",
    "classdesc": "Generates and or Renders Tables (Markdown, CSS, HTML, or plain arrays)\n\nFor example:\n\n```\nutils.datasets.fetch('cars.json').then(results => cars = results);\n```\n\n```\nutils.table(cars)\n   .limit(2)\n   .render();\n```\n\n![Screenshot of simple example](img/TableGenerator_simple.png)\n\n```\n//-- with many options to tailor and format the table\n\nutils.table(cars)\n\n   //-- sort by year field (descending), Displacement (descending), Name (ascending)\n   .sort('-Year', '-Displacement', 'Name')\n   \n   //-- limit to only the first 10 records\n   .limit(10)\n   \n   //-- add in a new field / column called Kilometer_per_Litre\n   .augment({\n        'Kilometer_per_Litre': (row) => row.Miles_per_Gallon * 0.425144\n   })\n\n   //-- specify the columns to show by list of fields\n   .columns('Name', 'Kilometer_per_Litre', 'Cylinders', 'Displacement', 'Acceleration', 'Year')\n\n   //-- format how a field / column is rendered by ({ property: fn })\n   .formatter({\n       Year: (value) => value ? value.slice(0,4) : value\n   })\n\n   //-- make specific column headers more legible with ({ property: header })\n   .labels({\n       'Kilometer_per_Litre': 'Km/L'\n   })\n\n   //-- high light rows and cells based on data\n   .styleCell(({columnIndex, value}) => columnIndex === 1 && value > 10\n            ? 'background-color: #AAFFAA;' : ''\n   )\n   .styleRow(({record}) => record.Name.includes('diesel')\n            ? 'color: green;' : ''\n   )\n\n   .render()\n```\n\n![Screenshot of complex example](img/TableGenerator_complex.png)\n\n```\n//-- note, `utils.table(...)`\n//-- is the same as `new utils.TableGenerator(...)`\n//-- and now available as of `1.12.0`\n```\n\n# Types of calls:\n\n* constructor\n  * {@link TableGenerator#constructor|new TableGenerator(object[])} - create with data\n* change the columns and headers\n  * {@link TableGenerator#columns|columns(field, field, ...)} - specify fields and order\n  * {@link TableGenerator#columnsToExclude|columnsToExclude(field, ...)} - specify fields not to show\n  * {@link TableGenerator#labels|lables(obj)} - labels for field headers\n* augment and change the values (non-destructively)\n  * {@link TableGenerator#formatter|formatter(obj)} - adjust values of specific fields\n  * {@link TableGenerator#formatterFn|formatterFn(fn)} - row, column aware adjustment\n  * {@link TableGenerator#printOptions|printOptions(object)} - options for value rendering\n  * {@link TableGenerator#augment|augment(obj)} - add fields to table\n* sort and limit the output\n  * {@link TableGenerator#filter|filter(fn)} - determine which rows to include or not\n  * {@link TableGenerator#limit|limit(number)} - limit only specific # of rows\n  * {@link TableGenerator#sortFn|sortFn(fn)} - Standard Array sort function\n  * {@link TableGenerator#sort|sort(field, field, ...)} - sorts by fields, or descending with '-'\n* transpose the output\n  * {@link TableGenerator#transpose|transpose()} - transposes the output prior to rendering\n* style the table\n  * {@link TableGenerator#styleTable|styleTable(string)} - css style for the table\n  * {@link TableGenerator#styleHeader|styleHeader(string)} - css styles for the header row\n  * {@link TableGenerator#styleRow|styleRow(fn)} - Function to style rows\n  * {@link TableGenerator#styleCell|styleCell(fn)} - Function to style cells\n  * {@link TableGenerator#border|border(string)} - Apply a border to the table data cells\n* generate output\n  * {@link TableGenerator#generateHTML|generateHTML()} - returns html table with the results\n  * {@link TableGenerator#generateMarkdown|generateMarkdown()} - returns markdown with the results\n  * {@link TableGenerator#generateCSV|generateCSV()} - generates a CSV with the results\n  * {@link TableGenerator#generateArray|generateArray()} - generates an array of headers and data for further process\n  * {@link TableGenerator#generateArray2|generateArray2()} - generates a single array for further process\n* render in jupyter\n  * {@link TableGenerator#render|render()} - renders the results in a table within jupyter",
    "scope": "global",
    "description": "Function to format a value for a cell",
    "examples": [
      "data = [{temp: 37, type: 'C'}, {temp: 310, type: 'K'}, {temp: 98, type: 'F'}];\n\n//-- simple example where the temp property is converted, and type property overwritten\nnew TableGenerator(data)\n .generateMarkdown()\n\n//-- gives\ntemp | type\n---- | ----\n37   | C   \n310  | K   \n98   | F   "
    ],
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "collection of objects",
        "name": "data"
      }
    ]
  },
  {
    "comment": "/**\n   * Resets the generator\n   */",
    "meta": {
      "range": [
        7765,
        8235
      ],
      "filename": "TableGenerator.js",
      "lineno": 274,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012165",
        "name": "TableGenerator#reset",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Resets the generator",
    "name": "reset",
    "longname": "TableGenerator#reset",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7779,
        7794
      ],
      "filename": "TableGenerator.js",
      "lineno": 275,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012170",
        "name": "this.",
        "type": "ArrayExpression",
        "value": "[]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7800,
        7822
      ],
      "filename": "TableGenerator.js",
      "lineno": 276,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012177",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7828,
        7848
      ],
      "filename": "TableGenerator.js",
      "lineno": 277,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012184",
        "name": "this.",
        "type": "Literal",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7854,
        7874
      ],
      "filename": "TableGenerator.js",
      "lineno": 278,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012191",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7880,
        7907
      ],
      "filename": "TableGenerator.js",
      "lineno": 279,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012198",
        "name": "this.",
        "type": "ArrayExpression",
        "value": "[]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7913,
        7931
      ],
      "filename": "TableGenerator.js",
      "lineno": 280,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012205",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7937,
        7958
      ],
      "filename": "TableGenerator.js",
      "lineno": 281,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012212",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7964,
        7988
      ],
      "filename": "TableGenerator.js",
      "lineno": 282,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012219",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        7994,
        8011
      ],
      "filename": "TableGenerator.js",
      "lineno": 283,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012226",
        "name": "this.",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8017,
        8032
      ],
      "filename": "TableGenerator.js",
      "lineno": 284,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012233",
        "name": "this.",
        "type": "Literal",
        "value": 0,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8038,
        8063
      ],
      "filename": "TableGenerator.js",
      "lineno": 285,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012240",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8069,
        8088
      ],
      "filename": "TableGenerator.js",
      "lineno": 286,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012247",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8094,
        8115
      ],
      "filename": "TableGenerator.js",
      "lineno": 287,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012254",
        "name": "this.",
        "type": "Literal",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8121,
        8143
      ],
      "filename": "TableGenerator.js",
      "lineno": 288,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012261",
        "name": "this.",
        "type": "Literal",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8149,
        8170
      ],
      "filename": "TableGenerator.js",
      "lineno": 289,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012268",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8176,
        8198
      ],
      "filename": "TableGenerator.js",
      "lineno": 290,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012275",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8204,
        8230
      ],
      "filename": "TableGenerator.js",
      "lineno": 291,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012282",
        "name": "this.",
        "type": "Literal",
        "value": false,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Assigns the data to be used in generating the table.\n   * @param {Array} collection -\n   * @returns {TableGenerator} - chainable instance\n   * @see #constructor\n   * @example\n   * \n   * dataSet = [{temp: 37, type: 'C'}, {temp: 310, type: 'K'}, {temp: 98, type: 'F'}];\n   * \n   * //-- simple example where the temp property is converted, and type property overwritten\n   * new TableGenerator()\n   *  .data(dataSet)\n   *  .generateMarkdown()\n   * \n   * //-- gives\n   * temp | type\n   * ---- | ----\n   * 37   | C   \n   * 310  | K   \n   * 98   | F   \n   */",
    "meta": {
      "range": [
        8829,
        8889
      ],
      "filename": "TableGenerator.js",
      "lineno": 317,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012288",
        "name": "TableGenerator#data",
        "type": "MethodDefinition",
        "paramnames": [
          "col"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Assigns the data to be used in generating the table.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "-",
        "name": "collection"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "see": [
      "#constructor"
    ],
    "examples": [
      "dataSet = [{temp: 37, type: 'C'}, {temp: 310, type: 'K'}, {temp: 98, type: 'F'}];\n\n//-- simple example where the temp property is converted, and type property overwritten\nnew TableGenerator()\n .data(dataSet)\n .generateMarkdown()\n\n//-- gives\ntemp | type\n---- | ----\n37   | C   \n310  | K   \n98   | F   "
    ],
    "name": "data",
    "longname": "TableGenerator#data",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8845,
        8867
      ],
      "filename": "TableGenerator.js",
      "lineno": 318,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012294",
        "name": "this.",
        "type": "LogicalExpression",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Augments data with additional fields\n   * \n   * (Convenience function to add additional values without augmenting the data.)\n   * \n   * Note that doing a `.map()` on the dataset prior may have better performance\n   * but doing so may modify the dataset - where this would not.\n   * \n   * @example\n   * \n   * sourceData = [{id: 1, temp_F:98}, {id: 2, temp_F:99}, {id: 3, temp_F:100}];\n   * \n   * utils.table(sourceData)\n   *  .augment({\n   *    temp_C: (row) => (row.temp_F - 32) * 0.5556,\n   *    temp_K: (row) => (row.temp_F - 32) * 0.5556 + 1000\n   *  })\n   *  .generateMarkdown()\n   * \n   * //-- provides:\n   * \n   * id | temp_F | temp_C | temp_K\n   * -- | ------ | ------ | ------\n   * 1  | 98     | 36.667 | 309.817\n   * 2  | 99     | 37.222 | 310.372\n   * 3  | 100    | 37.778 | 310.928\n   * \n   * @param {Object} obj - Object with properties to add to the result data\n   * @param {Function} obj.newProperty - Function per property to add\n   * @param {Object} obj.newProperty.record - Each record within data\n   * \n   * @returns {TableGenerator} - chainable instance\n   */",
    "meta": {
      "range": [
        9983,
        10518
      ],
      "filename": "TableGenerator.js",
      "lineno": 355,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012304",
        "name": "TableGenerator#augment",
        "type": "MethodDefinition",
        "paramnames": [
          "obj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Augments data with additional fields\n\n(Convenience function to add additional values without augmenting the data.)\n\nNote that doing a `.map()` on the dataset prior may have better performance\nbut doing so may modify the dataset - where this would not.",
    "examples": [
      "sourceData = [{id: 1, temp_F:98}, {id: 2, temp_F:99}, {id: 3, temp_F:100}];\n\nutils.table(sourceData)\n .augment({\n   temp_C: (row) => (row.temp_F - 32) * 0.5556,\n   temp_K: (row) => (row.temp_F - 32) * 0.5556 + 1000\n })\n .generateMarkdown()\n\n//-- provides:\n\nid | temp_F | temp_C | temp_K\n-- | ------ | ------ | ------\n1  | 98     | 36.667 | 309.817\n2  | 99     | 37.222 | 310.372\n3  | 100    | 37.778 | 310.928"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Object with properties to add to the result data",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Function per property to add",
        "name": "obj.newProperty"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Each record within data",
        "name": "obj.newProperty.record"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "augment",
    "longname": "TableGenerator#augment",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10020,
        10042
      ],
      "filename": "TableGenerator.js",
      "lineno": 357,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012314",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10080,
        10125
      ],
      "filename": "TableGenerator.js",
      "lineno": 361,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012323",
        "name": "augmentKeys",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "augmentKeys",
    "longname": "<anonymous>~augmentKeys",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10305,
        10495
      ],
      "filename": "TableGenerator.js",
      "lineno": 369,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012354",
        "name": "this.",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          "record"
        ]
      },
      "vars": {
        "newRecord": "TableGenerator.TableGenerator~newRecord",
        "": null
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10349,
        10374
      ],
      "filename": "TableGenerator.js",
      "lineno": 370,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012363",
        "name": "newRecord",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "newRecord",
    "longname": "TableGenerator.TableGenerator~newRecord",
    "kind": "constant",
    "memberof": "TableGenerator.TableGenerator",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10421,
        10454
      ],
      "filename": "TableGenerator.js",
      "lineno": 372,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012377",
        "name": "newRecord[undefined]",
        "type": "CallExpression",
        "funcscope": "TableGenerator.TableGenerator",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "TableGenerator.TableGenerator~newRecord.undefined]",
    "kind": "member",
    "memberof": "TableGenerator.TableGenerator~newRecord",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Convenience function to set an a border on the Data Cells.\n   * \n   * This only applies when {@link TableGenerator#render|rendering HTML}\n   * or {@link TableGenerator#generateHTML|generating HTML}\n   * \n   * As this adds additional CSS, the styling applied:\n   *   * {@link TableGenerator#styleTable|to the whole table}\n   *   * or {@link TableGenerator#styleRow|to the rows}\n   *   * or {@link TableGenerator#styleCell|to the data cells} will be affected\n   * \n   * For example:\n   * \n   * ```\n   * sourceData = [{id: 1, temp_F:98}, {id: 2, temp_F:99}, {id: 3, temp_F:100}];\n   * \n   * utils.table(sourceData)\n   *    .border('1px solid #aaa')\n   *    .render();\n   * ```\n   * \n   * <table cellspacing=\"0px\" >\n   * <tr >\n   *   <th>id</th>\n   *   <th>temp_F</th>\n   * </tr>\n   * <tr >\n   *   <td style=\" border: 1px solid #aaa\">1</td>\n   *   <td style=\" border: 1px solid #aaa\">98</td>\n   * </tr>\n   * <tr >\n   *   <td style=\" border: 1px solid #aaa\">2</td>\n   *   <td style=\" border: 1px solid #aaa\">99</td>\n   * </tr>\n   * <tr >\n   *   <td style=\" border: 1px solid #aaa\">3</td>\n   *   <td style=\" border: 1px solid #aaa\">100</td>\n   * </tr>\n   * </table>\n   * \n   * @param {String | Boolean} borderCSS - CSS String to additionally apply HTML TD elements\n   */",
    "meta": {
      "range": [
        11798,
        12044
      ],
      "filename": "TableGenerator.js",
      "lineno": 422,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012390",
        "name": "TableGenerator#border",
        "type": "MethodDefinition",
        "paramnames": [
          "borderCSS"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Convenience function to set an a border on the Data Cells.\n\nThis only applies when {@link TableGenerator#render|rendering HTML}\nor {@link TableGenerator#generateHTML|generating HTML}\n\nAs this adds additional CSS, the styling applied:\n  * {@link TableGenerator#styleTable|to the whole table}\n  * or {@link TableGenerator#styleRow|to the rows}\n  * or {@link TableGenerator#styleCell|to the data cells} will be affected\n\nFor example:\n\n```\nsourceData = [{id: 1, temp_F:98}, {id: 2, temp_F:99}, {id: 3, temp_F:100}];\n\nutils.table(sourceData)\n   .border('1px solid #aaa')\n   .render();\n```\n\n<table cellspacing=\"0px\" >\n<tr >\n  <th>id</th>\n  <th>temp_F</th>\n</tr>\n<tr >\n  <td style=\" border: 1px solid #aaa\">1</td>\n  <td style=\" border: 1px solid #aaa\">98</td>\n</tr>\n<tr >\n  <td style=\" border: 1px solid #aaa\">2</td>\n  <td style=\" border: 1px solid #aaa\">99</td>\n</tr>\n<tr >\n  <td style=\" border: 1px solid #aaa\">3</td>\n  <td style=\" border: 1px solid #aaa\">100</td>\n</tr>\n</table>",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Boolean"
          ]
        },
        "description": "CSS String to additionally apply HTML TD elements",
        "name": "borderCSS"
      }
    ],
    "name": "border",
    "longname": "TableGenerator#border",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11826,
        11839
      ],
      "filename": "TableGenerator.js",
      "lineno": 423,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012396",
        "name": "cleanCSS",
        "type": "Literal",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCSS",
    "longname": "<anonymous>~cleanCSS",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11878,
        11913
      ],
      "filename": "TableGenerator.js",
      "lineno": 426,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012405",
        "name": "cleanCSS",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": "border: 1px solid #aaa",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCSS",
    "longname": "<anonymous>~cleanCSS",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11949,
        11982
      ],
      "filename": "TableGenerator.js",
      "lineno": 428,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012412",
        "name": "cleanCSS",
        "type": "TemplateLiteral",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCSS",
    "longname": "<anonymous>~cleanCSS",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        11995,
        12021
      ],
      "filename": "TableGenerator.js",
      "lineno": 431,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012419",
        "name": "this.",
        "type": "Identifier",
        "value": "cleanCSS",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Applies an optional set of columns / properties to render\n   * \n   * @param {String[]} values - Optional array of exclusive fields to render\\n\n   *    If not provided, then all fields are rendered.\\n\n   *    If provided, then only the fields listed will be rendered\\n\n   * @returns {TableGenerator} - chainable instance\n   * @example\n   * \n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *    {reg: 'z', source: 'B', temp: 98},\n   *    {reg: 'z', source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * new TableGenerator(dataSet)\n   *  .columns('temp', 'source') // or .columns(['temp', 'source'])\n   *  .generateMarkdown();\n   * \n   * //-- provides\n   * \n   * temp | source\n   * ---- | ------\n   * 99   | A\n   * 98   | B\n   * 100  | A\n   **/",
    "meta": {
      "range": [
        12842,
        13174
      ],
      "filename": "TableGenerator.js",
      "lineno": 463,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012427",
        "name": "TableGenerator#columns",
        "type": "MethodDefinition",
        "paramnames": [
          "values",
          "rest"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Applies an optional set of columns / properties to render",
    "params": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "Optional array of exclusive fields to render\\n\n   If not provided, then all fields are rendered.\\n\n   If provided, then only the fields listed will be rendered\\n",
        "name": "values"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "examples": [
      "dataSet = [{reg:'z', source: 'A', temp: 99},\n   {reg: 'z', source: 'B', temp: 98},\n   {reg: 'z', source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nnew TableGenerator(dataSet)\n .columns('temp', 'source') // or .columns(['temp', 'source'])\n .generateMarkdown();\n\n//-- provides\n\ntemp | source\n---- | ------\n99   | A\n98   | B\n100  | A"
    ],
    "name": "columns",
    "longname": "TableGenerator#columns",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12969,
        13002
      ],
      "filename": "TableGenerator.js",
      "lineno": 466,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012441",
        "name": "this.",
        "type": "ArrayExpression",
        "value": "[\"values\",\"\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        13050,
        13072
      ],
      "filename": "TableGenerator.js",
      "lineno": 468,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012458",
        "name": "this.",
        "type": "Identifier",
        "value": "values",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Applies an optional set of columns / properties not to render\n   * \n   * @param {String[]} values - Optional array of columns not to render\\n\n   *    If not provided, then all fields are rendered.\\n\n   *    If provided, then these fields will not be rendered under any circumstance.\\n\n   * @returns {TableGenerator} - chainable instance\n   * @example\n   * \n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *    {reg: 'z', source: 'B', temp: 98},\n   *    {reg: 'z', source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * new TableGenerator(dataSet)\n   *  .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n   *  .generateMarkdown();\n   * \n   * //-- provides\n   * \n   * temp | source\n   * ---- | ------\n   * 99   | A\n   * 98   | B\n   * 100  | A\n   **/",
    "meta": {
      "range": [
        13988,
        14358
      ],
      "filename": "TableGenerator.js",
      "lineno": 502,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012471",
        "name": "TableGenerator#columnsToExclude",
        "type": "MethodDefinition",
        "paramnames": [
          "values",
          "rest"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Applies an optional set of columns / properties not to render",
    "params": [
      {
        "type": {
          "names": [
            "Array.<String>"
          ]
        },
        "description": "Optional array of columns not to render\\n\n   If not provided, then all fields are rendered.\\n\n   If provided, then these fields will not be rendered under any circumstance.\\n",
        "name": "values"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "examples": [
      "dataSet = [{reg:'z', source: 'A', temp: 99},\n   {reg: 'z', source: 'B', temp: 98},\n   {reg: 'z', source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nnew TableGenerator(dataSet)\n .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n .generateMarkdown();\n\n//-- provides\n\ntemp | source\n---- | ------\n99   | A\n98   | B\n100  | A"
    ],
    "name": "columnsToExclude",
    "longname": "TableGenerator#columnsToExclude",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14124,
        14166
      ],
      "filename": "TableGenerator.js",
      "lineno": 505,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012485",
        "name": "this.",
        "type": "ArrayExpression",
        "value": "[\"values\",\"\"]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        14214,
        14245
      ],
      "filename": "TableGenerator.js",
      "lineno": 507,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012502",
        "name": "this.",
        "type": "Identifier",
        "value": "values",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Filter the dataset\n   * \n   * (This is a alternative to calling `.filter()` on the source data)\n   * \n   * For example:\n   * \n   * ```\n   * data = [{temp: 98, type: 'F'}, {temp: 37, type: 'C'}, {temp: 309, type: 'K'}];\n   * \n   * //-- simple example where the temp property is converted, and type property overwritten\n   * new TableGenerator(data)\n   *  .filter((row) => row.type === 'C')\n   *  .generateMarkdown()\n   * \n   * //-- gives\n   * temp | type\n   * ---- | ----\n   * 37   | C   \n   * ```\n   * \n   * @param {Function} filterFn - A function that returns `true` to include the row in output\n   * @param {Object} filterFn.row - a record from within `data`\n   * \n   * @returns {TableGenerator}\n   */",
    "meta": {
      "range": [
        15077,
        15147
      ],
      "filename": "TableGenerator.js",
      "lineno": 540,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012515",
        "name": "TableGenerator#filter",
        "type": "MethodDefinition",
        "paramnames": [
          "filterFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Filter the dataset\n\n(This is a alternative to calling `.filter()` on the source data)\n\nFor example:\n\n```\ndata = [{temp: 98, type: 'F'}, {temp: 37, type: 'C'}, {temp: 309, type: 'K'}];\n\n//-- simple example where the temp property is converted, and type property overwritten\nnew TableGenerator(data)\n .filter((row) => row.type === 'C')\n .generateMarkdown()\n\n//-- gives\ntemp | type\n---- | ----\n37   | C   \n```",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A function that returns `true` to include the row in output",
        "name": "filterFn"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "a record from within `data`",
        "name": "filterFn.row"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        }
      }
    ],
    "name": "filter",
    "longname": "TableGenerator#filter",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15100,
        15125
      ],
      "filename": "TableGenerator.js",
      "lineno": 541,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012521",
        "name": "this.",
        "type": "Identifier",
        "value": "filterFn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Object that provides translations functions for matching properties.\n   * \n   * (This is an alternate to {@link formatterFn} or simple `.map()` call on the source data)\n   * \n   * **NOTE: Only matching properties on the formatter object are changed - all others are left alone.**\n   * \n   * For example:\n   * \n   * ```\n   * data = [\n   *   {station: 'A', temp: 98, type: 'F', descr: '0123'},\n   *   {station: 'A', temp: 99, type: 'F', descr: '0123456'},\n   *   {station: 'A', temp: 100, type: 'F', descr: '0123456789'}\n   * ];\n   * \n   * //-- simple example where the temp property is converted, and type property overwritten\n   * new TableGenerator(data)\n   *  .formatter({\n   *    //-- property 'station' not mentioned, so no change\n   *    \n   *    //-- convert temperature to celsius\n   *    temp: (value) => (value - 32) * 0.5556,\n   *    //-- overwrite type from 'F' to 'C'\n   *    type: 'C',\n   *    //-- ellipsify to shorten the description string, if longer than 8 characters\n   *    descr: (str) => utils.format.ellipsify(str, 8)\n   *  }).renderMarkdown()\n   * ```\n   * \n   * station|temp  |type|descr    \n   * --     |--    |--  |--       \n   * A      |36.67 |F   |0123     \n   * A      |37.225|F   |0123456  \n   * A      |37.781|F   |01234567…\n   * \n   * Note, due to frequent requests, simple datatype conversions can be requested.\n   * \n   * Only ('String', 'Number', and 'Boolean') are supported\n   * \n   * ```\n   * data = [\n   *   { propA: ' 8009', propB: 8009, isBoolean: 0},\n   *   { propA: ' 92032', propB: 92032, isBoolean: 1},\n   *   { propA: ' 234234', propB: 234234, isBoolean: 1},\n   * ];\n   * \n   * utils.table(data)\n   *   .formatter({\n   *     //-- convert Prop A to Number - so render with Locale Number Formatting\n   *     propA: 'number',\n   *     //-- conver PropB to String - so render without Locale Number Formatting\n   *     propB: 'string',\n   *     //-- render 'True' or 'False'\n   *     isBoolean: 'boolean'\n   *   }).renderMarkdown();\n   * ```\n   * \n   * propA|propB|isBoolean\n   * --                  |--                |--       \n   * 8,009               |8009              |false    \n   * 92,032              |92032             |true     \n   * 234,234             |234234            |true \n   * \n   * @param {Object} obj - object with properties storing arrow functions\n   * @param {Function} obj.PropertyToTranslate - (value) => result\n   * \n   * @returns {TableGenerator}\n   */",
    "meta": {
      "range": [
        17584,
        18040
      ],
      "filename": "TableGenerator.js",
      "lineno": 614,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012529",
        "name": "TableGenerator#formatter",
        "type": "MethodDefinition",
        "paramnames": [
          "obj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Object that provides translations functions for matching properties.\n\n(This is an alternate to {@link formatterFn} or simple `.map()` call on the source data)\n\n**NOTE: Only matching properties on the formatter object are changed - all others are left alone.**\n\nFor example:\n\n```\ndata = [\n  {station: 'A', temp: 98, type: 'F', descr: '0123'},\n  {station: 'A', temp: 99, type: 'F', descr: '0123456'},\n  {station: 'A', temp: 100, type: 'F', descr: '0123456789'}\n];\n\n//-- simple example where the temp property is converted, and type property overwritten\nnew TableGenerator(data)\n .formatter({\n   //-- property 'station' not mentioned, so no change\n   \n   //-- convert temperature to celsius\n   temp: (value) => (value - 32) * 0.5556,\n   //-- overwrite type from 'F' to 'C'\n   type: 'C',\n   //-- ellipsify to shorten the description string, if longer than 8 characters\n   descr: (str) => utils.format.ellipsify(str, 8)\n }).renderMarkdown()\n```\n\nstation|temp  |type|descr    \n--     |--    |--  |--       \nA      |36.67 |F   |0123     \nA      |37.225|F   |0123456  \nA      |37.781|F   |01234567…\n\nNote, due to frequent requests, simple datatype conversions can be requested.\n\nOnly ('String', 'Number', and 'Boolean') are supported\n\n```\ndata = [\n  { propA: ' 8009', propB: 8009, isBoolean: 0},\n  { propA: ' 92032', propB: 92032, isBoolean: 1},\n  { propA: ' 234234', propB: 234234, isBoolean: 1},\n];\n\nutils.table(data)\n  .formatter({\n    //-- convert Prop A to Number - so render with Locale Number Formatting\n    propA: 'number',\n    //-- conver PropB to String - so render without Locale Number Formatting\n    propB: 'string',\n    //-- render 'True' or 'False'\n    isBoolean: 'boolean'\n  }).renderMarkdown();\n```\n\npropA|propB|isBoolean\n--                  |--                |--       \n8,009               |8009              |false    \n92,032              |92032             |true     \n234,234             |234234            |true",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "object with properties storing arrow functions",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(value) => result",
        "name": "obj.PropertyToTranslate"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        }
      }
    ],
    "name": "formatter",
    "longname": "TableGenerator#formatter",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17623,
        17647
      ],
      "filename": "TableGenerator.js",
      "lineno": 616,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012539",
        "name": "this.",
        "type": "Literal",
        "value": null,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17685,
        17743
      ],
      "filename": "TableGenerator.js",
      "lineno": 620,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012548",
        "name": "cleanedFormatter",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedFormatter",
    "longname": "<anonymous>~cleanedFormatter",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17756,
        17773
      ],
      "filename": "TableGenerator.js",
      "lineno": 622,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012556",
        "name": "fnMap",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "fnMap",
    "longname": "<anonymous>~fnMap",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17905,
        18018
      ],
      "filename": "TableGenerator.js",
      "lineno": 627,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012582",
        "name": "this.",
        "type": "ArrowFunctionExpression",
        "paramnames": [
          ""
        ]
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17928,
        17933
      ],
      "filename": "TableGenerator.js",
      "lineno": 627,
      "columnno": 27,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012589",
        "name": "value",
        "type": "Identifier",
        "value": "value"
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "value",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17935,
        17943
      ],
      "filename": "TableGenerator.js",
      "lineno": 627,
      "columnno": 34,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012591",
        "name": "property",
        "type": "Identifier",
        "value": "property"
      }
    },
    "undocumented": true,
    "name": "property",
    "longname": "property",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n   * Function that can format a value for a given row, cell\n   * \n   * (value, cellIndex, header, rowIndex, row, record) => string\n   * \n   * @param {function(*):any} fn - Translation function to apply to all cells.\n   * \n   * When it runs, you will recieve a single parameter representing the current cell and row.\n   * \n   * Return what the new value should be.\n   * @param {any}    fn.value - destructured value of the cell\n   * @param {Number} fn.columnIndex - destructured 0 index column of the cell\n   * @param {String} fn.property - destructured property used for that column\n   * @param {Number} fn.rowIndex - destructured 0 index row of the cell\n   * @param {Array}  fn.record - destructured original record\n   * \n   * @returns {TableGenerator}\n   */",
    "meta": {
      "range": [
        18810,
        18876
      ],
      "filename": "TableGenerator.js",
      "lineno": 651,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012609",
        "name": "TableGenerator#formatterFn",
        "type": "MethodDefinition",
        "paramnames": [
          "fn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Function that can format a value for a given row, cell\n\n(value, cellIndex, header, rowIndex, row, record) => string",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Translation function to apply to all cells.\n\nWhen it runs, you will recieve a single parameter representing the current cell and row.\n\nReturn what the new value should be.",
        "name": "fn"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "destructured value of the cell",
        "name": "fn.value"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "destructured 0 index column of the cell",
        "name": "fn.columnIndex"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "destructured property used for that column",
        "name": "fn.property"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "destructured 0 index row of the cell",
        "name": "fn.rowIndex"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "destructured original record",
        "name": "fn.record"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        }
      }
    ],
    "name": "formatterFn",
    "longname": "TableGenerator#formatterFn",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18832,
        18854
      ],
      "filename": "TableGenerator.js",
      "lineno": 652,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012615",
        "name": "this.",
        "type": "Identifier",
        "value": "fn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * The number of rows to limit.\n   * \n   * 10 : means ascending 10 records.\n   * \n   * -10 : means descending 10 records\n   * \n   * @param {Number} limitRecords - 0 for all records, + for ascending, - for descending\n   * @return {TableGenerator} - chainable interface\n   */",
    "meta": {
      "range": [
        19162,
        19236
      ],
      "filename": "TableGenerator.js",
      "lineno": 666,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012623",
        "name": "TableGenerator#limit",
        "type": "MethodDefinition",
        "paramnames": [
          "limitRecords"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "The number of rows to limit.\n\n10 : means ascending 10 records.\n\n-10 : means descending 10 records",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "0 for all records, + for ascending, - for descending",
        "name": "limitRecords"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable interface"
      }
    ],
    "name": "limit",
    "longname": "TableGenerator#limit",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19188,
        19214
      ],
      "filename": "TableGenerator.js",
      "lineno": 667,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012629",
        "name": "this.",
        "type": "Identifier",
        "value": "limitRecords",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Sets the alternative labels to be used for specific fields.\n   * \n   * single object with properties that should show a different label\\n\n   *  \n   * @example\n   * \n   * dataSet = [{source: 'A', temp: 99},\n   *    {source: 'B', temp: 98},\n   *    {source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * new TableGenerator(dataSet)\n   *  .lables({ temp: 'temperature})\n   *  .generateMarkdown();\n   * \n   * //--\n   * \n   * source | temperature\n   * ------ | -----------\n   * A      | 99\n   * B      | 98\n   * C      | 100\n   * \n   * @param {Object} labelsObj -\n   * @returns {TableGenerator} - chainable instance\n   */",
    "meta": {
      "range": [
        19904,
        19974
      ],
      "filename": "TableGenerator.js",
      "lineno": 699,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012637",
        "name": "TableGenerator#labels",
        "type": "MethodDefinition",
        "paramnames": [
          "labelsObj"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Sets the alternative labels to be used for specific fields.\n\nsingle object with properties that should show a different label\\n",
    "examples": [
      "dataSet = [{source: 'A', temp: 99},\n   {source: 'B', temp: 98},\n   {source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nnew TableGenerator(dataSet)\n .lables({ temp: 'temperature})\n .generateMarkdown();\n\n//--\n\nsource | temperature\n------ | -----------\nA      | 99\nB      | 98\nC      | 100"
    ],
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "-",
        "name": "labelsObj"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "labels",
    "longname": "TableGenerator#labels",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        19928,
        19952
      ],
      "filename": "TableGenerator.js",
      "lineno": 700,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012643",
        "name": "this.",
        "type": "Identifier",
        "value": "labelsObj",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Options to give to printOptions\n   * \n   * @example\n   * \n   * dataSet = [\n   *    {id: 1, dateTime:new Date(2022,3,2,9), child: { results: true }},\n   *    {id: 1, dateTime:new Date(2022,3,3,9), child: { results: false }},\n   *    {id: 1, dateTime:new Date(2022,3,4,9), child: { results: true }}\n   * ];\n   * \n   * console.log(utils.table(dataSet)\n   *     .generateMarkdown({align: true})\n   * )\n   * \n   * //--\n   * \n   * id|dateTime            |child            \n   * --|--                  |--               \n   * 1 |4/2/2022, 9:00:00 AM|{\"results\":true} \n   * 1 |4/3/2022, 9:00:00 AM|{\"results\":false}\n   * 1 |4/4/2022, 9:00:00 AM|{\"results\":true} \n   * \n   * dataSet = [\n   *    {id: 1, dateTime:new Date(2022,3,2,9), child: { results: true }},\n   *    {id: 1, dateTime:new Date(2022,3,3,9), child: { results: false }},\n   *    {id: 1, dateTime:new Date(2022,3,4,9), child: { results: true }}\n   * ];\n   * \n   * console.log(utils.table(dataSet)\n   *     .printOptions({ collapseObjects: true, dateFormat: 'toISOString'})\n   *     .generateMarkdown({align: true})\n   * )\n   * \n   * id|dateTime            |child          \n   * --|--                  |--             \n   * 1 |2022-04-02T14:00:00.000Z|[object Object]\n   * 1 |2022-04-03T14:00:00.000Z|[object Object]\n   * 1 |2022-04-04T14:00:00.000Z|[object Object]\n   * \n   * @param {any} value - the value to print\n   * @param {Object} options - collection of options\n   * @param {Boolean} options.collapseObjects - if true, typesof Object values are not expanded\n   * @param {String} options.dateFormat - ('LOCAL'|'LOCAL_DATE','LOCAL_TIME','GMT','ISO','UTC','NONE')\n   * \n   * @see module:format.printValue\n   * @returns {TableGenerator} - chainable instance\n   */",
    "meta": {
      "range": [
        21711,
        21789
      ],
      "filename": "TableGenerator.js",
      "lineno": 752,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012651",
        "name": "TableGenerator#printOptions",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Options to give to printOptions",
    "examples": [
      "dataSet = [\n   {id: 1, dateTime:new Date(2022,3,2,9), child: { results: true }},\n   {id: 1, dateTime:new Date(2022,3,3,9), child: { results: false }},\n   {id: 1, dateTime:new Date(2022,3,4,9), child: { results: true }}\n];\n\nconsole.log(utils.table(dataSet)\n    .generateMarkdown({align: true})\n)\n\n//--\n\nid|dateTime            |child            \n--|--                  |--               \n1 |4/2/2022, 9:00:00 AM|{\"results\":true} \n1 |4/3/2022, 9:00:00 AM|{\"results\":false}\n1 |4/4/2022, 9:00:00 AM|{\"results\":true} \n\ndataSet = [\n   {id: 1, dateTime:new Date(2022,3,2,9), child: { results: true }},\n   {id: 1, dateTime:new Date(2022,3,3,9), child: { results: false }},\n   {id: 1, dateTime:new Date(2022,3,4,9), child: { results: true }}\n];\n\nconsole.log(utils.table(dataSet)\n    .printOptions({ collapseObjects: true, dateFormat: 'toISOString'})\n    .generateMarkdown({align: true})\n)\n\nid|dateTime            |child          \n--|--                  |--             \n1 |2022-04-02T14:00:00.000Z|[object Object]\n1 |2022-04-03T14:00:00.000Z|[object Object]\n1 |2022-04-04T14:00:00.000Z|[object Object]"
    ],
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to print",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "collection of options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "if true, typesof Object values are not expanded",
        "name": "options.collapseObjects"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "('LOCAL'|'LOCAL_DATE','LOCAL_TIME','GMT','ISO','UTC','NONE')",
        "name": "options.dateFormat"
      }
    ],
    "see": [
      "module:format.printValue"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "printOptions",
    "longname": "TableGenerator#printOptions",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        21739,
        21767
      ],
      "filename": "TableGenerator.js",
      "lineno": 753,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012657",
        "name": "this.",
        "type": "Identifier",
        "value": "options",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Applies a [standard array sort function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n   * to the data.\n   * \n   * @param {Function} fn - optional sort function\n   * @returns {TableGenerator} - chainable instance\n   * @see module:array.createSort\n   **/",
    "meta": {
      "range": [
        22108,
        22164
      ],
      "filename": "TableGenerator.js",
      "lineno": 765,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012665",
        "name": "TableGenerator#sortFn",
        "type": "MethodDefinition",
        "paramnames": [
          "fn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Applies a [standard array sort function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\nto the data.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "optional sort function",
        "name": "fn"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "see": [
      "module:array.createSort"
    ],
    "name": "sortFn",
    "longname": "TableGenerator#sortFn",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22125,
        22142
      ],
      "filename": "TableGenerator.js",
      "lineno": 766,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012671",
        "name": "this.",
        "type": "Identifier",
        "value": "fn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Convenience function that creates a sort based on properties.\n   * \n   * Sorting always occurs left to right - sort('First', 'Second', etc.)\n   * \n   * NOTE: prefixing a field with `-` will sort it descending.\n   * \n   * @example\n   * \n   * ```\n   * sampleData = [{val: 3}, {val:1}, {val:2}];\n   * new TableGenerator(sampleData)\n   *  //-- sort ascending by the val property\n   *  .sort('val')\n   *  .render();\n   * ```\n   * \n   * @see module:array.createSort\n   */",
    "meta": {
      "range": [
        22645,
        22718
      ],
      "filename": "TableGenerator.js",
      "lineno": 789,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012679",
        "name": "TableGenerator#sort",
        "type": "MethodDefinition",
        "paramnames": [
          "rest"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Convenience function that creates a sort based on properties.\n\nSorting always occurs left to right - sort('First', 'Second', etc.)\n\nNOTE: prefixing a field with `-` will sort it descending.",
    "examples": [
      "```\nsampleData = [{val: 3}, {val:1}, {val:2}];\nnew TableGenerator(sampleData)\n //-- sort ascending by the val property\n .sort('val')\n .render();\n```"
    ],
    "see": [
      "module:array.createSort"
    ],
    "name": "sort",
    "longname": "TableGenerator#sort",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "/** \n   * Defines the style to render on the table\n   * \n   * **Note: this is only used on render / generateHTML currently**\n   * \n   * ```\n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *     {reg: 'z', source: 'B', temp: 98},\n   *     {reg: 'z', source:'A', temp: 100}\n   *  ];\n   *  \n   * //-- only show the temp and source columns\n   * utils.table(dataSet)\n   *   .columns('temp', 'source') // or .columns(['temp', 'source'])\n   *   .styleTable('border:1px solid #000')\n   *   .render();\n   * ```\n   * ![Screenshot of styling the table with a border on the outside](img/Table_StyleTable.png)\n   * \n   * @param {String} value - style to apply to the table\n   *    ex: `border: 1px solid black`\n   * @returns {TableGenerator} - chainable instance\n   **/",
    "meta": {
      "range": [
        23486,
        23556
      ],
      "filename": "TableGenerator.js",
      "lineno": 816,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012696",
        "name": "TableGenerator#styleTable",
        "type": "MethodDefinition",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Defines the style to render on the table\n\n**Note: this is only used on render / generateHTML currently**\n\n```\ndataSet = [{reg:'z', source: 'A', temp: 99},\n    {reg: 'z', source: 'B', temp: 98},\n    {reg: 'z', source:'A', temp: 100}\n ];\n \n//-- only show the temp and source columns\nutils.table(dataSet)\n  .columns('temp', 'source') // or .columns(['temp', 'source'])\n  .styleTable('border:1px solid #000')\n  .render();\n```\n![Screenshot of styling the table with a border on the outside](img/Table_StyleTable.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "style to apply to the table\n   ex: `border: 1px solid black`",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "styleTable",
    "longname": "TableGenerator#styleTable",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        23510,
        23534
      ],
      "filename": "TableGenerator.js",
      "lineno": 817,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012702",
        "name": "this.",
        "type": "Identifier",
        "value": "value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/** \n   * Override the styles for the the header row\n   * \n   * **Note: this is only used on render / generateHTML currently**\n   * \n   * ```\n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *     {reg: 'z', source: 'B', temp: 98},\n   *     {reg: 'z', source:'A', temp: 100}\n   *  ];\n   *  \n   * //-- only show the temp and source columns\n   * utils.table(dataSet)\n   *   .columns('temp', 'source') // or .columns(['temp', 'source'])\n   *   .styleHeader('border: 1px solid #000;')\n   *   .render();\n   * ```\n   * ![Screenshot of styling the table with a border on the header](img/Table_StyleHeader.png)\n   * \n   * @param {String} value - style to apply to the table\n   *    ex: `font-weight: bold`\n   * @returns {TableGenerator} - chainable instance\n   **/",
    "meta": {
      "range": [
        24323,
        24395
      ],
      "filename": "TableGenerator.js",
      "lineno": 844,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012710",
        "name": "TableGenerator#styleHeader",
        "type": "MethodDefinition",
        "paramnames": [
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Override the styles for the the header row\n\n**Note: this is only used on render / generateHTML currently**\n\n```\ndataSet = [{reg:'z', source: 'A', temp: 99},\n    {reg: 'z', source: 'B', temp: 98},\n    {reg: 'z', source:'A', temp: 100}\n ];\n \n//-- only show the temp and source columns\nutils.table(dataSet)\n  .columns('temp', 'source') // or .columns(['temp', 'source'])\n  .styleHeader('border: 1px solid #000;')\n  .render();\n```\n![Screenshot of styling the table with a border on the header](img/Table_StyleHeader.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "style to apply to the table\n   ex: `font-weight: bold`",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "styleHeader",
    "longname": "TableGenerator#styleHeader",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        24348,
        24373
      ],
      "filename": "TableGenerator.js",
      "lineno": 845,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012716",
        "name": "this.",
        "type": "Identifier",
        "value": "value",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Function that can apply a style to a given row\n   * \n   * (rowIndex, row, record) => string\n   * \n   * ```\n   * dataSet = [{reg:'z', source: 'A', temp: 10},\n   *   {reg: 'z', source: 'B', temp: 98},\n   *   {reg: 'z', source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * utils.table(dataSet)\n   *   .columns('temp', 'source') // or .columns(['temp', 'source'])\n   *   .styleRow(({rowIndex, row, record}) => {\n   *     return (record.source === 'A') ? `color: #0A0;` : `color: #A00`;\n   *   })\n   *   .render();\n   * ```\n   * ![Screenshot of styling a row](img/Table_StyleRow.png)\n   * \n   * @param {function(*):any} styleFn - Translation function to apply to all cells.\n   * \n   * When it runs, you will receive a single parameter representing the current cell and row.\n   * \n   * Return what the new value should be.\n   * @param {Number} styleFn.rowIndex - destructured 0 index row of the cell\n   * @param {Array}  styleFn.row - destructured full row provided\n   * @param {Array}  styleFn.record - destructured original record\n   * @returns {TableGenerator} - chainable instance\n   */",
    "meta": {
      "range": [
        25532,
        25602
      ],
      "filename": "TableGenerator.js",
      "lineno": 880,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012724",
        "name": "TableGenerator#styleRow",
        "type": "MethodDefinition",
        "paramnames": [
          "styleFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Function that can apply a style to a given row\n\n(rowIndex, row, record) => string\n\n```\ndataSet = [{reg:'z', source: 'A', temp: 10},\n  {reg: 'z', source: 'B', temp: 98},\n  {reg: 'z', source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nutils.table(dataSet)\n  .columns('temp', 'source') // or .columns(['temp', 'source'])\n  .styleRow(({rowIndex, row, record}) => {\n    return (record.source === 'A') ? `color: #0A0;` : `color: #A00`;\n  })\n  .render();\n```\n![Screenshot of styling a row](img/Table_StyleRow.png)",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Translation function to apply to all cells.\n\nWhen it runs, you will receive a single parameter representing the current cell and row.\n\nReturn what the new value should be.",
        "name": "styleFn"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "destructured 0 index row of the cell",
        "name": "styleFn.rowIndex"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "destructured full row provided",
        "name": "styleFn.row"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "destructured original record",
        "name": "styleFn.record"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        },
        "description": "- chainable instance"
      }
    ],
    "name": "styleRow",
    "longname": "TableGenerator#styleRow",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        25556,
        25580
      ],
      "filename": "TableGenerator.js",
      "lineno": 881,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012730",
        "name": "this.",
        "type": "Identifier",
        "value": "styleFn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Function that can apply a style to a given cell\n   * \n   * (value, columnIndex, rowIndex, row, record) => string\n   * \n   * ```\n   * dataSet = [\n   *  { title:'row 0', a: 0.608, b: 0.351, c: 0.823, d: 0.206, e: 0.539 },\n   *  { title:'row 1', a: 0.599, b: 0.182, c: 0.197, d: 0.352, e: 0.338 },\n   *  { title:'row 2', a: 0.275, b: 0.715, c: 0.304, d: 0.482, e: 0.248 },\n   *  { title:'row 3', a: 0.974, b: 0.287, c: 0.323, d: 0.875, e: 0.017 },\n   *  { title:'row 4', a: 0.491, b: 0.479, c: 0.428, d: 0.252, e: 0.288 }\n   * ];\n   * \n   * // color range from Green to Red\n   * colorRange = new utils.svg.svgJS.Color('#0A0').to('#F00');\n   * \n   * //-- only show the temp and source columns\n   * utils.table(dataSet)\n   *   .styleCell(({value, columnIndex, rowIndex, row, record}) => {\n   *     //-- style the color of the cell from Red:0 to Green:1\n   *     // record is the exact record provided to data / the generator\n   *     // row is the array provided to the renderer (which may be re-arranged)\n   *     //   with rowIndex and Column index also relative to the final array\n   *     if (columnIndex >= 1) {\n   *       return `color: ${colorRange.at(value).toHex()}`;\n   *     }\n   *   })\n   *   .render();\n   * ```\n   * ![Screenshot of styling the cell](img/Table_StyleCell.png)\n   * \n   * @param {function(*):any} formatterFn - Translation function to apply to all cells.\n   * \n   * When it runs, you will receive a single parameter representing the current cell and row.\n   * \n   * Return what the new value should be.\n   * @param {any}    formatterFn.value - destructured value of the cell\n   * @param {Number} formatterFn.columnIndex - destructured 0 index column of the cell\n   * @param {Number} formatterFn.rowIndex - destructured 0 index row of the cell\n   * @param {Array}  formatterFn.row - destructured full row provided\n   * @param {Array}  formatterFn.record - destructured original record\n   * @returns {TableGenerator}\n   */",
    "meta": {
      "range": [
        27561,
        27633
      ],
      "filename": "TableGenerator.js",
      "lineno": 929,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012738",
        "name": "TableGenerator#styleCell",
        "type": "MethodDefinition",
        "paramnames": [
          "styleFn"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Function that can apply a style to a given cell\n\n(value, columnIndex, rowIndex, row, record) => string\n\n```\ndataSet = [\n { title:'row 0', a: 0.608, b: 0.351, c: 0.823, d: 0.206, e: 0.539 },\n { title:'row 1', a: 0.599, b: 0.182, c: 0.197, d: 0.352, e: 0.338 },\n { title:'row 2', a: 0.275, b: 0.715, c: 0.304, d: 0.482, e: 0.248 },\n { title:'row 3', a: 0.974, b: 0.287, c: 0.323, d: 0.875, e: 0.017 },\n { title:'row 4', a: 0.491, b: 0.479, c: 0.428, d: 0.252, e: 0.288 }\n];\n\n// color range from Green to Red\ncolorRange = new utils.svg.svgJS.Color('#0A0').to('#F00');\n\n//-- only show the temp and source columns\nutils.table(dataSet)\n  .styleCell(({value, columnIndex, rowIndex, row, record}) => {\n    //-- style the color of the cell from Red:0 to Green:1\n    // record is the exact record provided to data / the generator\n    // row is the array provided to the renderer (which may be re-arranged)\n    //   with rowIndex and Column index also relative to the final array\n    if (columnIndex >= 1) {\n      return `color: ${colorRange.at(value).toHex()}`;\n    }\n  })\n  .render();\n```\n![Screenshot of styling the cell](img/Table_StyleCell.png)",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Translation function to apply to all cells.\n\nWhen it runs, you will receive a single parameter representing the current cell and row.\n\nReturn what the new value should be.",
        "name": "formatterFn"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "destructured value of the cell",
        "name": "formatterFn.value"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "destructured 0 index column of the cell",
        "name": "formatterFn.columnIndex"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "destructured 0 index row of the cell",
        "name": "formatterFn.rowIndex"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "destructured full row provided",
        "name": "formatterFn.row"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "destructured original record",
        "name": "formatterFn.record"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        }
      }
    ],
    "name": "styleCell",
    "longname": "TableGenerator#styleCell",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27586,
        27611
      ],
      "filename": "TableGenerator.js",
      "lineno": 930,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012744",
        "name": "this.",
        "type": "Identifier",
        "value": "styleFn",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Transposes (flips along the diagonal) prior to output.\n   * \n   * This can be very handy for wide, but short, tables.\n   * \n   * For example, given the data:\n   * \n   * ```\n   * const data = [\n   *   { name: 'John', color: 'green', age: 23, hair: 'blond', state: 'IL' },\n   *   { name: 'Jane', color: 'brown', age: 23, hair: 'blonde', state: 'IL' }\n   * ];\n   * ```\n   * \n   * Running normally would give\n   * \n   * ```\n   * utils.table(data)\n   *    .generateMarkdown();\n   * ```\n   * \n   * name|color|age|hair  |state\n   * --  |--   |-- |--    |--\n   * John|green|23 |blond |IL\n   * Jane|brown|23 |blonde|IL\n   * \n   * Running that transposed flips it.\n   * \n   * ```\n   * utils.table(data)\n   *  .transpose()\n   *  .generateMarkdown();\n   * ```\n   * \n   * name |John |Jane\n   * --   |--   |--\n   * color|green|brown\n   * age  |23   |23\n   * hair |blond|blonde\n   * state|IL   |IL\n   * @returns {TableGenerator}\n   */",
    "meta": {
      "range": [
        28568,
        28633
      ],
      "filename": "TableGenerator.js",
      "lineno": 976,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012752",
        "name": "TableGenerator#transpose",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Transposes (flips along the diagonal) prior to output.\n\nThis can be very handy for wide, but short, tables.\n\nFor example, given the data:\n\n```\nconst data = [\n  { name: 'John', color: 'green', age: 23, hair: 'blond', state: 'IL' },\n  { name: 'Jane', color: 'brown', age: 23, hair: 'blonde', state: 'IL' }\n];\n```\n\nRunning normally would give\n\n```\nutils.table(data)\n   .generateMarkdown();\n```\n\nname|color|age|hair  |state\n--  |--   |-- |--    |--\nJohn|green|23 |blond |IL\nJane|brown|23 |blonde|IL\n\nRunning that transposed flips it.\n\n```\nutils.table(data)\n .transpose()\n .generateMarkdown();\n```\n\nname |John |Jane\n--   |--   |--\ncolor|green|brown\nage  |23   |23\nhair |blond|blonde\nstate|IL   |IL",
    "returns": [
      {
        "type": {
          "names": [
            "TableGenerator"
          ]
        }
      }
    ],
    "name": "transpose",
    "longname": "TableGenerator#transpose",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28586,
        28611
      ],
      "filename": "TableGenerator.js",
      "lineno": 977,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012757",
        "name": "this.",
        "type": "Literal",
        "value": true,
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "TableGenerator",
    "longname": "TableGenerator.TableGenerator",
    "kind": "member",
    "memberof": "TableGenerator",
    "scope": "static"
  },
  {
    "comment": "/**\n   * Prepares the data prior to any rendering.\n   * @returns {TableData} -\n   * @private\n   */",
    "meta": {
      "range": [
        28763,
        30585
      ],
      "filename": "TableGenerator.js",
      "lineno": 988,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012765",
        "name": "TableGenerator#prepare",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Prepares the data prior to any rendering.",
    "returns": [
      {
        "type": {
          "names": [
            "TableData"
          ]
        },
        "description": "-"
      }
    ],
    "access": "private",
    "name": "prepare",
    "longname": "TableGenerator#prepare",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28885,
        28919
      ],
      "filename": "TableGenerator.js",
      "lineno": 991,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012770",
        "name": "cleanCollection",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "<anonymous>~cleanCollection",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        28951,
        29003
      ],
      "filename": "TableGenerator.js",
      "lineno": 993,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012785",
        "name": "cleanCollection",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "<anonymous>~cleanCollection",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29062,
        29116
      ],
      "filename": "TableGenerator.js",
      "lineno": 998,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012802",
        "name": "cleanCollection",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "<anonymous>~cleanCollection",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29173,
        29229
      ],
      "filename": "TableGenerator.js",
      "lineno": 1003,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012819",
        "name": "cleanCollection",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "cleanCollection",
    "longname": "<anonymous>~cleanCollection",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29284,
        29341
      ],
      "filename": "TableGenerator.js",
      "lineno": 1007,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012830",
        "name": "keys",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "keys",
    "longname": "<anonymous>~keys",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29372,
        29443
      ],
      "filename": "TableGenerator.js",
      "lineno": 1008,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012843",
        "name": "keys",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "keys",
    "longname": "<anonymous>~keys",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29495,
        29572
      ],
      "filename": "TableGenerator.js",
      "lineno": 1011,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012863",
        "name": "cleanFormatter",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanFormatter",
    "longname": "<anonymous>~cleanFormatter",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29555,
        29560
      ],
      "filename": "TableGenerator.js",
      "lineno": 1011,
      "columnno": 70,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012876",
        "name": "value",
        "type": "Identifier",
        "value": "value"
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "value",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29585,
        29748
      ],
      "filename": "TableGenerator.js",
      "lineno": 1013,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012880",
        "name": "translateHeader",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "translateHeader",
    "longname": "<anonymous>~translateHeader",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29761,
        30000
      ],
      "filename": "TableGenerator.js",
      "lineno": 1020,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012910",
        "name": "translateData",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "translateData",
    "longname": "<anonymous>~translateData",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29873,
        29902
      ],
      "filename": "TableGenerator.js",
      "lineno": 1023,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012925",
        "name": "value",
        "type": "MemberExpression",
        "value": "row[undefined]"
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "value",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29914,
        29925
      ],
      "filename": "TableGenerator.js",
      "lineno": 1024,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012931",
        "name": "columnIndex",
        "type": "Identifier",
        "value": "columnIndex"
      }
    },
    "undocumented": true,
    "name": "columnIndex",
    "longname": "columnIndex",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29937,
        29945
      ],
      "filename": "TableGenerator.js",
      "lineno": 1025,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012933",
        "name": "property",
        "type": "Identifier",
        "value": "property"
      }
    },
    "undocumented": true,
    "name": "property",
    "longname": "property",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29957,
        29965
      ],
      "filename": "TableGenerator.js",
      "lineno": 1026,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012935",
        "name": "rowIndex",
        "type": "Identifier",
        "value": "rowIndex"
      }
    },
    "undocumented": true,
    "name": "rowIndex",
    "longname": "rowIndex",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        29977,
        29988
      ],
      "filename": "TableGenerator.js",
      "lineno": 1027,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012937",
        "name": "record",
        "type": "Identifier",
        "value": "row"
      }
    },
    "undocumented": true,
    "name": "record",
    "longname": "record",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30011,
        30046
      ],
      "filename": "TableGenerator.js",
      "lineno": 1030,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012940",
        "name": "headers",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "headers",
    "longname": "<anonymous>~headers",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30056,
        30097
      ],
      "filename": "TableGenerator.js",
      "lineno": 1031,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012948",
        "name": "data",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30133,
        30177
      ],
      "filename": "TableGenerator.js",
      "lineno": 1034,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012964",
        "name": "data",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30219,
        30252
      ],
      "filename": "TableGenerator.js",
      "lineno": 1036,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100012988",
        "name": "data",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30301,
        30339
      ],
      "filename": "TableGenerator.js",
      "lineno": 1040,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013006",
        "name": "transposedResults",
        "type": "ArrayExpression",
        "value": "[\"headers\",\"\"]"
      }
    },
    "undocumented": true,
    "name": "transposedResults",
    "longname": "<anonymous>~transposedResults",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30347,
        30406
      ],
      "filename": "TableGenerator.js",
      "lineno": 1041,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013013",
        "name": "transposedResults",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "transposedResults",
    "longname": "<anonymous>~transposedResults",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30470,
        30500
      ],
      "filename": "TableGenerator.js",
      "lineno": 1044,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013021",
        "name": "headers",
        "type": "MemberExpression",
        "funcscope": "<anonymous>",
        "value": "transposedResults[0]",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "headers",
    "longname": "<anonymous>~headers",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30508,
        30541
      ],
      "filename": "TableGenerator.js",
      "lineno": 1045,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013027",
        "name": "data",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30564,
        30571
      ],
      "filename": "TableGenerator.js",
      "lineno": 1048,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013036",
        "name": "headers",
        "type": "Identifier",
        "value": "headers"
      }
    },
    "undocumented": true,
    "name": "headers",
    "longname": "headers",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30573,
        30577
      ],
      "filename": "TableGenerator.js",
      "lineno": 1048,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013038",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "/**\n   * Generates an html table\n   * @returns {string}\n   * @see {@link TableGenerator#render}\n   */",
    "meta": {
      "range": [
        30693,
        32872
      ],
      "filename": "TableGenerator.js",
      "lineno": 1056,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013040",
        "name": "TableGenerator#generateHTML",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates an html table",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "see": [
      "{@link TableGenerator#render}"
    ],
    "name": "generateHTML",
    "longname": "TableGenerator#generateHTML",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30720,
        30744
      ],
      "filename": "TableGenerator.js",
      "lineno": 1057,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013045",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30824,
        30853
      ],
      "filename": "TableGenerator.js",
      "lineno": 1061,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013052",
        "name": "styleTable",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "styleTable",
    "longname": "<anonymous>~styleTable",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30865,
        30896
      ],
      "filename": "TableGenerator.js",
      "lineno": 1062,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013059",
        "name": "styleHeader",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "styleHeader",
    "longname": "<anonymous>~styleHeader",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30908,
        30935
      ],
      "filename": "TableGenerator.js",
      "lineno": 1063,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013066",
        "name": "styleRowFn",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "styleRowFn",
    "longname": "<anonymous>~styleRowFn",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30947,
        30976
      ],
      "filename": "TableGenerator.js",
      "lineno": 1064,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013073",
        "name": "styleCellFn",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "styleCellFn",
    "longname": "<anonymous>~styleCellFn",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30988,
        31021
      ],
      "filename": "TableGenerator.js",
      "lineno": 1065,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013080",
        "name": "printOptions",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "printOptions",
    "longname": "<anonymous>~printOptions",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31033,
        31060
      ],
      "filename": "TableGenerator.js",
      "lineno": 1066,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013087",
        "name": "borderCSS",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "borderCSS",
    "longname": "<anonymous>~borderCSS",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31077,
        31097
      ],
      "filename": "TableGenerator.js",
      "lineno": 1068,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013094",
        "name": "cleanFn",
        "type": "Identifier",
        "value": "printValue"
      }
    },
    "undocumented": true,
    "name": "cleanFn",
    "longname": "<anonymous>~cleanFn",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31110,
        31319
      ],
      "filename": "TableGenerator.js",
      "lineno": 1070,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013098",
        "name": "printHeader",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "printHeader",
    "longname": "<anonymous>~printHeader",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31401,
        31834
      ],
      "filename": "TableGenerator.js",
      "lineno": 1078,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013133",
        "name": "printInlineCSS",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "cleanCSS": "<anonymous>~printInlineCSS~cleanCSS",
        "": null,
        "cssContents": "<anonymous>~printInlineCSS~cssContents"
      }
    },
    "undocumented": true,
    "name": "printInlineCSS",
    "longname": "<anonymous>~printInlineCSS",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31450,
        31519
      ],
      "filename": "TableGenerator.js",
      "lineno": 1079,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013140",
        "name": "cleanCSS",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanCSS",
    "longname": "<anonymous>~printInlineCSS~cleanCSS",
    "kind": "constant",
    "memberof": "<anonymous>~printInlineCSS",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31635,
        31781
      ],
      "filename": "TableGenerator.js",
      "lineno": 1087,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013162",
        "name": "cssContents",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cssContents",
    "longname": "<anonymous>~printInlineCSS~cssContents",
    "kind": "constant",
    "memberof": "<anonymous>~printInlineCSS",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31847,
        32658
      ],
      "filename": "TableGenerator.js",
      "lineno": 1095,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013200",
        "name": "printBody",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "printBody",
    "longname": "<anonymous>~printBody",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31936,
        31965
      ],
      "filename": "TableGenerator.js",
      "lineno": 1097,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013215",
        "name": "record",
        "type": "MemberExpression",
        "value": "this.[undefined]"
      }
    },
    "undocumented": true,
    "name": "record",
    "longname": "<anonymous>~record",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        31981,
        32065
      ],
      "filename": "TableGenerator.js",
      "lineno": 1098,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013224",
        "name": "rowStyle",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "rowStyle",
    "longname": "<anonymous>~rowStyle",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32026,
        32034
      ],
      "filename": "TableGenerator.js",
      "lineno": 1098,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013234",
        "name": "rowIndex",
        "type": "Identifier",
        "value": "rowIndex"
      }
    },
    "undocumented": true,
    "name": "rowIndex",
    "longname": "rowIndex",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32036,
        32048
      ],
      "filename": "TableGenerator.js",
      "lineno": 1098,
      "columnno": 69,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013236",
        "name": "row",
        "type": "Identifier",
        "value": "dataRow"
      }
    },
    "undocumented": true,
    "name": "row",
    "longname": "row",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32050,
        32056
      ],
      "filename": "TableGenerator.js",
      "lineno": 1098,
      "columnno": 83,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013238",
        "name": "record",
        "type": "Identifier",
        "value": "record"
      }
    },
    "undocumented": true,
    "name": "record",
    "longname": "record",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32226,
        32325
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 18,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013261",
        "name": "cellStyle",
        "type": "ConditionalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cellStyle",
    "longname": "<anonymous>~cellStyle",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32272,
        32277
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 64,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013270",
        "name": "value",
        "type": "Identifier",
        "value": "value"
      }
    },
    "undocumented": true,
    "name": "value",
    "longname": "value",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32279,
        32290
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 71,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013272",
        "name": "columnIndex",
        "type": "Identifier",
        "value": "columnIndex"
      }
    },
    "undocumented": true,
    "name": "columnIndex",
    "longname": "columnIndex",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32292,
        32300
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 84,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013274",
        "name": "rowIndex",
        "type": "Identifier",
        "value": "rowIndex"
      }
    },
    "undocumented": true,
    "name": "rowIndex",
    "longname": "rowIndex",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32302,
        32314
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 94,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013276",
        "name": "row",
        "type": "Identifier",
        "value": "dataRow"
      }
    },
    "undocumented": true,
    "name": "row",
    "longname": "row",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32316,
        32322
      ],
      "filename": "TableGenerator.js",
      "lineno": 1103,
      "columnno": 108,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013278",
        "name": "record",
        "type": "Identifier",
        "value": "record"
      }
    },
    "undocumented": true,
    "name": "record",
    "longname": "record",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32675,
        32841
      ],
      "filename": "TableGenerator.js",
      "lineno": 1118,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013299",
        "name": "tableResults",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "tableResults",
    "longname": "<anonymous>~tableResults",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Generates a markdown table\n   * @returns {string}\n   * @see {@link TableGenerator#renderMarkdown}\n   */",
    "meta": {
      "range": [
        32991,
        34596
      ],
      "filename": "TableGenerator.js",
      "lineno": 1131,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013324",
        "name": "TableGenerator#generateMarkdown",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates a markdown table",
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "see": [
      "{@link TableGenerator#renderMarkdown}"
    ],
    "name": "generateMarkdown",
    "longname": "TableGenerator#generateMarkdown",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33037,
        33049
      ],
      "filename": "TableGenerator.js",
      "lineno": 1133,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013332",
        "name": "align",
        "type": "AssignmentPattern",
        "value": "align"
      }
    },
    "undocumented": true,
    "name": "align",
    "longname": "align",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33172,
        33205
      ],
      "filename": "TableGenerator.js",
      "lineno": 1139,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013340",
        "name": "printOptions",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "printOptions",
    "longname": "<anonymous>~printOptions",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33217,
        33237
      ],
      "filename": "TableGenerator.js",
      "lineno": 1140,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013347",
        "name": "cleanFn",
        "type": "Identifier",
        "value": "printValue"
      }
    },
    "undocumented": true,
    "name": "cleanFn",
    "longname": "<anonymous>~cleanFn",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33295,
        33302
      ],
      "filename": "TableGenerator.js",
      "lineno": 1143,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013353",
        "name": "headers",
        "type": "Identifier",
        "value": "headers"
      }
    },
    "undocumented": true,
    "name": "headers",
    "longname": "headers",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33304,
        33308
      ],
      "filename": "TableGenerator.js",
      "lineno": 1143,
      "columnno": 19,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013355",
        "name": "data",
        "type": "Identifier",
        "value": "data"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "data",
    "kind": "member",
    "scope": "global"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33468,
        33513
      ],
      "filename": "TableGenerator.js",
      "lineno": 1149,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013380",
        "name": "maxWidths",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "maxWidths",
    "longname": "<anonymous>~maxWidths",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33519,
        34238
      ],
      "filename": "TableGenerator.js",
      "lineno": 1150,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013394",
        "name": "data",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        33662,
        33705
      ],
      "filename": "TableGenerator.js",
      "lineno": 1153,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013412",
        "name": "cleanedValue",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanedValue",
    "longname": "<anonymous>~cleanedValue",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34043,
        34073
      ],
      "filename": "TableGenerator.js",
      "lineno": 1162,
      "columnno": 16,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013422",
        "name": "valueLen",
        "type": "MemberExpression",
        "value": "cleanedValue.length"
      }
    },
    "undocumented": true,
    "name": "valueLen",
    "longname": "<anonymous>~valueLen",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34138,
        34171
      ],
      "filename": "TableGenerator.js",
      "lineno": 1164,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013435",
        "name": "maxWidths[undefined]",
        "type": "Identifier",
        "funcscope": "<anonymous>",
        "value": "valueLen",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "undefined]",
    "longname": "<anonymous>~maxWidths.undefined]",
    "kind": "member",
    "memberof": "<anonymous>~maxWidths",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34342,
        34477
      ],
      "filename": "TableGenerator.js",
      "lineno": 1174,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013446",
        "name": "data",
        "type": "CallExpression",
        "funcscope": "<anonymous>",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "<anonymous>~data",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34496,
        34565
      ],
      "filename": "TableGenerator.js",
      "lineno": 1180,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013471",
        "name": "tableResults",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "tableResults",
    "longname": "<anonymous>~tableResults",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Generates a CSV Table\n   * @see {@link TableGenerator#renderCSV}\n   */",
    "meta": {
      "range": [
        34682,
        35313
      ],
      "filename": "TableGenerator.js",
      "lineno": 1191,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013490",
        "name": "TableGenerator#generateCSV",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates a CSV Table",
    "see": [
      "{@link TableGenerator#renderCSV}"
    ],
    "name": "generateCSV",
    "longname": "TableGenerator#generateCSV",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34708,
        34732
      ],
      "filename": "TableGenerator.js",
      "lineno": 1192,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013495",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34745,
        34778
      ],
      "filename": "TableGenerator.js",
      "lineno": 1194,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013502",
        "name": "printOptions",
        "type": "MemberExpression",
        "value": "this."
      }
    },
    "undocumented": true,
    "name": "printOptions",
    "longname": "<anonymous>~printOptions",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34795,
        34815
      ],
      "filename": "TableGenerator.js",
      "lineno": 1196,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013509",
        "name": "cleanFn",
        "type": "Identifier",
        "value": "printValue"
      }
    },
    "undocumented": true,
    "name": "cleanFn",
    "longname": "<anonymous>~cleanFn",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34827,
        34896
      ],
      "filename": "TableGenerator.js",
      "lineno": 1197,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013513",
        "name": "csvify",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "csvify",
    "longname": "<anonymous>~csvify",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34909,
        34971
      ],
      "filename": "TableGenerator.js",
      "lineno": 1201,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013533",
        "name": "printHeader",
        "type": "ArrowFunctionExpression"
      }
    },
    "undocumented": true,
    "name": "printHeader",
    "longname": "<anonymous>~printHeader",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        34984,
        35186
      ],
      "filename": "TableGenerator.js",
      "lineno": 1204,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013544",
        "name": "printBody",
        "type": "ArrowFunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "printBody",
    "longname": "<anonymous>~printBody",
    "kind": "function",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        35203,
        35282
      ],
      "filename": "TableGenerator.js",
      "lineno": 1211,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013575",
        "name": "tableResults",
        "type": "BinaryExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "tableResults",
    "longname": "<anonymous>~tableResults",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * @typedef {Object} TableArray\n   * @property {String} headers -\n   * @property {any[][]} data -\n   */",
    "meta": {
      "filename": "TableGenerator.js",
      "lineno": 1217,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "kind": "typedef",
    "name": "TableArray",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "-",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "Array.<Array.<any>>"
          ]
        },
        "description": "-",
        "name": "data"
      }
    ],
    "longname": "TableArray",
    "scope": "global"
  },
  {
    "comment": "/**\n   * Generates an a result set to allow for further processing\n   * \n   * @see {@link TableGenerator#generateArray2|generateArray2()}\n   * @returns {TableArray}\n   * @example\n   * \n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *    {reg: 'z', source: 'B', temp: 98},\n   *    {reg: 'z', source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * new TableGenerator(dataSet)\n   *  .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n   *  .generateArray();\n   * \n   * //--\n   * \n   * {\n   *   headers: ['source', 'temp'],\n   *   data: [\n   *     ['A', 99],\n   *     ['B', 98],\n   *     ['A', 100],\n   *   ]\n   * }\n   */",
    "meta": {
      "range": [
        36098,
        36201
      ],
      "filename": "TableGenerator.js",
      "lineno": 1251,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013591",
        "name": "TableGenerator#generateArray",
        "type": "MethodDefinition",
        "paramnames": [
          "returnUnifiedArray"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates an a result set to allow for further processing",
    "see": [
      "{@link TableGenerator#generateArray2|generateArray2()}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "TableArray"
          ]
        }
      }
    ],
    "examples": [
      "dataSet = [{reg:'z', source: 'A', temp: 99},\n   {reg: 'z', source: 'B', temp: 98},\n   {reg: 'z', source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nnew TableGenerator(dataSet)\n .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n .generateArray();\n\n//--\n\n{\n  headers: ['source', 'temp'],\n  data: [\n    ['A', 99],\n    ['B', 98],\n    ['A', 100],\n  ]\n}"
    ],
    "name": "generateArray",
    "longname": "TableGenerator#generateArray",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        36152,
        36176
      ],
      "filename": "TableGenerator.js",
      "lineno": 1252,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013599",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Generates an array of objects in a 2d Array\n   * \n   * NOTE: this can be helpful for needing to transpose results\n   * \n   * @returns {any[][]} - 2d array with both headers and data included\n   * @see {@link TableGenerator#generateArray|generateArray()}\n   * @example\n   * \n   * dataSet = [{reg:'z', source: 'A', temp: 99},\n   *    {reg: 'z', source: 'B', temp: 98},\n   *    {reg: 'z', source:'A', temp: 100}\n   * ];\n   * \n   * //-- only show the temp and source columns\n   * new TableGenerator(dataSet)\n   *  .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n   *  .generateArray2();\n   * \n   * //--\n   * [\n   *  ['source', 'temp'],\n   *  ['A', 99],\n   *  ['B', 98],\n   *  ['A', 100],\n   * ];\n   */",
    "meta": {
      "range": [
        36924,
        37034
      ],
      "filename": "TableGenerator.js",
      "lineno": 1283,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013607",
        "name": "TableGenerator#generateArray2",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Generates an array of objects in a 2d Array\n\nNOTE: this can be helpful for needing to transpose results",
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Array.<any>>"
          ]
        },
        "description": "- 2d array with both headers and data included"
      }
    ],
    "see": [
      "{@link TableGenerator#generateArray|generateArray()}"
    ],
    "examples": [
      "dataSet = [{reg:'z', source: 'A', temp: 99},\n   {reg: 'z', source: 'B', temp: 98},\n   {reg: 'z', source:'A', temp: 100}\n];\n\n//-- only show the temp and source columns\nnew TableGenerator(dataSet)\n .columnsToExclude('reg') // or .columnsToExclude(['reg'])\n .generateArray2();\n\n//--\n[\n ['source', 'temp'],\n ['A', 99],\n ['B', 98],\n ['A', 100],\n];"
    ],
    "name": "generateArray2",
    "longname": "TableGenerator#generateArray2",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        36953,
        36977
      ],
      "filename": "TableGenerator.js",
      "lineno": 1284,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013612",
        "name": "results",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "results",
    "longname": "<anonymous>~results",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Renders the html table in the cell results.\n   * \n   * ```\n   * weather = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n   *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n   *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n   *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n   *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n   * ];\n   * utils.table(weather)\n   *     .render();\n   * ```\n   * \n   * ![Screenshot of Table](img/tableGeneratorRender.png)\n   * \n   * @see {@link TableGenerator#generateHTML}\n   */",
    "meta": {
      "range": [
        37885,
        38083
      ],
      "filename": "TableGenerator.js",
      "lineno": 1311,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013629",
        "name": "TableGenerator#render",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Renders the html table in the cell results.\n\n```\nweather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.table(weather)\n    .render();\n```\n\n![Screenshot of Table](img/tableGeneratorRender.png)",
    "see": [
      "{@link TableGenerator#generateHTML}"
    ],
    "name": "render",
    "longname": "TableGenerator#render",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        37906,
        37940
      ],
      "filename": "TableGenerator.js",
      "lineno": 1312,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013634",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "<anonymous>~context",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Renders Markdown in the cell results.\n   * \n   * Used quite frequently in making the documentation used here.\n   * \n   * @see {@link TableGenerator#generateMarkdown}\n   * @example\n   * weather = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n   *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n   *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n   *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n   *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n   * ];\n   * utils.table(weather)\n   *     .renderMarkdown();\n   * \n   * // id|city    |month|precip\n   * // --|--      |--   |--    \n   * // 1 |Seattle |Aug  |0.87  \n   * // 0 |Seattle |Apr  |2.68  \n   * // 2 |Seattle |Dec  |5.31  \n   * // 3 |New York|Apr  |3.94  \n   * // 4 |New York|Aug  |4.13  \n   * // 5 |New York|Dec  |3.58  \n   * // 6 |Chicago |Apr  |3.62  \n   * // 8 |Chicago |Dec  |2.56  \n   * // 7 |Chicago |Aug  |3.98\n   */",
    "meta": {
      "range": [
        39305,
        39519
      ],
      "filename": "TableGenerator.js",
      "lineno": 1353,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013659",
        "name": "TableGenerator#renderMarkdown",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Renders Markdown in the cell results.\n\nUsed quite frequently in making the documentation used here.",
    "see": [
      "{@link TableGenerator#generateMarkdown}"
    ],
    "examples": [
      "weather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.table(weather)\n    .renderMarkdown();\n\n// id|city    |month|precip\n// --|--      |--   |--    \n// 1 |Seattle |Aug  |0.87  \n// 0 |Seattle |Apr  |2.68  \n// 2 |Seattle |Dec  |5.31  \n// 3 |New York|Apr  |3.94  \n// 4 |New York|Aug  |4.13  \n// 5 |New York|Dec  |3.58  \n// 6 |Chicago |Apr  |3.62  \n// 8 |Chicago |Dec  |2.56  \n// 7 |Chicago |Aug  |3.98"
    ],
    "name": "renderMarkdown",
    "longname": "TableGenerator#renderMarkdown",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        39334,
        39368
      ],
      "filename": "TableGenerator.js",
      "lineno": 1354,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013664",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "<anonymous>~context",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n   * Renders Markdown in the cell results\n   * @see {@link TableGenerator#generateCSV}\n   * @example\n   * weather = [\n   *   { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n   *   { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n   *   { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n   *   { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n   *   { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n   *   { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n   *   { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n   *   { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n   *   { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n   * ];\n   * utils.table(weather)\n   *     .renderCSV();\n   * \n   * // \"id\",\"city\",\"month\",\"precip\"\n   * // \"1\",\"Seattle\",\"Aug\",\"0.87\"\n   * // \"0\",\"Seattle\",\"Apr\",\"2.68\"\n   * // \"2\",\"Seattle\",\"Dec\",\"5.31\"\n   * // \"3\",\"New York\",\"Apr\",\"3.94\"\n   * // \"4\",\"New York\",\"Aug\",\"4.13\"\n   * // \"5\",\"New York\",\"Dec\",\"3.58\"\n   * // \"6\",\"Chicago\",\"Apr\",\"3.62\"\n   * // \"8\",\"Chicago\",\"Dec\",\"2.56\"\n   * // \"7\",\"Chicago\",\"Aug\",\"3.98\"\n   */",
    "meta": {
      "range": [
        40646,
        40850
      ],
      "filename": "TableGenerator.js",
      "lineno": 1391,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013689",
        "name": "TableGenerator#renderCSV",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Renders Markdown in the cell results",
    "see": [
      "{@link TableGenerator#generateCSV}"
    ],
    "examples": [
      "weather = [\n  { id: 1, city: 'Seattle',  month: 'Aug', precip: 0.87 },\n  { id: 0, city: 'Seattle',  month: 'Apr', precip: 2.68 },\n  { id: 2, city: 'Seattle',  month: 'Dec', precip: 5.31 },\n  { id: 3, city: 'New York', month: 'Apr', precip: 3.94 },\n  { id: 4, city: 'New York', month: 'Aug', precip: 4.13 },\n  { id: 5, city: 'New York', month: 'Dec', precip: 3.58 },\n  { id: 6, city: 'Chicago',  month: 'Apr', precip: 3.62 },\n  { id: 8, city: 'Chicago',  month: 'Dec', precip: 2.56 },\n  { id: 7, city: 'Chicago',  month: 'Aug', precip: 3.98 }\n];\nutils.table(weather)\n    .renderCSV();\n\n// \"id\",\"city\",\"month\",\"precip\"\n// \"1\",\"Seattle\",\"Aug\",\"0.87\"\n// \"0\",\"Seattle\",\"Apr\",\"2.68\"\n// \"2\",\"Seattle\",\"Dec\",\"5.31\"\n// \"3\",\"New York\",\"Apr\",\"3.94\"\n// \"4\",\"New York\",\"Aug\",\"4.13\"\n// \"5\",\"New York\",\"Dec\",\"3.58\"\n// \"6\",\"Chicago\",\"Apr\",\"3.62\"\n// \"8\",\"Chicago\",\"Dec\",\"2.56\"\n// \"7\",\"Chicago\",\"Aug\",\"3.98\""
    ],
    "name": "renderCSV",
    "longname": "TableGenerator#renderCSV",
    "kind": "function",
    "memberof": "TableGenerator",
    "scope": "instance",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        40670,
        40704
      ],
      "filename": "TableGenerator.js",
      "lineno": 1392,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013694",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "<anonymous>~context",
    "kind": "constant",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        40854,
        40885
      ],
      "filename": "TableGenerator.js",
      "lineno": 1401,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013720",
        "name": "module.exports",
        "type": "Identifier",
        "value": "TableGenerator",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        6,
        28
      ],
      "filename": "vega.js",
      "lineno": 1,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013728",
        "name": "Vega",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "Vega",
    "longname": "Vega",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        36,
        67
      ],
      "filename": "vega.js",
      "lineno": 2,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013734",
        "name": "VegaLite",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "VegaLite",
    "longname": "VegaLite",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        75,
        113
      ],
      "filename": "vega.js",
      "lineno": 3,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013740",
        "name": "VegaLiteApi",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "VegaLiteApi",
    "longname": "VegaLiteApi",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        122,
        176
      ],
      "filename": "vega.js",
      "lineno": 5,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013746",
        "name": "InternalHtmlScripts",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "InternalHtmlScripts",
    "longname": "InternalHtmlScripts",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        184,
        211
      ],
      "filename": "vega.js",
      "lineno": 6,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013752",
        "name": "IJSUtils",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "IJSUtils",
    "longname": "IJSUtils",
    "kind": "constant",
    "scope": "global",
    "params": []
  },
  {
    "comment": "/**\n * Helper for working with [Vega-Lite](https://vega.github.io/vega-lite/) (and [Vega](https://vega.github.io/vega/)) within iJavaScript notebooks.\n * \n * ([Vega-Lite-Api](https://vega.github.io/vega-lite-api/):\n * creates -> [Vega-Lite JSON specifications](https://vega.github.io/vega-lite/tutorials/getting_started.html):\n * creates -> [Vega charting specifications](https://vega.github.io/):\n * using -> [D3 as a visualization kernel](https://vega.github.io/vega/about/vega-and-d3/))\n * \n * * Rendering directly as SVG within Jupyter\n *   * {@link module:vega.svg|vega.svg((vl) => vl)} - to render a chart as SVG directly in Jupyter - using the vega-lite-api\n *   * {@link module:vega.svgFromSpec|vega.svgFromSpec(Object | String)} - rendering a chart directly in Jupyter - using a vega-lite specification\n *   * {@link module:vega.svgFromVegaSpec|vega.svgFromSpec(Object | String)} - renders a chart directly in Jupyter - using a vega specificiation\n * * Rendering as HTML / JavaScript through {@link module:ijs.htmlScript|ijs.htmlScript()}\n *   * {@link module:vega.embed|vega.embed((vl) => vl)} - to render a chart in the browser - using the vega-lite-api\n *   * {@link module:vega.embedFromSpec|vega.embedFromSpec(Object | String)} - rendering a chart in the browser - using a vega-lite specification\n *   * {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec(Object | String)} - renders a chart in the browser - using a vega specificiation\n * \n * * Rendering specifications through the Jupyter Lab mime-type\n *   * {@link module:vega.vegaMimeType|vega.vegaMimeType(Object | String)} - render the chart using the Vega mime-type (as png)\n *   * {@link module:vega.vegaLiteMimeType|vega.vegaLiteMimeType(Object | String)} - render the chart using the Vega-Lite mime-type (as png)\n * -----\n * \n * * Check out the {@tutorial vegaLite1} tutorials\n * * See the excellent [Vega-Lite-API Observable Notebooks](https://observablehq.com/collection/@vega/vega-lite-api)\n * and [Jeffrey Heer's Curriculum](https://observablehq.com/@uwdata/data-visualization-curriculum?collection=@uwdata/visualization-curriculum)\n * * or see the [Vega-Lite Examples](https://vega.github.io/vega-lite/examples/) and [Vega Examples](https://vega.github.io/vega/examples/)\n * * and of course the documentation is available:\n *   [Vega-Lite-API](https://vega.github.io/vega-lite-api/api/), \n *   [Vega-Lite](https://vega.github.io/vega-lite/docs/spec.html), \n *   [Vega](https://vega.github.io/vega/docs/specification/)\n * \n * # What is Vega-Lite / Vega-Lite-API?\n * \n * [Vega-Lite](https://vega.github.io/vega-lite) is a charting library that provides a great deal of flexibility and interaction\n * while also allowing for very simple use cases <br />\n * (and further simplified with [Vega-Lite-Api](https://vega.github.io/vega-lite-api/))\n * \n * ![Screenshot of vega lite examples from vega-lite home](img/vegaLiteExamples.png)\n * \n * It is built on [Vega](https://vega.github.io/vega/) that uses [d3 as a visualization kernel](https://vega.github.io/vega/about/vega-and-d3/).\n * \n * Note that Vega-Lite is supported by two options within this library:\n * \n * * through the [vega-lite JSON specification](https://vega.github.io/vega-lite/tutorials/getting_started.html) - a high level grammar that creates \n *   * {@link module:vega.embed|vega.embed((vl) => vl)} - to render a chart in the browser - using the vega-lite-api\n *   * {@link module:vega.svg|vega.svg((vl) => vl)} - to render a chart as SVG directly in Jupyter - using the vega-lite-api\n * * through the [vega-lite-api](https://vega.github.io/vega-lite-api/) - a JavaScript api to write the vega-lite specifications\n *   * {@link module:vega.embedFromSpec|vega.embedFromSpec(Object | String)} - rendering a chart in the browser - using a vega-lite specification\n *   * {@link module:vega.svgFromSpec|vega.svgFromSpec(Object | String)} - rendering a chart directly in Jupyter - using a vega-lite specification\n * \n * **(Where `svg` renders directly in Jupyter, and `embed` uses {@link module:ijs.htmlScript|ijs.htmlScript()} to render)**\n * \n * Note that rendering in the browser (as html / javascript), will provide more interactivity options (like export options)\n * while also having consequences in exporting the notebook in some cases.\n * \n * # What is Vega?\n * \n * True [Vega](https://vega.github.io/vega/) is also supported, providing support for additional capabilities\n * (that to my knowledge cannot be done with vega-lite)\n * such as [Radar Charts](https://vega.github.io/vega/examples/radar-chart/),\n * [Contour Plots](https://vega.github.io/vega/examples/contour-plot/),\n * [Tree Layouts](https://vega.github.io/vega/examples/tree-layout/),\n * [Force Plots](https://vega.github.io/vega/examples/force-directed-layout/),\n * and others.\n * \n * However Vega does not have a JavaScript API:\n *   * {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec(Object | String)} - renders a chart in the browser - using a vega specificiation\n *   * {@link module:vega.svgFromVegaSpec|vega.svgFromSpec(Object | String)} - renders a chart directly in Jupyter - using a vega specificiation\n * \n * ![Screenshot of Vega Charts](img/vegaChartExamples.jpg)\n * \n * In the context of Notebooks - is expected that Vega-Lite will be sufficient for most cases.\n * \n * # Embedding vs SVG\n * \n * SVG versions of charts render directly within Jupyter Notebook (as svg output)\n * \n * (As a rule - `embed...` calls and `svg...` calls can be easily interchanged)\n * \n * Embedding means the charts run within the browser (through dynamic HTML in the output).\n * \n * This provides greater flexibility\n * (at the consequence of complexity of splitting computation between jupyter and browser)\n * \n * As opposed to the SVG version, we can now:\n * \n * * use [vega-embed]() allowing for downloading of the chart\n * \n * ![Screenshot of Vega-Embed](img/vegaEmbed.png);\n * \n * * support for interactions and interactive dashboards\n * \n * ```\n * utils.vega.svgFromSpec({\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"data\": {\"url\": \"https://vega.github.io/vega-lite/examples/data/sp500.csv\"},\n *   \"vconcat\": [{\n *     \"width\": 480,\n *     \"mark\": \"area\",\n *     \"encoding\": {\n *       \"x\": {\n *         \"field\": \"date\",\n *         \"type\": \"temporal\",\n *         \"scale\": {\"domain\": {\"param\": \"brush\"}},\n *         \"axis\": {\"title\": \"\"}\n *       },\n *       \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n *     }\n *   }, {\n *     \"width\": 480,\n *     \"height\": 60,\n *     \"mark\": \"area\",\n *     \"params\": [{\n *       \"name\": \"brush\",\n *       \"select\": {\"type\": \"interval\", \"encodings\": [\"x\"]}\n *     }],\n *     \"encoding\": {\n *       \"x\": {\n *         \"field\": \"date\",\n *         \"type\": \"temporal\"\n *       },\n *       \"y\": {\n *         \"field\": \"price\",\n *         \"type\": \"quantitative\",\n *         \"axis\": {\"tickCount\": 3, \"grid\": false}\n *       }\n *     }\n *   }]\n * });\n * ```\n * \n * ![Screenshot of interactive charts](img/vegaScript_interactiveCharts.png)\n * \n * * support for tooltips within the Jupyter cell\n * \n * ```\n * utils.vega.embedFromSpec({\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A scatterplot showing horsepower and miles per gallons that opens a Google search for the car that you click on.\",\n *   \"data\": {\"url\": \"https://vega.github.io/vega-lite/examples/data/cars.json\"},\n *   \"height\": 600,\n *   \"width\": 400,\n *   \"mark\": \"point\",\n *   \"transform\": [{\n *     \"calculate\": \"'https://www.google.com/search?q=' + datum.Name\", \"as\": \"url\"\n *   }],\n *   \"encoding\": {\n *     \"x\": {\"field\": \"Horsepower\", \"type\": \"quantitative\"},\n *     \"y\": {\"field\": \"Miles_per_Gallon\", \"type\": \"quantitative\"},\n *     \"color\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n *     \"tooltip\": {\"field\": \"Name\", \"type\": \"nominal\"},\n *     \"href\": {\"field\": \"url\", \"type\": \"nominal\"}\n *   }\n * });\n * ```\n * \n * ![Screenshot for tooltips](img/vegaScript_tooltips.png)\n * \n * ---\n * \n * For more:\n * \n * * Check out the {@tutorial vegaLite1} tutorials\n * * See the excellent [Vega-Lite-API Observable Notebooks](https://observablehq.com/collection/@vega/vega-lite-api)\n * and [Jeffrey Heer's Curriculum](https://observablehq.com/@uwdata/data-visualization-curriculum?collection=@uwdata/visualization-curriculum)\n * * or see the [Vega-Lite Examples](https://vega.github.io/vega-lite/examples/) and [Vega Examples](https://vega.github.io/vega/examples/)\n * \n * @module vega\n * @exports vega\n */",
    "meta": {
      "filename": "vega.js",
      "lineno": 8,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {}
    },
    "description": "Helper for working with [Vega-Lite](https://vega.github.io/vega-lite/) (and [Vega](https://vega.github.io/vega/)) within iJavaScript notebooks.\n\n([Vega-Lite-Api](https://vega.github.io/vega-lite-api/):\ncreates -> [Vega-Lite JSON specifications](https://vega.github.io/vega-lite/tutorials/getting_started.html):\ncreates -> [Vega charting specifications](https://vega.github.io/):\nusing -> [D3 as a visualization kernel](https://vega.github.io/vega/about/vega-and-d3/))\n\n* Rendering directly as SVG within Jupyter\n  * {@link module:vega.svg|vega.svg((vl) => vl)} - to render a chart as SVG directly in Jupyter - using the vega-lite-api\n  * {@link module:vega.svgFromSpec|vega.svgFromSpec(Object | String)} - rendering a chart directly in Jupyter - using a vega-lite specification\n  * {@link module:vega.svgFromVegaSpec|vega.svgFromSpec(Object | String)} - renders a chart directly in Jupyter - using a vega specificiation\n* Rendering as HTML / JavaScript through {@link module:ijs.htmlScript|ijs.htmlScript()}\n  * {@link module:vega.embed|vega.embed((vl) => vl)} - to render a chart in the browser - using the vega-lite-api\n  * {@link module:vega.embedFromSpec|vega.embedFromSpec(Object | String)} - rendering a chart in the browser - using a vega-lite specification\n  * {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec(Object | String)} - renders a chart in the browser - using a vega specificiation\n\n* Rendering specifications through the Jupyter Lab mime-type\n  * {@link module:vega.vegaMimeType|vega.vegaMimeType(Object | String)} - render the chart using the Vega mime-type (as png)\n  * {@link module:vega.vegaLiteMimeType|vega.vegaLiteMimeType(Object | String)} - render the chart using the Vega-Lite mime-type (as png)\n-----\n\n* Check out the {@tutorial vegaLite1} tutorials\n* See the excellent [Vega-Lite-API Observable Notebooks](https://observablehq.com/collection/@vega/vega-lite-api)\nand [Jeffrey Heer's Curriculum](https://observablehq.com/@uwdata/data-visualization-curriculum?collection=@uwdata/visualization-curriculum)\n* or see the [Vega-Lite Examples](https://vega.github.io/vega-lite/examples/) and [Vega Examples](https://vega.github.io/vega/examples/)\n* and of course the documentation is available:\n  [Vega-Lite-API](https://vega.github.io/vega-lite-api/api/), \n  [Vega-Lite](https://vega.github.io/vega-lite/docs/spec.html), \n  [Vega](https://vega.github.io/vega/docs/specification/)\n\n# What is Vega-Lite / Vega-Lite-API?\n\n[Vega-Lite](https://vega.github.io/vega-lite) is a charting library that provides a great deal of flexibility and interaction\nwhile also allowing for very simple use cases <br />\n(and further simplified with [Vega-Lite-Api](https://vega.github.io/vega-lite-api/))\n\n![Screenshot of vega lite examples from vega-lite home](img/vegaLiteExamples.png)\n\nIt is built on [Vega](https://vega.github.io/vega/) that uses [d3 as a visualization kernel](https://vega.github.io/vega/about/vega-and-d3/).\n\nNote that Vega-Lite is supported by two options within this library:\n\n* through the [vega-lite JSON specification](https://vega.github.io/vega-lite/tutorials/getting_started.html) - a high level grammar that creates \n  * {@link module:vega.embed|vega.embed((vl) => vl)} - to render a chart in the browser - using the vega-lite-api\n  * {@link module:vega.svg|vega.svg((vl) => vl)} - to render a chart as SVG directly in Jupyter - using the vega-lite-api\n* through the [vega-lite-api](https://vega.github.io/vega-lite-api/) - a JavaScript api to write the vega-lite specifications\n  * {@link module:vega.embedFromSpec|vega.embedFromSpec(Object | String)} - rendering a chart in the browser - using a vega-lite specification\n  * {@link module:vega.svgFromSpec|vega.svgFromSpec(Object | String)} - rendering a chart directly in Jupyter - using a vega-lite specification\n\n**(Where `svg` renders directly in Jupyter, and `embed` uses {@link module:ijs.htmlScript|ijs.htmlScript()} to render)**\n\nNote that rendering in the browser (as html / javascript), will provide more interactivity options (like export options)\nwhile also having consequences in exporting the notebook in some cases.\n\n# What is Vega?\n\nTrue [Vega](https://vega.github.io/vega/) is also supported, providing support for additional capabilities\n(that to my knowledge cannot be done with vega-lite)\nsuch as [Radar Charts](https://vega.github.io/vega/examples/radar-chart/),\n[Contour Plots](https://vega.github.io/vega/examples/contour-plot/),\n[Tree Layouts](https://vega.github.io/vega/examples/tree-layout/),\n[Force Plots](https://vega.github.io/vega/examples/force-directed-layout/),\nand others.\n\nHowever Vega does not have a JavaScript API:\n  * {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec(Object | String)} - renders a chart in the browser - using a vega specificiation\n  * {@link module:vega.svgFromVegaSpec|vega.svgFromSpec(Object | String)} - renders a chart directly in Jupyter - using a vega specificiation\n\n![Screenshot of Vega Charts](img/vegaChartExamples.jpg)\n\nIn the context of Notebooks - is expected that Vega-Lite will be sufficient for most cases.\n\n# Embedding vs SVG\n\nSVG versions of charts render directly within Jupyter Notebook (as svg output)\n\n(As a rule - `embed...` calls and `svg...` calls can be easily interchanged)\n\nEmbedding means the charts run within the browser (through dynamic HTML in the output).\n\nThis provides greater flexibility\n(at the consequence of complexity of splitting computation between jupyter and browser)\n\nAs opposed to the SVG version, we can now:\n\n* use [vega-embed]() allowing for downloading of the chart\n\n![Screenshot of Vega-Embed](img/vegaEmbed.png);\n\n* support for interactions and interactive dashboards\n\n```\nutils.vega.svgFromSpec({\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"data\": {\"url\": \"https://vega.github.io/vega-lite/examples/data/sp500.csv\"},\n  \"vconcat\": [{\n    \"width\": 480,\n    \"mark\": \"area\",\n    \"encoding\": {\n      \"x\": {\n        \"field\": \"date\",\n        \"type\": \"temporal\",\n        \"scale\": {\"domain\": {\"param\": \"brush\"}},\n        \"axis\": {\"title\": \"\"}\n      },\n      \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n    }\n  }, {\n    \"width\": 480,\n    \"height\": 60,\n    \"mark\": \"area\",\n    \"params\": [{\n      \"name\": \"brush\",\n      \"select\": {\"type\": \"interval\", \"encodings\": [\"x\"]}\n    }],\n    \"encoding\": {\n      \"x\": {\n        \"field\": \"date\",\n        \"type\": \"temporal\"\n      },\n      \"y\": {\n        \"field\": \"price\",\n        \"type\": \"quantitative\",\n        \"axis\": {\"tickCount\": 3, \"grid\": false}\n      }\n    }\n  }]\n});\n```\n\n![Screenshot of interactive charts](img/vegaScript_interactiveCharts.png)\n\n* support for tooltips within the Jupyter cell\n\n```\nutils.vega.embedFromSpec({\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A scatterplot showing horsepower and miles per gallons that opens a Google search for the car that you click on.\",\n  \"data\": {\"url\": \"https://vega.github.io/vega-lite/examples/data/cars.json\"},\n  \"height\": 600,\n  \"width\": 400,\n  \"mark\": \"point\",\n  \"transform\": [{\n    \"calculate\": \"'https://www.google.com/search?q=' + datum.Name\", \"as\": \"url\"\n  }],\n  \"encoding\": {\n    \"x\": {\"field\": \"Horsepower\", \"type\": \"quantitative\"},\n    \"y\": {\"field\": \"Miles_per_Gallon\", \"type\": \"quantitative\"},\n    \"color\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n    \"tooltip\": {\"field\": \"Name\", \"type\": \"nominal\"},\n    \"href\": {\"field\": \"url\", \"type\": \"nominal\"}\n  }\n});\n```\n\n![Screenshot for tooltips](img/vegaScript_tooltips.png)\n\n---\n\nFor more:\n\n* Check out the {@tutorial vegaLite1} tutorials\n* See the excellent [Vega-Lite-API Observable Notebooks](https://observablehq.com/collection/@vega/vega-lite-api)\nand [Jeffrey Heer's Curriculum](https://observablehq.com/@uwdata/data-visualization-curriculum?collection=@uwdata/visualization-curriculum)\n* or see the [Vega-Lite Examples](https://vega.github.io/vega-lite/examples/) and [Vega Examples](https://vega.github.io/vega/examples/)",
    "kind": "module",
    "name": "vega",
    "alias": "vega",
    "longname": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8708,
        8727
      ],
      "filename": "vega.js",
      "lineno": 178,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013758",
        "name": "module.exports",
        "type": "ObjectExpression",
        "value": "{}",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "module:vega",
    "longname": "module:vega",
    "kind": "member"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8779,
        8805
      ],
      "filename": "vega.js",
      "lineno": 181,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013764",
        "name": "VegaUtils",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "undocumented": true,
    "name": "VegaUtils",
    "longname": "module:vega~VegaUtils",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:vega",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8876,
        9125
      ],
      "filename": "vega.js",
      "lineno": 184,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013770",
        "name": "vl",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "vl",
    "longname": "module:vega~vl",
    "kind": "constant",
    "scope": "inner",
    "memberof": "module:vega",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8922,
        9087
      ],
      "filename": "vega.js",
      "lineno": 185,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013779",
        "name": "config",
        "type": "ObjectExpression",
        "value": "{\"config\":\"\"}"
      }
    },
    "undocumented": true,
    "name": "config",
    "longname": "module:vega~config",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8975,
        9083
      ],
      "filename": "vega.js",
      "lineno": 187,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013781",
        "name": "config",
        "type": "ObjectExpression",
        "value": "{\"view\":\"\",\"mark\":\"\"}"
      }
    },
    "undocumented": true,
    "name": "config",
    "longname": "module:vega~config.config",
    "kind": "member",
    "memberof": "module:vega~config",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8991,
        9044
      ],
      "filename": "vega.js",
      "lineno": 188,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013783",
        "name": "view",
        "type": "ObjectExpression",
        "value": "{\"continuousWidth\":400,\"continuousHeight\":300}"
      }
    },
    "undocumented": true,
    "name": "view",
    "longname": "module:vega~config.config.view",
    "kind": "member",
    "memberof": "module:vega~config.config",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        8999,
        9019
      ],
      "filename": "vega.js",
      "lineno": 188,
      "columnno": 14,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013785",
        "name": "continuousWidth",
        "type": "Literal",
        "value": 400
      }
    },
    "undocumented": true,
    "name": "continuousWidth",
    "longname": "module:vega~config.config.view.continuousWidth",
    "kind": "member",
    "memberof": "module:vega~config.config.view",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9021,
        9042
      ],
      "filename": "vega.js",
      "lineno": 188,
      "columnno": 36,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013787",
        "name": "continuousHeight",
        "type": "Literal",
        "value": 300
      }
    },
    "undocumented": true,
    "name": "continuousHeight",
    "longname": "module:vega~config.config.view.continuousHeight",
    "kind": "member",
    "memberof": "module:vega~config.config.view",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9052,
        9060
      ],
      "filename": "vega.js",
      "lineno": 189,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013789",
        "name": "mark",
        "type": "ObjectExpression",
        "value": "{}"
      }
    },
    "undocumented": true,
    "name": "mark",
    "longname": "module:vega~config.config.mark",
    "kind": "member",
    "memberof": "module:vega~config.config",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9091,
        9122
      ],
      "filename": "vega.js",
      "lineno": 192,
      "columnno": 2,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013791",
        "name": "view",
        "type": "ObjectExpression",
        "value": "{\"renderer\":\"svg\"}"
      }
    },
    "undocumented": true,
    "name": "view",
    "longname": "module:vega~view",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        9103,
        9118
      ],
      "filename": "vega.js",
      "lineno": 193,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013793",
        "name": "renderer",
        "type": "Literal",
        "value": "svg"
      }
    },
    "undocumented": true,
    "name": "renderer",
    "longname": "module:vega~view.renderer",
    "kind": "member",
    "memberof": "module:vega~view",
    "scope": "static"
  },
  {
    "comment": "/**\n * Renders a svg of a vega lite diagram directly within Jupyter\n * \n * Unlike {@link module:vega.embed|vega.embed()} - this renders directly within Jupyter.\n * \n * ```\n * vl.svg((vl) => vl.markCircle()\n *   .title('Binned Rotten Tomatoes Rating by IMDB Rating')\n *   .data(movies)\n *   .encode(\n *     vl.x().fieldQ('Rotten Tomatoes Rating').bin({maxbins: 20}),\n *     vl.y().fieldQ('IMDB Rating').bin({maxbins: 20}),\n *     vl.size().count()\n *   ));\n * ```\n * \n * ![Screenshot of Binned Vega Chart](img/MoviesRTbyIMDB.png)\n * \n * See the {@tutorial vegaLite1} tutorial.\n * \n * @param {Function} fn - function of type (vl) => {encodedVegaLite)\n *    that returns the vega lite instance encoded for a graph\n * @param {VegaLiteInstance} fn.vl - Parameter: The Vega Lite instance\n * @param {Display} display - the iJavaScript Display.\n *    (Note: $$ refers to the current display within the iJavaScript kernel)\n *    See [the NEL documentation for more](http://n-riesco.github.io/ijavascript/doc/custom.ipynb.html#Setting-the-output-using-the-global-object-$$)\n */",
    "meta": {
      "range": [
        10196,
        10876
      ],
      "filename": "vega.js",
      "lineno": 224,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013796",
        "name": "module.exports.svg",
        "type": "FunctionExpression",
        "value": "svg",
        "paramnames": [
          "fn",
          "targetDisplay"
        ]
      },
      "vars": {
        "context": "module:vega.svg~context",
        "undefined": null,
        "vegaMarkers": "module:vega.svg~vegaMarkers",
        "view": "module:vega.svg~view",
        "svgText": "module:vega.svg~svgText"
      }
    },
    "description": "Renders a svg of a vega lite diagram directly within Jupyter\n\nUnlike {@link module:vega.embed|vega.embed()} - this renders directly within Jupyter.\n\n```\nvl.svg((vl) => vl.markCircle()\n  .title('Binned Rotten Tomatoes Rating by IMDB Rating')\n  .data(movies)\n  .encode(\n    vl.x().fieldQ('Rotten Tomatoes Rating').bin({maxbins: 20}),\n    vl.y().fieldQ('IMDB Rating').bin({maxbins: 20}),\n    vl.size().count()\n  ));\n```\n\n![Screenshot of Binned Vega Chart](img/MoviesRTbyIMDB.png)\n\nSee the {@tutorial vegaLite1} tutorial.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function of type (vl) => {encodedVegaLite)\n   that returns the vega lite instance encoded for a graph",
        "name": "fn"
      },
      {
        "type": {
          "names": [
            "VegaLiteInstance"
          ]
        },
        "description": "Parameter: The Vega Lite instance",
        "name": "fn.vl"
      },
      {
        "type": {
          "names": [
            "Display"
          ]
        },
        "description": "the iJavaScript Display.\n   (Note: $$ refers to the current display within the iJavaScript kernel)\n   See [the NEL documentation for more](http://n-riesco.github.io/ijavascript/doc/custom.ipynb.html#Setting-the-output-using-the-global-object-$$)",
        "name": "display"
      }
    ],
    "name": "svg",
    "longname": "module:vega.svg",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10265,
        10299
      ],
      "filename": "vega.js",
      "lineno": 225,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013808",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.svg~context",
    "kind": "constant",
    "memberof": "module:vega.svg",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10403,
        10414
      ],
      "filename": "vega.js",
      "lineno": 227,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013824",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10416,
        10436
      ],
      "filename": "vega.js",
      "lineno": 227,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013826",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10489,
        10518
      ],
      "filename": "vega.js",
      "lineno": 232,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013837",
        "name": "vegaMarkers",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "vegaMarkers",
    "longname": "module:vega.svg~vegaMarkers",
    "kind": "constant",
    "memberof": "module:vega.svg",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10532,
        10536
      ],
      "filename": "vega.js",
      "lineno": 233,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013848",
        "name": "spec",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "spec",
    "longname": "module:vega~spec",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10592,
        10652
      ],
      "filename": "vega.js",
      "lineno": 235,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013859",
        "name": "view",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "view",
    "longname": "module:vega.svg~view",
    "kind": "constant",
    "memberof": "module:vega.svg",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10633,
        10649
      ],
      "filename": "vega.js",
      "lineno": 235,
      "columnno": 51,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013871",
        "name": "renderer",
        "type": "Literal",
        "value": "none"
      }
    },
    "undocumented": true,
    "name": "renderer",
    "longname": "module:vega~renderer",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        10665,
        10693
      ],
      "filename": "vega.js",
      "lineno": 237,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013874",
        "name": "svgText",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgText",
    "longname": "module:vega.svg~svgText",
    "kind": "constant",
    "memberof": "module:vega.svg",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Renders a vega-lite diagram within {@link module:ijs.htmlScript|ijs.htmlScript} (browser).\n * \n * Unlike {@link module:vega.embed|vega.svg()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n * \n * Please note that `svg...` and `embed...` calls are meant to be easily interchangable.\n * \n * ```\n * vl.embed((vl) => vl.markCircle()\n *   .title('Binned Rotten Tomatoes Rating by IMDB Rating')\n *   .data(movies)\n *   .encode(\n *     vl.x().fieldQ('Rotten Tomatoes Rating').bin({maxbins: 20}),\n *     vl.y().fieldQ('IMDB Rating').bin({maxbins: 20}),\n *     vl.size().count()\n *   ));\n * ```\n * \n * ![Screenshot of embed](img/vegaEmbedExample.png)\n * \n * See the {@tutorial vegaLite1} tutorial.\n * \n * @param {Function} fn - function of type (vl) => {encodedVegaLite)\n *    that returns the vega lite instance encoded for a graph\n * @param {VegaLiteInstance} fn.vl - Parameter: The Vega Lite instance\n * @param {Display} display - the iJavaScript Display.\n *    (Note: $$ refers to the current display within the iJavaScript kernel)\n *    See [the NEL documentation for more](http://n-riesco.github.io/ijavascript/doc/custom.ipynb.html#Setting-the-output-using-the-global-object-$$)\n */",
    "meta": {
      "range": [
        12092,
        13200
      ],
      "filename": "vega.js",
      "lineno": 276,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013914",
        "name": "module.exports.embed",
        "type": "FunctionExpression",
        "value": "embed",
        "paramnames": [
          "fn",
          "options"
        ]
      },
      "vars": {
        "context": "module:vega.embed~context",
        "undefined": null,
        "cleanOptions": "module:vega.embed~cleanOptions",
        "vegaMarkers": "module:vega.embed~vegaMarkers"
      }
    },
    "description": "Renders a vega-lite diagram within {@link module:ijs.htmlScript|ijs.htmlScript} (browser).\n\nUnlike {@link module:vega.embed|vega.svg()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n\nPlease note that `svg...` and `embed...` calls are meant to be easily interchangable.\n\n```\nvl.embed((vl) => vl.markCircle()\n  .title('Binned Rotten Tomatoes Rating by IMDB Rating')\n  .data(movies)\n  .encode(\n    vl.x().fieldQ('Rotten Tomatoes Rating').bin({maxbins: 20}),\n    vl.y().fieldQ('IMDB Rating').bin({maxbins: 20}),\n    vl.size().count()\n  ));\n```\n\n![Screenshot of embed](img/vegaEmbedExample.png)\n\nSee the {@tutorial vegaLite1} tutorial.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "function of type (vl) => {encodedVegaLite)\n   that returns the vega lite instance encoded for a graph",
        "name": "fn"
      },
      {
        "type": {
          "names": [
            "VegaLiteInstance"
          ]
        },
        "description": "Parameter: The Vega Lite instance",
        "name": "fn.vl"
      },
      {
        "type": {
          "names": [
            "Display"
          ]
        },
        "description": "the iJavaScript Display.\n   (Note: $$ refers to the current display within the iJavaScript kernel)\n   See [the NEL documentation for more](http://n-riesco.github.io/ijavascript/doc/custom.ipynb.html#Setting-the-output-using-the-global-object-$$)",
        "name": "display"
      }
    ],
    "name": "embed",
    "longname": "module:vega.embed",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12153,
        12187
      ],
      "filename": "vega.js",
      "lineno": 277,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013926",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.embed~context",
    "kind": "constant",
    "memberof": "module:vega.embed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12291,
        12302
      ],
      "filename": "vega.js",
      "lineno": 279,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013942",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12304,
        12324
      ],
      "filename": "vega.js",
      "lineno": 279,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013944",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12347,
        12375
      ],
      "filename": "vega.js",
      "lineno": 281,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013948",
        "name": "cleanOptions",
        "type": "LogicalExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "cleanOptions",
    "longname": "module:vega.embed~cleanOptions",
    "kind": "constant",
    "memberof": "module:vega.embed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12392,
        12404
      ],
      "filename": "vega.js",
      "lineno": 284,
      "columnno": 4,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013956",
        "name": "scripts",
        "type": "AssignmentPattern",
        "value": "scripts"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:vega~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12464,
        12493
      ],
      "filename": "vega.js",
      "lineno": 290,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013969",
        "name": "vegaMarkers",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "vegaMarkers",
    "longname": "module:vega.embed~vegaMarkers",
    "kind": "constant",
    "memberof": "module:vega.embed",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12507,
        12511
      ],
      "filename": "vega.js",
      "lineno": 291,
      "columnno": 12,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013980",
        "name": "spec",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "spec",
    "longname": "module:vega~spec",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12612,
        12622
      ],
      "filename": "vega.js",
      "lineno": 295,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100013998",
        "name": "data",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:vega~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12630,
        12819
      ],
      "filename": "vega.js",
      "lineno": 296,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014000",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"\",\"https://cdn.jsdelivr.net/npm/vega@5\",\"https://cdn.jsdelivr.net/npm/vega-lite@5\",\"https://cdn.jsdelivr.net/npm/vega-embed@6\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:vega~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        12827,
        12876
      ],
      "filename": "vega.js",
      "lineno": 302,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014007",
        "name": "onReady",
        "type": "MemberExpression",
        "value": "InternalHtmlScripts.embedFromSpecOnReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:vega~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "/**\n * Renders a vega-lite chart from a JSON / Object specification.\n * \n * Unlike {@link module:vega.embedFromSpec|vega.embedFromSpec()} - this renders directly within Jupyter.\n * \n * Such as [this one for bar charts](https://vega.github.io/vega-lite/examples/bar.html)\n * from the [vega lite examples](https://vega.github.io/vega-lite/examples/)\n * \n * You can either pass the Schema as:\n * \n * * parsed JSON Objects (allowing for sending NodeJS data and config)\n * * or as a JSON encoded string\n * \n * ## Parsed JSON \n * \n * ```\n * sampleData = [\n *   {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n *   {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n *   {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n * ];\n * utils.vega.svgFromSpec(\n * {\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A simple bar chart with embedded data.\",\n *   \"data\": {\n *     \"values\": sampleData\n *   },\n *   \"mark\": \"bar\",\n *   \"encoding\": {\n *     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n *     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n *   }\n * });\n * ```\n * \n * ![Screenshot of object schema](img/vegaObjectSchema.png)\n * \n * * JSON encoded String\n * \n * ```\n * utils.vega.svgFromSpec(`\n * {\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A simple bar chart with embedded data.\",\n *   \"data\": {\n *     \"values\": [\n *       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n *       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n *       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n *     ]\n *   },\n *   \"mark\": \"bar\",\n *   \"encoding\": {\n *     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n *     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n *   }\n * }`)\n * ```\n * \n * ![Screenshot of the string parsed](img/vegaStringSchema.png)\n * \n * @param {String} vegaSpec - Vega string specification\n * @param {Display} display - the iJavaScript display\n */",
    "meta": {
      "range": [
        15262,
        16036
      ],
      "filename": "vega.js",
      "lineno": 381,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014038",
        "name": "module.exports.svgFromSpec",
        "type": "FunctionExpression",
        "value": "svgFromSpec",
        "paramnames": [
          "spec",
          "targetDisplay"
        ]
      },
      "vars": {
        "context": "module:vega.svgFromSpec~context",
        "undefined": null,
        "jsonResult": "module:vega~jsonResult",
        "compiledSpec": "module:vega.svgFromSpec~compiledSpec",
        "view": "module:vega.svgFromSpec~view",
        "svgText": "module:vega.svgFromSpec~svgText"
      }
    },
    "description": "Renders a vega-lite chart from a JSON / Object specification.\n\nUnlike {@link module:vega.embedFromSpec|vega.embedFromSpec()} - this renders directly within Jupyter.\n\nSuch as [this one for bar charts](https://vega.github.io/vega-lite/examples/bar.html)\nfrom the [vega lite examples](https://vega.github.io/vega-lite/examples/)\n\nYou can either pass the Schema as:\n\n* parsed JSON Objects (allowing for sending NodeJS data and config)\n* or as a JSON encoded string\n\n## Parsed JSON \n\n```\nsampleData = [\n  {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n  {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n  {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n];\nutils.vega.svgFromSpec(\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  \"data\": {\n    \"values\": sampleData\n  },\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n  }\n});\n```\n\n![Screenshot of object schema](img/vegaObjectSchema.png)\n\n* JSON encoded String\n\n```\nutils.vega.svgFromSpec(`\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  \"data\": {\n    \"values\": [\n      {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n      {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n      {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n    ]\n  },\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n  }\n}`)\n```\n\n![Screenshot of the string parsed](img/vegaStringSchema.png)",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Vega string specification",
        "name": "vegaSpec"
      },
      {
        "type": {
          "names": [
            "Display"
          ]
        },
        "description": "the iJavaScript display",
        "name": "display"
      }
    ],
    "name": "svgFromSpec",
    "longname": "module:vega.svgFromSpec",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15349,
        15383
      ],
      "filename": "vega.js",
      "lineno": 382,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014050",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.svgFromSpec~context",
    "kind": "constant",
    "memberof": "module:vega.svgFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15487,
        15498
      ],
      "filename": "vega.js",
      "lineno": 384,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014066",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15500,
        15520
      ],
      "filename": "vega.js",
      "lineno": 384,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014068",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15571,
        15588
      ],
      "filename": "vega.js",
      "lineno": 389,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014079",
        "name": "jsonResult",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega.svgFromSpec~jsonResult",
    "kind": "member",
    "memberof": "module:vega.svgFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15632,
        15661
      ],
      "filename": "vega.js",
      "lineno": 391,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014089",
        "name": "jsonResult",
        "type": "CallExpression",
        "funcscope": "module:vega.svgFromSpec",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega~jsonResult",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15679,
        15727
      ],
      "filename": "vega.js",
      "lineno": 393,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014097",
        "name": "compiledSpec",
        "type": "MemberExpression",
        "value": ".spec"
      }
    },
    "undocumented": true,
    "name": "compiledSpec",
    "longname": "module:vega.svgFromSpec~compiledSpec",
    "kind": "constant",
    "memberof": "module:vega.svgFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15744,
        15812
      ],
      "filename": "vega.js",
      "lineno": 395,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014107",
        "name": "view",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "view",
    "longname": "module:vega.svgFromSpec~view",
    "kind": "constant",
    "memberof": "module:vega.svgFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15793,
        15809
      ],
      "filename": "vega.js",
      "lineno": 395,
      "columnno": 59,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014119",
        "name": "renderer",
        "type": "Literal",
        "value": "none"
      }
    },
    "undocumented": true,
    "name": "renderer",
    "longname": "module:vega~renderer",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        15825,
        15853
      ],
      "filename": "vega.js",
      "lineno": 397,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014122",
        "name": "svgText",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgText",
    "longname": "module:vega.svgFromSpec~svgText",
    "kind": "constant",
    "memberof": "module:vega.svgFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Renders a vega-lite chart from a JSON / Object specification.\n * \n * Unlike {@link module:vega.svgFromSpec|vega.svgFromSpec()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n * \n * You can either pass directly the Schema Objects\n * (ex: parsed JSON [from the vega lite examples](https://vega.github.io/vega-lite/examples/))\n * \n * [Such as this one for bar charts](https://vega.github.io/vega-lite/examples/bar.html)\n * \n * ```\n * sampleData = [\n *   {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n *   {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n *   {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n * ];\n * utils.vega.embedFromSpec(\n * {\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A simple bar chart with embedded data.\",\n *   \"data\": {\n *     \"values\": sampleData\n *   },\n *   \"mark\": \"bar\",\n *   \"encoding\": {\n *     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n *     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n *   }\n * });\n * ```\n * \n * ![Screenshot of object schema](img/vegaObjectSchema.png)\n * \n * ... or the strings directly from [the vega lite examples](https://vega.github.io/vega-lite/examples/).\n * \n * ```\n * utils.vega.embedFromSpec(`\n * {\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A simple bar chart with embedded data.\",\n *   ...\n * }`)\n * ```\n * \n * @param {String} vegaSpec - Vega string specification\n * @param {Display} display - the iJavaScript display\n */",
    "meta": {
      "range": [
        17615,
        18701
      ],
      "filename": "vega.js",
      "lineno": 454,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014162",
        "name": "module.exports.embedFromSpec",
        "type": "FunctionExpression",
        "value": "embedFromSpec",
        "paramnames": [
          "spec",
          "options"
        ]
      },
      "vars": {
        "context": "module:vega.embedFromSpec~context",
        "undefined": null,
        "jsonResult": "module:vega~jsonResult",
        "compiledSpec": "module:vega.embedFromSpec~compiledSpec"
      }
    },
    "description": "Renders a vega-lite chart from a JSON / Object specification.\n\nUnlike {@link module:vega.svgFromSpec|vega.svgFromSpec()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n\nYou can either pass directly the Schema Objects\n(ex: parsed JSON [from the vega lite examples](https://vega.github.io/vega-lite/examples/))\n\n[Such as this one for bar charts](https://vega.github.io/vega-lite/examples/bar.html)\n\n```\nsampleData = [\n  {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n  {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n  {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n];\nutils.vega.embedFromSpec(\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  \"data\": {\n    \"values\": sampleData\n  },\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n  }\n});\n```\n\n![Screenshot of object schema](img/vegaObjectSchema.png)\n\n... or the strings directly from [the vega lite examples](https://vega.github.io/vega-lite/examples/).\n\n```\nutils.vega.embedFromSpec(`\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  ...\n}`)\n```",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Vega string specification",
        "name": "vegaSpec"
      },
      {
        "type": {
          "names": [
            "Display"
          ]
        },
        "description": "the iJavaScript display",
        "name": "display"
      }
    ],
    "name": "embedFromSpec",
    "longname": "module:vega.embedFromSpec",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17694,
        17728
      ],
      "filename": "vega.js",
      "lineno": 455,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014174",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.embedFromSpec~context",
    "kind": "constant",
    "memberof": "module:vega.embedFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17832,
        17843
      ],
      "filename": "vega.js",
      "lineno": 457,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014190",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17845,
        17865
      ],
      "filename": "vega.js",
      "lineno": 457,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014192",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17916,
        17933
      ],
      "filename": "vega.js",
      "lineno": 462,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014203",
        "name": "jsonResult",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega.embedFromSpec~jsonResult",
    "kind": "member",
    "memberof": "module:vega.embedFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        17977,
        18006
      ],
      "filename": "vega.js",
      "lineno": 464,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014213",
        "name": "jsonResult",
        "type": "CallExpression",
        "funcscope": "module:vega.embedFromSpec",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega~jsonResult",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18024,
        18072
      ],
      "filename": "vega.js",
      "lineno": 466,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014221",
        "name": "compiledSpec",
        "type": "MemberExpression",
        "value": ".spec"
      }
    },
    "undocumented": true,
    "name": "compiledSpec",
    "longname": "module:vega.embedFromSpec~compiledSpec",
    "kind": "constant",
    "memberof": "module:vega.embedFromSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18125,
        18143
      ],
      "filename": "vega.js",
      "lineno": 470,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014238",
        "name": "data",
        "type": "Identifier",
        "value": "compiledSpec"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:vega~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18151,
        18320
      ],
      "filename": "vega.js",
      "lineno": 471,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014240",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"https://cdn.jsdelivr.net/npm/vega@5\",\"https://cdn.jsdelivr.net/npm/vega-lite@5\",\"https://cdn.jsdelivr.net/npm/vega-embed@6\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:vega~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        18328,
        18377
      ],
      "filename": "vega.js",
      "lineno": 476,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014245",
        "name": "onReady",
        "type": "MemberExpression",
        "value": "InternalHtmlScripts.embedFromSpecOnReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:vega~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "/**\n * Renders a Vega (not Vega-lite) chart from a JSON / Object specification.\n * \n * Unlike {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec()} - this renders directly within Jupyter.\n * \n * Similar to {@link module:vega.svgFromSpec|vega.svgFromSpec()},\n * the specification can either be an object or JSON encoded string. \n * \n * This example is from the [Vega Line Chart example](https://vega.github.io/vega/examples/line-chart/)\n * \n * ```\n * utils.vega.svgFromSpec({\n *   \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n *   \"description\": \"A basic line chart example.\",\n *   \"width\": 500,\n *   \"height\": 200,\n *   \"padding\": 5,\n * \n *   \"signals\": [\n *     {\n *       \"name\": \"interpolate\",\n *       \"value\": \"linear\",\n *       \"bind\": {\n *         \"input\": \"select\",\n *         \"options\": [\n *           \"basis\",\n *           \"cardinal\",\n *           \"catmull-rom\",\n *           \"linear\",\n *           \"monotone\",\n *           \"natural\",\n *           \"step\",\n *           \"step-after\",\n *           \"step-before\"\n *         ]\n *       }\n *     }\n *   ],\n * \n *   \"data\": [\n *     {\n *       \"name\": \"table\",\n *       \"values\": [\n *         {\"x\": 0, \"y\": 28, \"c\":0}, {\"x\": 0, \"y\": 20, \"c\":1},\n *         {\"x\": 1, \"y\": 43, \"c\":0}, {\"x\": 1, \"y\": 35, \"c\":1},\n *         {\"x\": 2, \"y\": 81, \"c\":0}, {\"x\": 2, \"y\": 10, \"c\":1},\n *         {\"x\": 3, \"y\": 19, \"c\":0}, {\"x\": 3, \"y\": 15, \"c\":1},\n *         {\"x\": 4, \"y\": 52, \"c\":0}, {\"x\": 4, \"y\": 48, \"c\":1},\n *         {\"x\": 5, \"y\": 24, \"c\":0}, {\"x\": 5, \"y\": 28, \"c\":1},\n *         {\"x\": 6, \"y\": 87, \"c\":0}, {\"x\": 6, \"y\": 66, \"c\":1},\n *         {\"x\": 7, \"y\": 17, \"c\":0}, {\"x\": 7, \"y\": 27, \"c\":1},\n *         {\"x\": 8, \"y\": 68, \"c\":0}, {\"x\": 8, \"y\": 16, \"c\":1},\n *         {\"x\": 9, \"y\": 49, \"c\":0}, {\"x\": 9, \"y\": 25, \"c\":1}\n *       ]\n *     }\n *   ],\n * \n *   \"scales\": [\n *     {\n *       \"name\": \"x\",\n *       \"type\": \"point\",\n *       \"range\": \"width\",\n *       \"domain\": {\"data\": \"table\", \"field\": \"x\"}\n *     },\n *     {\n *       \"name\": \"y\",\n *       \"type\": \"linear\",\n *       \"range\": \"height\",\n *       \"nice\": true,\n *       \"zero\": true,\n *       \"domain\": {\"data\": \"table\", \"field\": \"y\"}\n *     },\n *     {\n *       \"name\": \"color\",\n *       \"type\": \"ordinal\",\n *       \"range\": \"category\",\n *       \"domain\": {\"data\": \"table\", \"field\": \"c\"}\n *     }\n *   ],\n * \n *   \"axes\": [\n *     {\"orient\": \"bottom\", \"scale\": \"x\"},\n *     {\"orient\": \"left\", \"scale\": \"y\"}\n *   ],\n * \n *   \"marks\": [\n *     {\n *       \"type\": \"group\",\n *       \"from\": {\n *         \"facet\": {\n *           \"name\": \"series\",\n *           \"data\": \"table\",\n *           \"groupby\": \"c\"\n *         }\n *       },\n *       \"marks\": [\n *         {\n *           \"type\": \"line\",\n *           \"from\": {\"data\": \"series\"},\n *           \"encode\": {\n *             \"enter\": {\n *               \"x\": {\"scale\": \"x\", \"field\": \"x\"},\n *               \"y\": {\"scale\": \"y\", \"field\": \"y\"},\n *               \"stroke\": {\"scale\": \"color\", \"field\": \"c\"},\n *               \"strokeWidth\": {\"value\": 2}\n *             },\n *             \"update\": {\n *               \"interpolate\": {\"signal\": \"interpolate\"},\n *               \"strokeOpacity\": {\"value\": 1}\n *             },\n *             \"hover\": {\n *               \"strokeOpacity\": {\"value\": 0.5}\n *             }\n *           }\n *         }\n *       ]\n *     }\n *   ]\n * });\n * ```\n * \n * ![Screenshot of vega svg chart](img/vegaSvgSpecExample.png)\n * \n * @param {String | Object} spec - Vega specification\n */",
    "meta": {
      "range": [
        22181,
        22885
      ],
      "filename": "vega.js",
      "lineno": 615,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014276",
        "name": "module.exports.svgFromVegaSpec",
        "type": "FunctionExpression",
        "value": "svgFromVegaSpec",
        "paramnames": [
          "spec"
        ]
      },
      "vars": {
        "context": "module:vega.svgFromVegaSpec~context",
        "undefined": null,
        "jsonResult": "module:vega~jsonResult",
        "view": "module:vega.svgFromVegaSpec~view",
        "svgText": "module:vega.svgFromVegaSpec~svgText"
      }
    },
    "description": "Renders a Vega (not Vega-lite) chart from a JSON / Object specification.\n\nUnlike {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec()} - this renders directly within Jupyter.\n\nSimilar to {@link module:vega.svgFromSpec|vega.svgFromSpec()},\nthe specification can either be an object or JSON encoded string. \n\nThis example is from the [Vega Line Chart example](https://vega.github.io/vega/examples/line-chart/)\n\n```\nutils.vega.svgFromSpec({\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"description\": \"A basic line chart example.\",\n  \"width\": 500,\n  \"height\": 200,\n  \"padding\": 5,\n\n  \"signals\": [\n    {\n      \"name\": \"interpolate\",\n      \"value\": \"linear\",\n      \"bind\": {\n        \"input\": \"select\",\n        \"options\": [\n          \"basis\",\n          \"cardinal\",\n          \"catmull-rom\",\n          \"linear\",\n          \"monotone\",\n          \"natural\",\n          \"step\",\n          \"step-after\",\n          \"step-before\"\n        ]\n      }\n    }\n  ],\n\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"values\": [\n        {\"x\": 0, \"y\": 28, \"c\":0}, {\"x\": 0, \"y\": 20, \"c\":1},\n        {\"x\": 1, \"y\": 43, \"c\":0}, {\"x\": 1, \"y\": 35, \"c\":1},\n        {\"x\": 2, \"y\": 81, \"c\":0}, {\"x\": 2, \"y\": 10, \"c\":1},\n        {\"x\": 3, \"y\": 19, \"c\":0}, {\"x\": 3, \"y\": 15, \"c\":1},\n        {\"x\": 4, \"y\": 52, \"c\":0}, {\"x\": 4, \"y\": 48, \"c\":1},\n        {\"x\": 5, \"y\": 24, \"c\":0}, {\"x\": 5, \"y\": 28, \"c\":1},\n        {\"x\": 6, \"y\": 87, \"c\":0}, {\"x\": 6, \"y\": 66, \"c\":1},\n        {\"x\": 7, \"y\": 17, \"c\":0}, {\"x\": 7, \"y\": 27, \"c\":1},\n        {\"x\": 8, \"y\": 68, \"c\":0}, {\"x\": 8, \"y\": 16, \"c\":1},\n        {\"x\": 9, \"y\": 49, \"c\":0}, {\"x\": 9, \"y\": 25, \"c\":1}\n      ]\n    }\n  ],\n\n  \"scales\": [\n    {\n      \"name\": \"x\",\n      \"type\": \"point\",\n      \"range\": \"width\",\n      \"domain\": {\"data\": \"table\", \"field\": \"x\"}\n    },\n    {\n      \"name\": \"y\",\n      \"type\": \"linear\",\n      \"range\": \"height\",\n      \"nice\": true,\n      \"zero\": true,\n      \"domain\": {\"data\": \"table\", \"field\": \"y\"}\n    },\n    {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"range\": \"category\",\n      \"domain\": {\"data\": \"table\", \"field\": \"c\"}\n    }\n  ],\n\n  \"axes\": [\n    {\"orient\": \"bottom\", \"scale\": \"x\"},\n    {\"orient\": \"left\", \"scale\": \"y\"}\n  ],\n\n  \"marks\": [\n    {\n      \"type\": \"group\",\n      \"from\": {\n        \"facet\": {\n          \"name\": \"series\",\n          \"data\": \"table\",\n          \"groupby\": \"c\"\n        }\n      },\n      \"marks\": [\n        {\n          \"type\": \"line\",\n          \"from\": {\"data\": \"series\"},\n          \"encode\": {\n            \"enter\": {\n              \"x\": {\"scale\": \"x\", \"field\": \"x\"},\n              \"y\": {\"scale\": \"y\", \"field\": \"y\"},\n              \"stroke\": {\"scale\": \"color\", \"field\": \"c\"},\n              \"strokeWidth\": {\"value\": 2}\n            },\n            \"update\": {\n              \"interpolate\": {\"signal\": \"interpolate\"},\n              \"strokeOpacity\": {\"value\": 1}\n            },\n            \"hover\": {\n              \"strokeOpacity\": {\"value\": 0.5}\n            }\n          }\n        }\n      ]\n    }\n  ]\n});\n```\n\n![Screenshot of vega svg chart](img/vegaSvgSpecExample.png)",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Object"
          ]
        },
        "description": "Vega specification",
        "name": "spec"
      }
    ],
    "name": "svgFromVegaSpec",
    "longname": "module:vega.svgFromVegaSpec",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22261,
        22295
      ],
      "filename": "vega.js",
      "lineno": 616,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014287",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.svgFromVegaSpec~context",
    "kind": "constant",
    "memberof": "module:vega.svgFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22399,
        22410
      ],
      "filename": "vega.js",
      "lineno": 618,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014303",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22412,
        22432
      ],
      "filename": "vega.js",
      "lineno": 618,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014305",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22483,
        22500
      ],
      "filename": "vega.js",
      "lineno": 623,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014316",
        "name": "jsonResult",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega.svgFromVegaSpec~jsonResult",
    "kind": "member",
    "memberof": "module:vega.svgFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22544,
        22573
      ],
      "filename": "vega.js",
      "lineno": 625,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014326",
        "name": "jsonResult",
        "type": "CallExpression",
        "funcscope": "module:vega.svgFromVegaSpec",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega~jsonResult",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22596,
        22661
      ],
      "filename": "vega.js",
      "lineno": 628,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014334",
        "name": "view",
        "type": "NewExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "view",
    "longname": "module:vega.svgFromVegaSpec~view",
    "kind": "constant",
    "memberof": "module:vega.svgFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22643,
        22658
      ],
      "filename": "vega.js",
      "lineno": 628,
      "columnno": 57,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014346",
        "name": "renderer",
        "type": "Literal",
        "value": "svg"
      }
    },
    "undocumented": true,
    "name": "renderer",
    "longname": "module:vega~renderer",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        22674,
        22702
      ],
      "filename": "vega.js",
      "lineno": 630,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014349",
        "name": "svgText",
        "type": "AwaitExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "svgText",
    "longname": "module:vega.svgFromVegaSpec~svgText",
    "kind": "constant",
    "memberof": "module:vega.svgFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "/**\n * Renders an Vega (not Vega-lite) chart from a JSON / Object specification.\n * \n * Unlike {@link module:vega.svgFromVegaSpec|vega.svgFromVegaSpec()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n * \n * Similar to {@link module:vega.svgFromSpec|vega.svgFromSpec()},\n * the specification can either be an object or JSON encoded string. \n * \n * This example is from the [Vega Line Chart example](https://vega.github.io/vega/examples/line-chart/)\n * \n * ```\n * utils.vega.embedFromVegaSpec({\n *   \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n *   \"description\": \"A basic line chart example.\",\n *   \"width\": 500,\n *   \"height\": 200,\n *   \"padding\": 5,\n * \n *   \"signals\": [\n *     {\n *       \"name\": \"interpolate\",\n *       \"value\": \"linear\",\n *       \"bind\": {\n *         \"input\": \"select\",\n *         \"options\": [\n *           \"basis\",\n *           \"cardinal\",\n *           \"catmull-rom\",\n *           \"linear\",\n *           \"monotone\",\n *           \"natural\",\n *           \"step\",\n *           \"step-after\",\n *           \"step-before\"\n *         ]\n *       }\n *     }\n *   ],\n * \n *   \"data\": [\n *     {\n *       \"name\": \"table\",\n *       \"values\": [\n *         {\"x\": 0, \"y\": 28, \"c\":0}, {\"x\": 0, \"y\": 20, \"c\":1},\n *         {\"x\": 1, \"y\": 43, \"c\":0}, {\"x\": 1, \"y\": 35, \"c\":1},\n *         {\"x\": 2, \"y\": 81, \"c\":0}, {\"x\": 2, \"y\": 10, \"c\":1},\n *         {\"x\": 3, \"y\": 19, \"c\":0}, {\"x\": 3, \"y\": 15, \"c\":1},\n *         {\"x\": 4, \"y\": 52, \"c\":0}, {\"x\": 4, \"y\": 48, \"c\":1},\n *         {\"x\": 5, \"y\": 24, \"c\":0}, {\"x\": 5, \"y\": 28, \"c\":1},\n *         {\"x\": 6, \"y\": 87, \"c\":0}, {\"x\": 6, \"y\": 66, \"c\":1},\n *         {\"x\": 7, \"y\": 17, \"c\":0}, {\"x\": 7, \"y\": 27, \"c\":1},\n *         {\"x\": 8, \"y\": 68, \"c\":0}, {\"x\": 8, \"y\": 16, \"c\":1},\n *         {\"x\": 9, \"y\": 49, \"c\":0}, {\"x\": 9, \"y\": 25, \"c\":1}\n *       ]\n *     }\n *   ],\n * \n *   \"scales\": [\n *     {\n *       \"name\": \"x\",\n *       \"type\": \"point\",\n *       \"range\": \"width\",\n *       \"domain\": {\"data\": \"table\", \"field\": \"x\"}\n *     },\n *     {\n *       \"name\": \"y\",\n *       \"type\": \"linear\",\n *       \"range\": \"height\",\n *       \"nice\": true,\n *       \"zero\": true,\n *       \"domain\": {\"data\": \"table\", \"field\": \"y\"}\n *     },\n *     {\n *       \"name\": \"color\",\n *       \"type\": \"ordinal\",\n *       \"range\": \"category\",\n *       \"domain\": {\"data\": \"table\", \"field\": \"c\"}\n *     }\n *   ],\n * \n *   \"axes\": [\n *     {\"orient\": \"bottom\", \"scale\": \"x\"},\n *     {\"orient\": \"left\", \"scale\": \"y\"}\n *   ],\n * \n *   \"marks\": [\n *     {\n *       \"type\": \"group\",\n *       \"from\": {\n *         \"facet\": {\n *           \"name\": \"series\",\n *           \"data\": \"table\",\n *           \"groupby\": \"c\"\n *         }\n *       },\n *       \"marks\": [\n *         {\n *           \"type\": \"line\",\n *           \"from\": {\"data\": \"series\"},\n *           \"encode\": {\n *             \"enter\": {\n *               \"x\": {\"scale\": \"x\", \"field\": \"x\"},\n *               \"y\": {\"scale\": \"y\", \"field\": \"y\"},\n *               \"stroke\": {\"scale\": \"color\", \"field\": \"c\"},\n *               \"strokeWidth\": {\"value\": 2}\n *             },\n *             \"update\": {\n *               \"interpolate\": {\"signal\": \"interpolate\"},\n *               \"strokeOpacity\": {\"value\": 1}\n *             },\n *             \"hover\": {\n *               \"strokeOpacity\": {\"value\": 0.5}\n *             }\n *           }\n *         }\n *       ]\n *     }\n *   ]\n * });\n * ```\n * \n * ![Screenshot of vega schema chart](img/vegaSpecExample.png)\n * \n * @param {String | Object} spec - Vega specification\n */",
    "meta": {
      "range": [
        26400,
        27471
      ],
      "filename": "vega.js",
      "lineno": 765,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014389",
        "name": "module.exports.embedFromVegaSpec",
        "type": "FunctionExpression",
        "value": "embedFromVegaSpec",
        "paramnames": [
          "spec",
          "options"
        ]
      },
      "vars": {
        "context": "module:vega.embedFromVegaSpec~context",
        "undefined": null,
        "jsonResult": "module:vega~jsonResult",
        "compiledSpec": "module:vega.embedFromVegaSpec~compiledSpec"
      }
    },
    "description": "Renders an Vega (not Vega-lite) chart from a JSON / Object specification.\n\nUnlike {@link module:vega.svgFromVegaSpec|vega.svgFromVegaSpec()} - this renders with {@link module:ijs.htmlScript|ijs.htmlScript} (html)\n\nSimilar to {@link module:vega.svgFromSpec|vega.svgFromSpec()},\nthe specification can either be an object or JSON encoded string. \n\nThis example is from the [Vega Line Chart example](https://vega.github.io/vega/examples/line-chart/)\n\n```\nutils.vega.embedFromVegaSpec({\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"description\": \"A basic line chart example.\",\n  \"width\": 500,\n  \"height\": 200,\n  \"padding\": 5,\n\n  \"signals\": [\n    {\n      \"name\": \"interpolate\",\n      \"value\": \"linear\",\n      \"bind\": {\n        \"input\": \"select\",\n        \"options\": [\n          \"basis\",\n          \"cardinal\",\n          \"catmull-rom\",\n          \"linear\",\n          \"monotone\",\n          \"natural\",\n          \"step\",\n          \"step-after\",\n          \"step-before\"\n        ]\n      }\n    }\n  ],\n\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"values\": [\n        {\"x\": 0, \"y\": 28, \"c\":0}, {\"x\": 0, \"y\": 20, \"c\":1},\n        {\"x\": 1, \"y\": 43, \"c\":0}, {\"x\": 1, \"y\": 35, \"c\":1},\n        {\"x\": 2, \"y\": 81, \"c\":0}, {\"x\": 2, \"y\": 10, \"c\":1},\n        {\"x\": 3, \"y\": 19, \"c\":0}, {\"x\": 3, \"y\": 15, \"c\":1},\n        {\"x\": 4, \"y\": 52, \"c\":0}, {\"x\": 4, \"y\": 48, \"c\":1},\n        {\"x\": 5, \"y\": 24, \"c\":0}, {\"x\": 5, \"y\": 28, \"c\":1},\n        {\"x\": 6, \"y\": 87, \"c\":0}, {\"x\": 6, \"y\": 66, \"c\":1},\n        {\"x\": 7, \"y\": 17, \"c\":0}, {\"x\": 7, \"y\": 27, \"c\":1},\n        {\"x\": 8, \"y\": 68, \"c\":0}, {\"x\": 8, \"y\": 16, \"c\":1},\n        {\"x\": 9, \"y\": 49, \"c\":0}, {\"x\": 9, \"y\": 25, \"c\":1}\n      ]\n    }\n  ],\n\n  \"scales\": [\n    {\n      \"name\": \"x\",\n      \"type\": \"point\",\n      \"range\": \"width\",\n      \"domain\": {\"data\": \"table\", \"field\": \"x\"}\n    },\n    {\n      \"name\": \"y\",\n      \"type\": \"linear\",\n      \"range\": \"height\",\n      \"nice\": true,\n      \"zero\": true,\n      \"domain\": {\"data\": \"table\", \"field\": \"y\"}\n    },\n    {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"range\": \"category\",\n      \"domain\": {\"data\": \"table\", \"field\": \"c\"}\n    }\n  ],\n\n  \"axes\": [\n    {\"orient\": \"bottom\", \"scale\": \"x\"},\n    {\"orient\": \"left\", \"scale\": \"y\"}\n  ],\n\n  \"marks\": [\n    {\n      \"type\": \"group\",\n      \"from\": {\n        \"facet\": {\n          \"name\": \"series\",\n          \"data\": \"table\",\n          \"groupby\": \"c\"\n        }\n      },\n      \"marks\": [\n        {\n          \"type\": \"line\",\n          \"from\": {\"data\": \"series\"},\n          \"encode\": {\n            \"enter\": {\n              \"x\": {\"scale\": \"x\", \"field\": \"x\"},\n              \"y\": {\"scale\": \"y\", \"field\": \"y\"},\n              \"stroke\": {\"scale\": \"color\", \"field\": \"c\"},\n              \"strokeWidth\": {\"value\": 2}\n            },\n            \"update\": {\n              \"interpolate\": {\"signal\": \"interpolate\"},\n              \"strokeOpacity\": {\"value\": 1}\n            },\n            \"hover\": {\n              \"strokeOpacity\": {\"value\": 0.5}\n            }\n          }\n        }\n      ]\n    }\n  ]\n});\n```\n\n![Screenshot of vega schema chart](img/vegaSpecExample.png)",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Object"
          ]
        },
        "description": "Vega specification",
        "name": "spec"
      }
    ],
    "name": "embedFromVegaSpec",
    "longname": "module:vega.embedFromVegaSpec",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26487,
        26521
      ],
      "filename": "vega.js",
      "lineno": 766,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014401",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.embedFromVegaSpec~context",
    "kind": "constant",
    "memberof": "module:vega.embedFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26625,
        26636
      ],
      "filename": "vega.js",
      "lineno": 768,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014417",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26638,
        26658
      ],
      "filename": "vega.js",
      "lineno": 768,
      "columnno": 23,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014419",
        "name": "console",
        "type": "Identifier",
        "value": "cellConsole"
      }
    },
    "undocumented": true,
    "name": "console",
    "longname": "module:vega~console",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26709,
        26726
      ],
      "filename": "vega.js",
      "lineno": 773,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014430",
        "name": "jsonResult",
        "type": "Identifier",
        "value": "spec"
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega.embedFromVegaSpec~jsonResult",
    "kind": "member",
    "memberof": "module:vega.embedFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26770,
        26799
      ],
      "filename": "vega.js",
      "lineno": 775,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014440",
        "name": "jsonResult",
        "type": "CallExpression",
        "funcscope": "module:vega.embedFromVegaSpec",
        "value": "",
        "paramnames": []
      }
    },
    "undocumented": true,
    "name": "jsonResult",
    "longname": "module:vega~jsonResult",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26817,
        26842
      ],
      "filename": "vega.js",
      "lineno": 777,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014448",
        "name": "compiledSpec",
        "type": "Identifier",
        "value": "jsonResult"
      }
    },
    "undocumented": true,
    "name": "compiledSpec",
    "longname": "module:vega.embedFromVegaSpec~compiledSpec",
    "kind": "constant",
    "memberof": "module:vega.embedFromVegaSpec",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26895,
        26913
      ],
      "filename": "vega.js",
      "lineno": 781,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014459",
        "name": "data",
        "type": "Identifier",
        "value": "compiledSpec"
      }
    },
    "undocumented": true,
    "name": "data",
    "longname": "module:vega~data",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        26921,
        27090
      ],
      "filename": "vega.js",
      "lineno": 782,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014461",
        "name": "scripts",
        "type": "ArrayExpression",
        "value": "[\"https://cdn.jsdelivr.net/npm/vega@5\",\"https://cdn.jsdelivr.net/npm/vega-lite@5\",\"https://cdn.jsdelivr.net/npm/vega-embed@6\"]"
      }
    },
    "undocumented": true,
    "name": "scripts",
    "longname": "module:vega~scripts",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        27098,
        27147
      ],
      "filename": "vega.js",
      "lineno": 787,
      "columnno": 6,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014466",
        "name": "onReady",
        "type": "MemberExpression",
        "value": "InternalHtmlScripts.embedFromSpecOnReady"
      }
    },
    "undocumented": true,
    "name": "onReady",
    "longname": "module:vega~onReady",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "/**\n * Send a vega specification using the vega mime-type.\n * \n * Note, the {@link module:vega.svgFromVegaSpec|vega.svgFromVegaSpec()}\n * and {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec()} are recommended,\n * as there are some situations this has seemed to fail.\n * \n * [See the supported Jupyter Lab mime-types for additional detail](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#vega-vega-lite)\n * \n * @param {Object | String} vegaSpec - vega specification\n * @example\n * // vega specification examples found here: https://vega.github.io/vega/examples/\n * utils.vega.vegaMimeType({\n *   \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n *   \"description\": \"An example of a space-fulling radial layout for hierarchical data.\",\n *   \"width\": 600,\n *   \"height\": 600,\n *   \"padding\": 5,\n *   \"autosize\": \"none\",\n * \n *   \"data\": [\n *     {\n *       \"name\": \"tree\",\n *       \"url\": \"https://vega.github.io/vega/data/flare.json\",\n *       \"transform\": [\n *         {\n *           \"type\": \"stratify\",\n *           \"key\": \"id\",\n *           \"parentKey\": \"parent\"\n *         },\n *         {\n *           \"type\": \"partition\",\n *           \"field\": \"size\",\n *           \"sort\": {\"field\": \"value\"},\n *           \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"width / 2\"}],\n *           \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n *         }\n *       ]\n *     }\n *   ],\n *   ...\n * });\n */",
    "meta": {
      "range": [
        30486,
        30785
      ],
      "filename": "vega.js",
      "lineno": 901,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014497",
        "name": "module.exports.vegaMimeType",
        "type": "FunctionExpression",
        "value": "vegaMimeType",
        "paramnames": [
          "vegaSpec"
        ]
      },
      "vars": {
        "context": "module:vega.vegaMimeType~context",
        "undefined": null
      }
    },
    "description": "Send a vega specification using the vega mime-type.\n\nNote, the {@link module:vega.svgFromVegaSpec|vega.svgFromVegaSpec()}\nand {@link module:vega.embedFromVegaSpec|vega.embedFromVegaSpec()} are recommended,\nas there are some situations this has seemed to fail.\n\n[See the supported Jupyter Lab mime-types for additional detail](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#vega-vega-lite)",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "String"
          ]
        },
        "description": "vega specification",
        "name": "vegaSpec"
      }
    ],
    "examples": [
      "// vega specification examples found here: https://vega.github.io/vega/examples/\nutils.vega.vegaMimeType({\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"description\": \"An example of a space-fulling radial layout for hierarchical data.\",\n  \"width\": 600,\n  \"height\": 600,\n  \"padding\": 5,\n  \"autosize\": \"none\",\n\n  \"data\": [\n    {\n      \"name\": \"tree\",\n      \"url\": \"https://vega.github.io/vega/data/flare.json\",\n      \"transform\": [\n        {\n          \"type\": \"stratify\",\n          \"key\": \"id\",\n          \"parentKey\": \"parent\"\n        },\n        {\n          \"type\": \"partition\",\n          \"field\": \"size\",\n          \"sort\": {\"field\": \"value\"},\n          \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"width / 2\"}],\n          \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n        }\n      ]\n    }\n  ],\n  ...\n});"
    ],
    "name": "vegaMimeType",
    "longname": "module:vega.vegaMimeType",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30558,
        30592
      ],
      "filename": "vega.js",
      "lineno": 902,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014508",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.vegaMimeType~context",
    "kind": "constant",
    "memberof": "module:vega.vegaMimeType",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30696,
        30707
      ],
      "filename": "vega.js",
      "lineno": 904,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014524",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        30739,
        30779
      ],
      "filename": "vega.js",
      "lineno": 906,
      "columnno": 17,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014533",
        "name": "\"application/vnd.vega.v5+json\"",
        "type": "Identifier",
        "value": "vegaSpec"
      }
    },
    "undocumented": true,
    "name": "\"application/vnd.vega.v5+json\"",
    "longname": "module:vega~\"application/vnd.vega.v5+json\"",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "/**\n * Sends a vega-lite specification using the vega-lite mime-type.\n * \n * Note, the {@link module:vega.svgFromSpec|vega.svgFromSpec()} and {@link module:vega.embedFromSpec|vega.embedFromSpec()} are recommended,\n * as there are a few situations this has seemed to fail.\n * \n * [See the supported Jupyter Lab mime-types for additional detail](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#vega-vega-lite)\n * \n * @param {Object | String} vegaLiteSpec - vega-lite specification\n * @example\n * // vega-lite spec examples found here: https://vega.github.io/vega-lite/examples/\n * utils.vega.vegaLiteMimeType({\n *   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n *   \"description\": \"A simple bar chart with embedded data.\",\n *   \"data\": {\n *     \"values\": [\n *       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n *       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n *       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n *     ]\n *   },\n *   \"mark\": \"bar\",\n *   \"encoding\": {\n *     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n *     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n *   }\n * });\n */",
    "meta": {
      "range": [
        31992,
        32311
      ],
      "filename": "vega.js",
      "lineno": 937,
      "columnno": 0,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014536",
        "name": "module.exports.vegaLiteMimeType",
        "type": "FunctionExpression",
        "value": "vegaLiteMimeType",
        "paramnames": [
          "vegaLiteSpec"
        ]
      },
      "vars": {
        "context": "module:vega.vegaLiteMimeType~context",
        "undefined": null
      }
    },
    "description": "Sends a vega-lite specification using the vega-lite mime-type.\n\nNote, the {@link module:vega.svgFromSpec|vega.svgFromSpec()} and {@link module:vega.embedFromSpec|vega.embedFromSpec()} are recommended,\nas there are a few situations this has seemed to fail.\n\n[See the supported Jupyter Lab mime-types for additional detail](https://jupyterlab.readthedocs.io/en/2.2.x/user/file_formats.html#vega-vega-lite)",
    "params": [
      {
        "type": {
          "names": [
            "Object",
            "String"
          ]
        },
        "description": "vega-lite specification",
        "name": "vegaLiteSpec"
      }
    ],
    "examples": [
      "// vega-lite spec examples found here: https://vega.github.io/vega-lite/examples/\nutils.vega.vegaLiteMimeType({\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  \"data\": {\n    \"values\": [\n      {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},\n      {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},\n      {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}\n    ]\n  },\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},\n    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n  }\n});"
    ],
    "name": "vegaLiteMimeType",
    "longname": "module:vega.vegaLiteMimeType",
    "kind": "function",
    "memberof": "module:vega",
    "scope": "static"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32076,
        32110
      ],
      "filename": "vega.js",
      "lineno": 938,
      "columnno": 8,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014547",
        "name": "context",
        "type": "CallExpression",
        "value": ""
      }
    },
    "undocumented": true,
    "name": "context",
    "longname": "module:vega.vegaLiteMimeType~context",
    "kind": "constant",
    "memberof": "module:vega.vegaLiteMimeType",
    "scope": "inner",
    "params": []
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32214,
        32225
      ],
      "filename": "vega.js",
      "lineno": 940,
      "columnno": 10,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014563",
        "name": "$$",
        "type": "Identifier",
        "value": "display"
      }
    },
    "undocumented": true,
    "name": "$$",
    "longname": "module:vega~$$",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        32257,
        32305
      ],
      "filename": "vega.js",
      "lineno": 942,
      "columnno": 17,
      "path": "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src",
      "code": {
        "id": "astnode100014572",
        "name": "\"application/vnd.vegalite.v3+json\"",
        "type": "Identifier",
        "value": "vegaLiteSpec"
      }
    },
    "undocumented": true,
    "name": "\"application/vnd.vegalite.v3+json\"",
    "longname": "module:vega~\"application/vnd.vegalite.v3+json\"",
    "kind": "member",
    "scope": "inner",
    "memberof": "module:vega"
  },
  {
    "kind": "package",
    "longname": "package:undefined",
    "files": [
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/aggregate.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/array.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/base64.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/datasets.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/file.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/format.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/group.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/htmlScript_internal.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/ijs.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/index.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/latex.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/leaflet.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/logger.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/object.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/plantuml.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/random_simplex.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/random.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/set.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/SourceMap.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/svg_utilityFunctions.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/svg.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/TableGenerator.js",
      "/Users/proth/Documents/notebooks/jupyter-ijavascript-utils/src/vega.js"
    ]
  }
]